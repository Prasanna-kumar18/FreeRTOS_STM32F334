
4.0_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c44  08005c44  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005c44  08005c44  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c44  08005c44  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c48  08005c48  00015c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001b90  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001c08  20001c08  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f9aa  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ba  00000000  00000000  0002fa52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00032110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e18  00000000  00000000  00033050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ade  00000000  00000000  00033e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e8b  00000000  00000000  00055946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8fff  00000000  00000000  000667d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f7d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000459c  00000000  00000000  0012f820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b40 	.word	0x08005b40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005b40 	.word	0x08005b40

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b590      	push	{r4, r7, lr}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 fa81 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f84f 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f889 	bl	80002f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
oneshottimer = xTimerCreate("One shot timer", 1000, pdFALSE, 0, oneshotcallback);
 80001e2:	4b1f      	ldr	r3, [pc, #124]	; (8000260 <main+0x90>)
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2300      	movs	r3, #0
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001ee:	481d      	ldr	r0, [pc, #116]	; (8000264 <main+0x94>)
 80001f0:	f004 f846 	bl	8004280 <xTimerCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a1c      	ldr	r2, [pc, #112]	; (8000268 <main+0x98>)
 80001f8:	6013      	str	r3, [r2, #0]
autoreloadtimer = xTimerCreate("Auto Reload", 1000, pdTRUE, 0, Autoreloadcallback);
 80001fa:	4b1c      	ldr	r3, [pc, #112]	; (800026c <main+0x9c>)
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2300      	movs	r3, #0
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000206:	481a      	ldr	r0, [pc, #104]	; (8000270 <main+0xa0>)
 8000208:	f004 f83a 	bl	8004280 <xTimerCreate>
 800020c:	4603      	mov	r3, r0
 800020e:	4a19      	ldr	r2, [pc, #100]	; (8000274 <main+0xa4>)
 8000210:	6013      	str	r3, [r2, #0]
if(oneshottimer!=NULL && autoreloadtimer!=NULL)
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <main+0x98>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d01e      	beq.n	8000258 <main+0x88>
 800021a:	4b16      	ldr	r3, [pc, #88]	; (8000274 <main+0xa4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d01a      	beq.n	8000258 <main+0x88>
{
	printf("Timer created successfully\n");
 8000222:	4815      	ldr	r0, [pc, #84]	; (8000278 <main+0xa8>)
 8000224:	f004 ffee 	bl	8005204 <puts>
	xTimerStart(oneshottimer,0);
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <main+0x98>)
 800022a:	681c      	ldr	r4, [r3, #0]
 800022c:	f003 faac 	bl	8003788 <xTaskGetTickCount>
 8000230:	4602      	mov	r2, r0
 8000232:	2300      	movs	r3, #0
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2300      	movs	r3, #0
 8000238:	2101      	movs	r1, #1
 800023a:	4620      	mov	r0, r4
 800023c:	f004 f87a 	bl	8004334 <xTimerGenericCommand>
	xTimerStart(autoreloadtimer,0);
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <main+0xa4>)
 8000242:	681c      	ldr	r4, [r3, #0]
 8000244:	f003 faa0 	bl	8003788 <xTaskGetTickCount>
 8000248:	4602      	mov	r2, r0
 800024a:	2300      	movs	r3, #0
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2300      	movs	r3, #0
 8000250:	2101      	movs	r1, #1
 8000252:	4620      	mov	r0, r4
 8000254:	f004 f86e 	bl	8004334 <xTimerGenericCommand>
}

vTaskStartScheduler();
 8000258:	f003 f93a 	bl	80034d0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025c:	e7fe      	b.n	800025c <main+0x8c>
 800025e:	bf00      	nop
 8000260:	08000355 	.word	0x08000355
 8000264:	08005b58 	.word	0x08005b58
 8000268:	20000094 	.word	0x20000094
 800026c:	08000371 	.word	0x08000371
 8000270:	08005b68 	.word	0x08005b68
 8000274:	20000098 	.word	0x20000098
 8000278:	08005b74 	.word	0x08005b74

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f004 ff44 	bl	8005118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2310      	movs	r3, #16
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fcce 	bl	8000c54 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002be:	f000 f877 	bl	80003b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fcf8 	bl	8001cd0 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e6:	f000 f863 	bl	80003b0 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_GPIO_Init+0x5c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a10      	ldr	r2, [pc, #64]	; (8000350 <MX_GPIO_Init+0x5c>)
 800030e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000312:	6153      	str	r3, [r2, #20]
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_GPIO_Init+0x5c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2120      	movs	r1, #32
 8000324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000328:	f000 fc62 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800032c:	2320      	movs	r3, #32
 800032e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4619      	mov	r1, r3
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f000 fae2 	bl	800090c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000348:	bf00      	nop
 800034a:	3718      	adds	r7, #24
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000

08000354 <oneshotcallback>:

/* USER CODE BEGIN 4 */
void oneshotcallback(TimerHandle_t timer)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	printf("One shot timer\n");
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <oneshotcallback+0x18>)
 800035e:	f004 ff51 	bl	8005204 <puts>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	08005b58 	.word	0x08005b58

08000370 <Autoreloadcallback>:

void Autoreloadcallback(TimerHandle_t timer1)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000378:	2120      	movs	r1, #32
 800037a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037e:	f000 fc4f 	bl	8000c20 <HAL_GPIO_TogglePin>
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d101      	bne.n	80003a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800039e:	f000 f9b3 	bl	8000708 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40001000 	.word	0x40001000

080003b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b4:	b672      	cpsid	i
}
 80003b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <Error_Handler+0x8>
	...

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <HAL_MspInit+0x44>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <HAL_MspInit+0x44>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <HAL_MspInit+0x44>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <HAL_MspInit+0x44>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a08      	ldr	r2, [pc, #32]	; (8000400 <HAL_MspInit+0x44>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HAL_MspInit+0x44>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08e      	sub	sp, #56	; 0x38
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800040c:	2300      	movs	r3, #0
 800040e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000410:	2300      	movs	r3, #0
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000414:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <HAL_InitTick+0xe0>)
 8000416:	69db      	ldr	r3, [r3, #28]
 8000418:	4a32      	ldr	r2, [pc, #200]	; (80004e4 <HAL_InitTick+0xe0>)
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	61d3      	str	r3, [r2, #28]
 8000420:	4b30      	ldr	r3, [pc, #192]	; (80004e4 <HAL_InitTick+0xe0>)
 8000422:	69db      	ldr	r3, [r3, #28]
 8000424:	f003 0310 	and.w	r3, r3, #16
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800042c:	f107 0210 	add.w	r2, r7, #16
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	4611      	mov	r1, r2
 8000436:	4618      	mov	r0, r3
 8000438:	f001 fe5e 	bl	80020f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800043c:	6a3b      	ldr	r3, [r7, #32]
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000442:	2b00      	cmp	r3, #0
 8000444:	d103      	bne.n	800044e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000446:	f001 fe35 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 800044a:	6378      	str	r0, [r7, #52]	; 0x34
 800044c:	e004      	b.n	8000458 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800044e:	f001 fe31 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8000452:	4603      	mov	r3, r0
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800045a:	4a23      	ldr	r2, [pc, #140]	; (80004e8 <HAL_InitTick+0xe4>)
 800045c:	fba2 2303 	umull	r2, r3, r2, r3
 8000460:	0c9b      	lsrs	r3, r3, #18
 8000462:	3b01      	subs	r3, #1
 8000464:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000466:	4b21      	ldr	r3, [pc, #132]	; (80004ec <HAL_InitTick+0xe8>)
 8000468:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <HAL_InitTick+0xec>)
 800046a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800046c:	4b1f      	ldr	r3, [pc, #124]	; (80004ec <HAL_InitTick+0xe8>)
 800046e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000472:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000474:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <HAL_InitTick+0xe8>)
 8000476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000478:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800047a:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <HAL_InitTick+0xe8>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <HAL_InitTick+0xe8>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000486:	4b19      	ldr	r3, [pc, #100]	; (80004ec <HAL_InitTick+0xe8>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800048c:	4817      	ldr	r0, [pc, #92]	; (80004ec <HAL_InitTick+0xe8>)
 800048e:	f001 fe65 	bl	800215c <HAL_TIM_Base_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000498:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800049c:	2b00      	cmp	r3, #0
 800049e:	d11b      	bne.n	80004d8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80004a0:	4812      	ldr	r0, [pc, #72]	; (80004ec <HAL_InitTick+0xe8>)
 80004a2:	f001 febd 	bl	8002220 <HAL_TIM_Base_Start_IT>
 80004a6:	4603      	mov	r3, r0
 80004a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80004ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d111      	bne.n	80004d8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80004b4:	2036      	movs	r0, #54	; 0x36
 80004b6:	f000 fa1b 	bl	80008f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2b0f      	cmp	r3, #15
 80004be:	d808      	bhi.n	80004d2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 80004c0:	2200      	movs	r2, #0
 80004c2:	6879      	ldr	r1, [r7, #4]
 80004c4:	2036      	movs	r0, #54	; 0x36
 80004c6:	f000 f9f7 	bl	80008b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ca:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <HAL_InitTick+0xf0>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6013      	str	r3, [r2, #0]
 80004d0:	e002      	b.n	80004d8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80004d2:	2301      	movs	r3, #1
 80004d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3738      	adds	r7, #56	; 0x38
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	431bde83 	.word	0x431bde83
 80004ec:	2000009c 	.word	0x2000009c
 80004f0:	40001000 	.word	0x40001000
 80004f4:	20000004 	.word	0x20000004

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <TIM6_DAC1_IRQHandler+0x10>)
 800052a:	f001 fed5 	bl	80022d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000009c 	.word	0x2000009c

08000538 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <ITM_SendChar+0x48>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <ITM_SendChar+0x48>)
 8000548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800054c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <ITM_SendChar+0x4c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <ITM_SendChar+0x4c>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800055a:	bf00      	nop
 800055c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f8      	beq.n	800055c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800056a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	6013      	str	r3, [r2, #0]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000edfc 	.word	0xe000edfc
 8000584:	e0000e00 	.word	0xe0000e00

08000588 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e00a      	b.n	80005b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800059a:	f3af 8000 	nop.w
 800059e:	4601      	mov	r1, r0
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	60ba      	str	r2, [r7, #8]
 80005a6:	b2ca      	uxtb	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf0      	blt.n	800059a <_read+0x12>
  }

  return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e009      	b.n	80005e8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffab 	bl	8000538 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf1      	blt.n	80005d4 <_write+0x12>
  }
  return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <_close>:

int _close(int file)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000622:	605a      	str	r2, [r3, #4]
  return 0;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_isatty>:

int _isatty(int file)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800068c:	f7ff ffea 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f004 fcfd 	bl	80050b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff fd89 	bl	80001d0 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80006cc:	08005c4c 	.word	0x08005c4c
  ldr r2, =_sbss
 80006d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80006d4:	20001c08 	.word	0x20001c08

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f8d8 	bl	80008a2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	200f      	movs	r0, #15
 80006f4:	f7ff fe86 	bl	8000404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff fe60 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_IncTick+0x20>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_IncTick+0x24>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_IncTick+0x24>)
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000008 	.word	0x20000008
 800072c:	200000e8 	.word	0x200000e8

08000730 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;  
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <HAL_GetTick+0x14>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	200000e8 	.word	0x200000e8

08000748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	60d3      	str	r3, [r2, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	f003 0307 	and.w	r3, r3, #7
}
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	db0b      	blt.n	80007d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f003 021f 	and.w	r2, r3, #31
 80007c4:	4907      	ldr	r1, [pc, #28]	; (80007e4 <__NVIC_EnableIRQ+0x38>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	095b      	lsrs	r3, r3, #5
 80007cc:	2001      	movs	r0, #1
 80007ce:	fa00 f202 	lsl.w	r2, r0, r2
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000e100 	.word	0xe000e100

080007e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db0a      	blt.n	8000812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	490c      	ldr	r1, [pc, #48]	; (8000834 <__NVIC_SetPriority+0x4c>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	0112      	lsls	r2, r2, #4
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	440b      	add	r3, r1
 800080c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000810:	e00a      	b.n	8000828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4908      	ldr	r1, [pc, #32]	; (8000838 <__NVIC_SetPriority+0x50>)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	3b04      	subs	r3, #4
 8000820:	0112      	lsls	r2, r2, #4
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	440b      	add	r3, r1
 8000826:	761a      	strb	r2, [r3, #24]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000e100 	.word	0xe000e100
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083c:	b480      	push	{r7}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	f1c3 0307 	rsb	r3, r3, #7
 8000856:	2b04      	cmp	r3, #4
 8000858:	bf28      	it	cs
 800085a:	2304      	movcs	r3, #4
 800085c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3304      	adds	r3, #4
 8000862:	2b06      	cmp	r3, #6
 8000864:	d902      	bls.n	800086c <NVIC_EncodePriority+0x30>
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3b03      	subs	r3, #3
 800086a:	e000      	b.n	800086e <NVIC_EncodePriority+0x32>
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	f04f 32ff 	mov.w	r2, #4294967295
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43da      	mvns	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	401a      	ands	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	43d9      	mvns	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	4313      	orrs	r3, r2
         );
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ff4c 	bl	8000748 <__NVIC_SetPriorityGrouping>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ca:	f7ff ff61 	bl	8000790 <__NVIC_GetPriorityGrouping>
 80008ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	68b9      	ldr	r1, [r7, #8]
 80008d4:	6978      	ldr	r0, [r7, #20]
 80008d6:	f7ff ffb1 	bl	800083c <NVIC_EncodePriority>
 80008da:	4602      	mov	r2, r0
 80008dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff80 	bl	80007e8 <__NVIC_SetPriority>
}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff54 	bl	80007ac <__NVIC_EnableIRQ>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800090c:	b480      	push	{r7}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e14e      	b.n	8000bba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2101      	movs	r1, #1
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	f000 8140 	beq.w	8000bb4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	2b01      	cmp	r3, #1
 800093e:	d005      	beq.n	800094c <HAL_GPIO_Init+0x40>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 0303 	and.w	r3, r3, #3
 8000948:	2b02      	cmp	r3, #2
 800094a:	d130      	bne.n	80009ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000982:	2201      	movs	r2, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	f003 0201 	and.w	r2, r3, #1
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 0303 	and.w	r3, r3, #3
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d017      	beq.n	80009ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2203      	movs	r2, #3
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d123      	bne.n	8000a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	08da      	lsrs	r2, r3, #3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3208      	adds	r2, #8
 80009fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	691a      	ldr	r2, [r3, #16]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	08da      	lsrs	r2, r3, #3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3208      	adds	r2, #8
 8000a38:	6939      	ldr	r1, [r7, #16]
 8000a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0203 	and.w	r2, r3, #3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 809a 	beq.w	8000bb4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a80:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <HAL_GPIO_Init+0x2cc>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a54      	ldr	r2, [pc, #336]	; (8000bd8 <HAL_GPIO_Init+0x2cc>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <HAL_GPIO_Init+0x2cc>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a98:	4a50      	ldr	r2, [pc, #320]	; (8000bdc <HAL_GPIO_Init+0x2d0>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	220f      	movs	r2, #15
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac2:	d013      	beq.n	8000aec <HAL_GPIO_Init+0x1e0>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a46      	ldr	r2, [pc, #280]	; (8000be0 <HAL_GPIO_Init+0x2d4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00d      	beq.n	8000ae8 <HAL_GPIO_Init+0x1dc>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a45      	ldr	r2, [pc, #276]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d007      	beq.n	8000ae4 <HAL_GPIO_Init+0x1d8>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a44      	ldr	r2, [pc, #272]	; (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d101      	bne.n	8000ae0 <HAL_GPIO_Init+0x1d4>
 8000adc:	2303      	movs	r3, #3
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x1e2>
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	e004      	b.n	8000aee <HAL_GPIO_Init+0x1e2>
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x1e2>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <HAL_GPIO_Init+0x1e2>
 8000aec:	2300      	movs	r3, #0
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	f002 0203 	and.w	r2, r2, #3
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000afe:	4937      	ldr	r1, [pc, #220]	; (8000bdc <HAL_GPIO_Init+0x2d0>)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	3302      	adds	r3, #2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0c:	4b37      	ldr	r3, [pc, #220]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b30:	4a2e      	ldr	r2, [pc, #184]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b5a:	4a24      	ldr	r2, [pc, #144]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f47f aea9 	bne.w	800091c <HAL_GPIO_Init+0x10>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	371c      	adds	r7, #28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	40010400 	.word	0x40010400

08000bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c00:	787b      	ldrb	r3, [r7, #1]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4013      	ands	r3, r2
 8000c38:	041a      	lsls	r2, r3, #16
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	43d9      	mvns	r1, r3
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	400b      	ands	r3, r1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	619a      	str	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c64:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f001 b823 	b.w	8001cc0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 817d 	beq.w	8000f8a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c90:	4bbc      	ldr	r3, [pc, #752]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d00c      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c9c:	4bb9      	ldr	r3, [pc, #740]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b08      	cmp	r3, #8
 8000ca6:	d15c      	bne.n	8000d62 <HAL_RCC_OscConfig+0x10e>
 8000ca8:	4bb6      	ldr	r3, [pc, #728]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb4:	d155      	bne.n	8000d62 <HAL_RCC_OscConfig+0x10e>
 8000cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cc2:	fa93 f3a3 	rbit	r3, r3
 8000cc6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cce:	fab3 f383 	clz	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	095b      	lsrs	r3, r3, #5
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d102      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x94>
 8000ce2:	4ba8      	ldr	r3, [pc, #672]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	e015      	b.n	8000d14 <HAL_RCC_OscConfig+0xc0>
 8000ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000cf4:	fa93 f3a3 	rbit	r3, r3
 8000cf8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d00:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d04:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d08:	fa93 f3a3 	rbit	r3, r3
 8000d0c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d10:	4b9c      	ldr	r3, [pc, #624]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d18:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d1c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d20:	fa92 f2a2 	rbit	r2, r2
 8000d24:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d28:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	f042 0220 	orr.w	r2, r2, #32
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	f002 021f 	and.w	r2, r2, #31
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 811f 	beq.w	8000f88 <HAL_RCC_OscConfig+0x334>
 8000d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 8116 	bne.w	8000f88 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f000 bfaf 	b.w	8001cc0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d72:	d106      	bne.n	8000d82 <HAL_RCC_OscConfig+0x12e>
 8000d74:	4b83      	ldr	r3, [pc, #524]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a82      	ldr	r2, [pc, #520]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e036      	b.n	8000df0 <HAL_RCC_OscConfig+0x19c>
 8000d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10c      	bne.n	8000dac <HAL_RCC_OscConfig+0x158>
 8000d92:	4b7c      	ldr	r3, [pc, #496]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7b      	ldr	r2, [pc, #492]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b79      	ldr	r3, [pc, #484]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a78      	ldr	r2, [pc, #480]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e021      	b.n	8000df0 <HAL_RCC_OscConfig+0x19c>
 8000dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x184>
 8000dbe:	4b71      	ldr	r3, [pc, #452]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a70      	ldr	r2, [pc, #448]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b6e      	ldr	r3, [pc, #440]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a6d      	ldr	r2, [pc, #436]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e00b      	b.n	8000df0 <HAL_RCC_OscConfig+0x19c>
 8000dd8:	4b6a      	ldr	r3, [pc, #424]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a69      	ldr	r2, [pc, #420]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b67      	ldr	r3, [pc, #412]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a66      	ldr	r2, [pc, #408]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000df0:	4b64      	ldr	r3, [pc, #400]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	f023 020f 	bic.w	r2, r3, #15
 8000df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	495f      	ldr	r1, [pc, #380]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d059      	beq.n	8000ece <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fc89 	bl	8000730 <HAL_GetTick>
 8000e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e22:	e00a      	b.n	8000e3a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff fc84 	bl	8000730 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b64      	cmp	r3, #100	; 0x64
 8000e32:	d902      	bls.n	8000e3a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	f000 bf43 	b.w	8001cc0 <HAL_RCC_OscConfig+0x106c>
 8000e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e46:	fa93 f3a3 	rbit	r3, r3
 8000e4a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e4e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	fab3 f383 	clz	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	095b      	lsrs	r3, r3, #5
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d102      	bne.n	8000e6c <HAL_RCC_OscConfig+0x218>
 8000e66:	4b47      	ldr	r3, [pc, #284]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	e015      	b.n	8000e98 <HAL_RCC_OscConfig+0x244>
 8000e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e70:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e74:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e78:	fa93 f3a3 	rbit	r3, r3
 8000e7c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e88:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e8c:	fa93 f3a3 	rbit	r3, r3
 8000e90:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e94:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e9c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ea0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ea4:	fa92 f2a2 	rbit	r2, r2
 8000ea8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000eac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	f042 0220 	orr.w	r2, r2, #32
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	f002 021f 	and.w	r2, r2, #31
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0ab      	beq.n	8000e24 <HAL_RCC_OscConfig+0x1d0>
 8000ecc:	e05d      	b.n	8000f8a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fc2f 	bl	8000730 <HAL_GetTick>
 8000ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	e00a      	b.n	8000eee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fc2a 	bl	8000730 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b64      	cmp	r3, #100	; 0x64
 8000ee6:	d902      	bls.n	8000eee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	f000 bee9 	b.w	8001cc0 <HAL_RCC_OscConfig+0x106c>
 8000eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	095b      	lsrs	r3, r3, #5
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d102      	bne.n	8000f20 <HAL_RCC_OscConfig+0x2cc>
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	e015      	b.n	8000f4c <HAL_RCC_OscConfig+0x2f8>
 8000f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f24:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f2c:	fa93 f3a3 	rbit	r3, r3
 8000f30:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f38:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_RCC_OscConfig+0x330>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f50:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f54:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f58:	fa92 f2a2 	rbit	r2, r2
 8000f5c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f60:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f64:	fab2 f282 	clz	r2, r2
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	f042 0220 	orr.w	r2, r2, #32
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	f002 021f 	and.w	r2, r2, #31
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1ab      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x284>
 8000f80:	e003      	b.n	8000f8a <HAL_RCC_OscConfig+0x336>
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 817d 	beq.w	800129a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fa0:	4ba6      	ldr	r3, [pc, #664]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00b      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fac:	4ba3      	ldr	r3, [pc, #652]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d172      	bne.n	800109e <HAL_RCC_OscConfig+0x44a>
 8000fb8:	4ba0      	ldr	r3, [pc, #640]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d16c      	bne.n	800109e <HAL_RCC_OscConfig+0x44a>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fd6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	fab3 f383 	clz	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	095b      	lsrs	r3, r3, #5
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d102      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x3a0>
 8000fee:	4b93      	ldr	r3, [pc, #588]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	e013      	b.n	800101c <HAL_RCC_OscConfig+0x3c8>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800100c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001018:	4b88      	ldr	r3, [pc, #544]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	2202      	movs	r2, #2
 800101e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001022:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001026:	fa92 f2a2 	rbit	r2, r2
 800102a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800102e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	f042 0220 	orr.w	r2, r2, #32
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f002 021f 	and.w	r2, r2, #31
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00a      	beq.n	8001064 <HAL_RCC_OscConfig+0x410>
 800104e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d002      	beq.n	8001064 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	f000 be2e 	b.w	8001cc0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	4b75      	ldr	r3, [pc, #468]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001070:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	21f8      	movs	r1, #248	; 0xf8
 800107a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001082:	fa91 f1a1 	rbit	r1, r1
 8001086:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800108a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800108e:	fab1 f181 	clz	r1, r1
 8001092:	b2c9      	uxtb	r1, r1
 8001094:	408b      	lsls	r3, r1
 8001096:	4969      	ldr	r1, [pc, #420]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109c:	e0fd      	b.n	800129a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800109e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8088 	beq.w	80011c0 <HAL_RCC_OscConfig+0x56c>
 80010b0:	2301      	movs	r3, #1
 80010b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	461a      	mov	r2, r3
 80010d8:	2301      	movs	r3, #1
 80010da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010dc:	f7ff fb28 	bl	8000730 <HAL_GetTick>
 80010e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	e00a      	b.n	80010fc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e6:	f7ff fb23 	bl	8000730 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d902      	bls.n	80010fc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	f000 bde2 	b.w	8001cc0 <HAL_RCC_OscConfig+0x106c>
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001102:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800110e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	fab3 f383 	clz	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	095b      	lsrs	r3, r3, #5
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d102      	bne.n	800112c <HAL_RCC_OscConfig+0x4d8>
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	e013      	b.n	8001154 <HAL_RCC_OscConfig+0x500>
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001144:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001150:	4b3a      	ldr	r3, [pc, #232]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	2202      	movs	r2, #2
 8001156:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800115a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800115e:	fa92 f2a2 	rbit	r2, r2
 8001162:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001166:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800116a:	fab2 f282 	clz	r2, r2
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	f042 0220 	orr.w	r2, r2, #32
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	f002 021f 	and.w	r2, r2, #31
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0af      	beq.n	80010e6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	21f8      	movs	r1, #248	; 0xf8
 800119c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011a4:	fa91 f1a1 	rbit	r1, r1
 80011a8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011b0:	fab1 f181 	clz	r1, r1
 80011b4:	b2c9      	uxtb	r1, r1
 80011b6:	408b      	lsls	r3, r1
 80011b8:	4920      	ldr	r1, [pc, #128]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]
 80011be:	e06c      	b.n	800129a <HAL_RCC_OscConfig+0x646>
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	461a      	mov	r2, r3
 80011e8:	2300      	movs	r3, #0
 80011ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff faa0 	bl	8000730 <HAL_GetTick>
 80011f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fa9b 	bl	8000730 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d902      	bls.n	800120c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	f000 bd5a 	b.w	8001cc0 <HAL_RCC_OscConfig+0x106c>
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800121e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	fab3 f383 	clz	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	095b      	lsrs	r3, r3, #5
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d104      	bne.n	8001240 <HAL_RCC_OscConfig+0x5ec>
 8001236:	4b01      	ldr	r3, [pc, #4]	; (800123c <HAL_RCC_OscConfig+0x5e8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	e015      	b.n	8001268 <HAL_RCC_OscConfig+0x614>
 800123c:	40021000 	.word	0x40021000
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001258:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001264:	4bc8      	ldr	r3, [pc, #800]	; (8001588 <HAL_RCC_OscConfig+0x934>)
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	2202      	movs	r2, #2
 800126a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800126e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001272:	fa92 f2a2 	rbit	r2, r2
 8001276:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800127a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800127e:	fab2 f282 	clz	r2, r2
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	f042 0220 	orr.w	r2, r2, #32
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	f002 021f 	and.w	r2, r2, #31
 800128e:	2101      	movs	r1, #1
 8001290:	fa01 f202 	lsl.w	r2, r1, r2
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1ad      	bne.n	80011f6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8110 	beq.w	80014d0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d079      	beq.n	80013b4 <HAL_RCC_OscConfig+0x760>
 80012c0:	2301      	movs	r3, #1
 80012c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4bab      	ldr	r3, [pc, #684]	; (800158c <HAL_RCC_OscConfig+0x938>)
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	461a      	mov	r2, r3
 80012e6:	2301      	movs	r3, #1
 80012e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fa21 	bl	8000730 <HAL_GetTick>
 80012ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e00a      	b.n	800130a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fa1c 	bl	8000730 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d902      	bls.n	800130a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	f000 bcdb 	b.w	8001cc0 <HAL_RCC_OscConfig+0x106c>
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001314:	fa93 f3a3 	rbit	r3, r3
 8001318:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800131c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001320:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001324:	2202      	movs	r2, #2
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	fa93 f2a3 	rbit	r2, r3
 8001336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001348:	2202      	movs	r2, #2
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	fa93 f2a3 	rbit	r2, r3
 800135a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001362:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001364:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x934>)
 8001366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001370:	2102      	movs	r1, #2
 8001372:	6019      	str	r1, [r3, #0]
 8001374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001378:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	fa93 f1a3 	rbit	r1, r3
 8001382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001386:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800138a:	6019      	str	r1, [r3, #0]
  return result;
 800138c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001390:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	2101      	movs	r1, #1
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0a0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x6a0>
 80013b2:	e08d      	b.n	80014d0 <HAL_RCC_OscConfig+0x87c>
 80013b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	fa93 f2a3 	rbit	r2, r3
 80013ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013d6:	601a      	str	r2, [r3, #0]
  return result;
 80013d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013e0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x938>)
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	461a      	mov	r2, r3
 80013f2:	2300      	movs	r3, #0
 80013f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff f99b 	bl	8000730 <HAL_GetTick>
 80013fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff f996 	bl	8000730 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d902      	bls.n	8001416 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	f000 bc55 	b.w	8001cc0 <HAL_RCC_OscConfig+0x106c>
 8001416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800141e:	2202      	movs	r2, #2
 8001420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001426:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	fa93 f2a3 	rbit	r2, r3
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001442:	2202      	movs	r2, #2
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	fa93 f2a3 	rbit	r2, r3
 8001454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001466:	2202      	movs	r2, #2
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	fa93 f2a3 	rbit	r2, r3
 8001478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001480:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001482:	4b41      	ldr	r3, [pc, #260]	; (8001588 <HAL_RCC_OscConfig+0x934>)
 8001484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800148e:	2102      	movs	r1, #2
 8001490:	6019      	str	r1, [r3, #0]
 8001492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001496:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fa93 f1a3 	rbit	r1, r3
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014a8:	6019      	str	r1, [r3, #0]
  return result;
 80014aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	fab3 f383 	clz	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d197      	bne.n	8001400 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 81a1 	beq.w	8001828 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_RCC_OscConfig+0x934>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d116      	bne.n	8001526 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_RCC_OscConfig+0x934>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	4a22      	ldr	r2, [pc, #136]	; (8001588 <HAL_RCC_OscConfig+0x934>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	61d3      	str	r3, [r2, #28]
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_OscConfig+0x934>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800151e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_RCC_OscConfig+0x93c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d11a      	bne.n	8001568 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_RCC_OscConfig+0x93c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a16      	ldr	r2, [pc, #88]	; (8001590 <HAL_RCC_OscConfig+0x93c>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff f8f7 	bl	8000730 <HAL_GetTick>
 8001542:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	e009      	b.n	800155c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff f8f2 	bl	8000730 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e3b1      	b.n	8001cc0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_RCC_OscConfig+0x93c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ef      	beq.n	8001548 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10d      	bne.n	8001594 <HAL_RCC_OscConfig+0x940>
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_RCC_OscConfig+0x934>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a02      	ldr	r2, [pc, #8]	; (8001588 <HAL_RCC_OscConfig+0x934>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	e03c      	b.n	8001600 <HAL_RCC_OscConfig+0x9ac>
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	10908120 	.word	0x10908120
 8001590:	40007000 	.word	0x40007000
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10c      	bne.n	80015be <HAL_RCC_OscConfig+0x96a>
 80015a4:	4bc1      	ldr	r3, [pc, #772]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4ac0      	ldr	r2, [pc, #768]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	4bbe      	ldr	r3, [pc, #760]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4abd      	ldr	r2, [pc, #756]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015b6:	f023 0304 	bic.w	r3, r3, #4
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	e020      	b.n	8001600 <HAL_RCC_OscConfig+0x9ac>
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x994>
 80015ce:	4bb7      	ldr	r3, [pc, #732]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4ab6      	ldr	r2, [pc, #728]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6213      	str	r3, [r2, #32]
 80015da:	4bb4      	ldr	r3, [pc, #720]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4ab3      	ldr	r2, [pc, #716]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6213      	str	r3, [r2, #32]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x9ac>
 80015e8:	4bb0      	ldr	r3, [pc, #704]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4aaf      	ldr	r2, [pc, #700]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	4bad      	ldr	r3, [pc, #692]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4aac      	ldr	r2, [pc, #688]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80015fa:	f023 0304 	bic.w	r3, r3, #4
 80015fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8081 	beq.w	8001714 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff f88d 	bl	8000730 <HAL_GetTick>
 8001616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff f888 	bl	8000730 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e345      	b.n	8001cc0 <HAL_RCC_OscConfig+0x106c>
 8001634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001638:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800163c:	2202      	movs	r2, #2
 800163e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001660:	2202      	movs	r2, #2
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fa93 f2a3 	rbit	r2, r3
 8001672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001676:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800167a:	601a      	str	r2, [r3, #0]
  return result;
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001684:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	095b      	lsrs	r3, r3, #5
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d102      	bne.n	80016a0 <HAL_RCC_OscConfig+0xa4c>
 800169a:	4b84      	ldr	r3, [pc, #528]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	e013      	b.n	80016c8 <HAL_RCC_OscConfig+0xa74>
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016a8:	2202      	movs	r2, #2
 80016aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	4b79      	ldr	r3, [pc, #484]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016d0:	2102      	movs	r1, #2
 80016d2:	6011      	str	r1, [r2, #0]
 80016d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	fa92 f1a2 	rbit	r1, r2
 80016e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016ea:	6011      	str	r1, [r2, #0]
  return result;
 80016ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016f0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	fab2 f282 	clz	r2, r2
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f002 021f 	and.w	r2, r2, #31
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d084      	beq.n	800161c <HAL_RCC_OscConfig+0x9c8>
 8001712:	e07f      	b.n	8001814 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff f80c 	bl	8000730 <HAL_GetTick>
 8001718:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	e00b      	b.n	8001736 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff f807 	bl	8000730 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e2c4      	b.n	8001cc0 <HAL_RCC_OscConfig+0x106c>
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001746:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001762:	2202      	movs	r2, #2
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001778:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800177c:	601a      	str	r2, [r3, #0]
  return result;
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001786:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d102      	bne.n	80017a2 <HAL_RCC_OscConfig+0xb4e>
 800179c:	4b43      	ldr	r3, [pc, #268]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	e013      	b.n	80017ca <HAL_RCC_OscConfig+0xb76>
 80017a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017aa:	2202      	movs	r2, #2
 80017ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017d2:	2102      	movs	r1, #2
 80017d4:	6011      	str	r1, [r2, #0]
 80017d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	fa92 f1a2 	rbit	r1, r2
 80017e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017ec:	6011      	str	r1, [r2, #0]
  return result;
 80017ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	fab2 f282 	clz	r2, r2
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	f002 021f 	and.w	r2, r2, #31
 8001808:	2101      	movs	r1, #1
 800180a:	fa01 f202 	lsl.w	r2, r1, r2
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d184      	bne.n	800171e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001814:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	4a22      	ldr	r2, [pc, #136]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 8001822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001826:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8242 	beq.w	8001cbe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_RCC_OscConfig+0xc58>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	f000 8213 	beq.w	8001c6e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b02      	cmp	r3, #2
 8001856:	f040 8162 	bne.w	8001b1e <HAL_RCC_OscConfig+0xeca>
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001862:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800187e:	601a      	str	r2, [r3, #0]
  return result;
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001888:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	461a      	mov	r2, r3
 800189c:	2300      	movs	r3, #0
 800189e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7fe ff46 	bl	8000730 <HAL_GetTick>
 80018a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a8:	e00c      	b.n	80018c4 <HAL_RCC_OscConfig+0xc70>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b0:	f7fe ff3e 	bl	8000730 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1fd      	b.n	8001cc0 <HAL_RCC_OscConfig+0x106c>
 80018c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018e8:	601a      	str	r2, [r3, #0]
  return result;
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d102      	bne.n	800190e <HAL_RCC_OscConfig+0xcba>
 8001908:	4bb0      	ldr	r3, [pc, #704]	; (8001bcc <HAL_RCC_OscConfig+0xf78>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e027      	b.n	800195e <HAL_RCC_OscConfig+0xd0a>
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800191a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800193c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001954:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	4b9c      	ldr	r3, [pc, #624]	; (8001bcc <HAL_RCC_OscConfig+0xf78>)
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001962:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001966:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800196a:	6011      	str	r1, [r2, #0]
 800196c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001970:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	fa92 f1a2 	rbit	r1, r2
 800197a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800197e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001982:	6011      	str	r1, [r2, #0]
  return result;
 8001984:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001988:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	fab2 f282 	clz	r2, r2
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	f042 0220 	orr.w	r2, r2, #32
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	f002 021f 	and.w	r2, r2, #31
 800199e:	2101      	movs	r1, #1
 80019a0:	fa01 f202 	lsl.w	r2, r1, r2
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d182      	bne.n	80018b0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019aa:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <HAL_RCC_OscConfig+0xf78>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	430b      	orrs	r3, r1
 80019cc:	497f      	ldr	r1, [pc, #508]	; (8001bcc <HAL_RCC_OscConfig+0xf78>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019f6:	601a      	str	r2, [r3, #0]
  return result;
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a00:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	461a      	mov	r2, r3
 8001a14:	2301      	movs	r3, #1
 8001a16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7fe fe8a 	bl	8000730 <HAL_GetTick>
 8001a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a20:	e009      	b.n	8001a36 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7fe fe85 	bl	8000730 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e144      	b.n	8001cc0 <HAL_RCC_OscConfig+0x106c>
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a48:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a5a:	601a      	str	r2, [r3, #0]
  return result;
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_OscConfig+0xe2c>
 8001a7a:	4b54      	ldr	r3, [pc, #336]	; (8001bcc <HAL_RCC_OscConfig+0xf78>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	e027      	b.n	8001ad0 <HAL_RCC_OscConfig+0xe7c>
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <HAL_RCC_OscConfig+0xf78>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ad8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001adc:	6011      	str	r1, [r2, #0]
 8001ade:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	fa92 f1a2 	rbit	r1, r2
 8001aec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001af4:	6011      	str	r1, [r2, #0]
  return result;
 8001af6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001afa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	fab2 f282 	clz	r2, r2
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f042 0220 	orr.w	r2, r2, #32
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f002 021f 	and.w	r2, r2, #31
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f202 	lsl.w	r2, r1, r2
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d082      	beq.n	8001a22 <HAL_RCC_OscConfig+0xdce>
 8001b1c:	e0cf      	b.n	8001cbe <HAL_RCC_OscConfig+0x106a>
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b42:	601a      	str	r2, [r3, #0]
  return result;
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2300      	movs	r3, #0
 8001b62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7fe fde4 	bl	8000730 <HAL_GetTick>
 8001b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7fe fddf 	bl	8000730 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e09e      	b.n	8001cc0 <HAL_RCC_OscConfig+0x106c>
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fa93 f2a3 	rbit	r2, r3
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ba6:	601a      	str	r2, [r3, #0]
  return result;
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	095b      	lsrs	r3, r3, #5
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d104      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xf7c>
 8001bc6:	4b01      	ldr	r3, [pc, #4]	; (8001bcc <HAL_RCC_OscConfig+0xf78>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	e029      	b.n	8001c20 <HAL_RCC_OscConfig+0xfcc>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	fa93 f2a3 	rbit	r2, r3
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCC_OscConfig+0x1078>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c24:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c2c:	6011      	str	r1, [r2, #0]
 8001c2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c32:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	fa92 f1a2 	rbit	r1, r2
 8001c3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c40:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c44:	6011      	str	r1, [r2, #0]
  return result;
 8001c46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c4a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	fab2 f282 	clz	r2, r2
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	f042 0220 	orr.w	r2, r2, #32
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f002 021f 	and.w	r2, r2, #31
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d180      	bne.n	8001b6e <HAL_RCC_OscConfig+0xf1a>
 8001c6c:	e027      	b.n	8001cbe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e01e      	b.n	8001cc0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_OscConfig+0x1078>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c8e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d10b      	bne.n	8001cba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ca2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b09e      	sub	sp, #120	; 0x78
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e162      	b.n	8001fae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b90      	ldr	r3, [pc, #576]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d910      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b8d      	ldr	r3, [pc, #564]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0207 	bic.w	r2, r3, #7
 8001cfe:	498b      	ldr	r1, [pc, #556]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e14a      	b.n	8001fae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	497f      	ldr	r1, [pc, #508]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 80dc 	beq.w	8001efc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d13c      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xf6>
 8001d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d50:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xa6>
 8001d70:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	e00f      	b.n	8001d96 <HAL_RCC_ClockConfig+0xc6>
 8001d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	667b      	str	r3, [r7, #100]	; 0x64
 8001d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d88:	663b      	str	r3, [r7, #96]	; 0x60
 8001d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d9e:	fa92 f2a2 	rbit	r2, r2
 8001da2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001da4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001da6:	fab2 f282 	clz	r2, r2
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	f042 0220 	orr.w	r2, r2, #32
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f002 021f 	and.w	r2, r2, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d17b      	bne.n	8001eba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0f3      	b.n	8001fae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d13c      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x178>
 8001dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x128>
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	e00f      	b.n	8001e18 <HAL_RCC_ClockConfig+0x148>
 8001df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	647b      	str	r3, [r7, #68]	; 0x44
 8001e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e14:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e20:	fa92 f2a2 	rbit	r2, r2
 8001e24:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e28:	fab2 f282 	clz	r2, r2
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f042 0220 	orr.w	r2, r2, #32
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	f002 021f 	and.w	r2, r2, #31
 8001e38:	2101      	movs	r1, #1
 8001e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d13a      	bne.n	8001eba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b2      	b.n	8001fae <HAL_RCC_ClockConfig+0x2de>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d102      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x1a0>
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	e00d      	b.n	8001e8c <HAL_RCC_ClockConfig+0x1bc>
 8001e70:	2302      	movs	r3, #2
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	61fb      	str	r3, [r7, #28]
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	61ba      	str	r2, [r7, #24]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	617a      	str	r2, [r7, #20]
  return result;
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f042 0220 	orr.w	r2, r2, #32
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f002 021f 	and.w	r2, r2, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e079      	b.n	8001fae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	491a      	ldr	r1, [pc, #104]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ecc:	f7fe fc30 	bl	8000730 <HAL_GetTick>
 8001ed0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7fe fc2c 	bl	8000730 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e061      	b.n	8001fae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d214      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4906      	ldr	r1, [pc, #24]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HAL_RCC_ClockConfig+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e040      	b.n	8001fae <HAL_RCC_ClockConfig+0x2de>
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	491a      	ldr	r1, [pc, #104]	; (8001fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4912      	ldr	r1, [pc, #72]	; (8001fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f72:	f000 f829 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f76:	4601      	mov	r1, r0
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f80:	22f0      	movs	r2, #240	; 0xf0
 8001f82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	fa92 f2a2 	rbit	r2, r2
 8001f8a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	fab2 f282 	clz	r2, r2
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	40d3      	lsrs	r3, r2
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x2ec>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_RCC_ClockConfig+0x2f0>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_RCC_ClockConfig+0x2f4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fa2c 	bl	8000404 <HAL_InitTick>
  
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3778      	adds	r7, #120	; 0x78
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08005ba8 	.word	0x08005ba8
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b08b      	sub	sp, #44	; 0x2c
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x36>
 8001ff6:	e03c      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ffa:	623b      	str	r3, [r7, #32]
      break;
 8001ffc:	e03c      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002004:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002008:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	fa92 f2a2 	rbit	r2, r2
 8002010:	607a      	str	r2, [r7, #4]
  return result;
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	40d3      	lsrs	r3, r2
 800201c:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <HAL_RCC_GetSysClockFreq+0xc8>)
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	220f      	movs	r2, #15
 800202c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	60fa      	str	r2, [r7, #12]
  return result;
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	fab2 f282 	clz	r2, r2
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	40d3      	lsrs	r3, r2
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	fbb2 f2f3 	udiv	r2, r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e004      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4a0c      	ldr	r2, [pc, #48]	; (8002098 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	623b      	str	r3, [r7, #32]
      break;
 8002070:	e002      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002074:	623b      	str	r3, [r7, #32]
      break;
 8002076:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002078:	6a3b      	ldr	r3, [r7, #32]
}
 800207a:	4618      	mov	r0, r3
 800207c:	372c      	adds	r7, #44	; 0x2c
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	007a1200 	.word	0x007a1200
 8002090:	08005bc0 	.word	0x08005bc0
 8002094:	08005bd0 	.word	0x08005bd0
 8002098:	003d0900 	.word	0x003d0900

0800209c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020ba:	f7ff ffef 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020be:	4601      	mov	r1, r0
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	fa92 f2a2 	rbit	r2, r2
 80020d4:	603a      	str	r2, [r7, #0]
  return result;
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	40d3      	lsrs	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	08005bb8 	.word	0x08005bb8

080020f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	220f      	movs	r2, #15
 8002106:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_RCC_GetClockConfig+0x5c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCC_GetClockConfig+0x5c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_GetClockConfig+0x5c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_GetClockConfig+0x5c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_RCC_GetClockConfig+0x60>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0207 	and.w	r2, r3, #7
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	601a      	str	r2, [r3, #0]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e049      	b.n	8002202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f841 	bl	800220a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f000 f9e4 	bl	8002568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d001      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e040      	b.n	80022ba <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_TIM_Base_Start_IT+0xa8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00e      	beq.n	8002278 <HAL_TIM_Base_Start_IT+0x58>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002262:	d009      	beq.n	8002278 <HAL_TIM_Base_Start_IT+0x58>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_TIM_Base_Start_IT+0xac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d004      	beq.n	8002278 <HAL_TIM_Base_Start_IT+0x58>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d115      	bne.n	80022a4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b06      	cmp	r3, #6
 8002288:	d015      	beq.n	80022b6 <HAL_TIM_Base_Start_IT+0x96>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d011      	beq.n	80022b6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a2:	e008      	b.n	80022b6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e000      	b.n	80022b8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40014000 	.word	0x40014000
 80022d4:	00010007 	.word	0x00010007

080022d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0202 	mvn.w	r2, #2
 8002304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f905 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8f7 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f908 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b04      	cmp	r3, #4
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0204 	mvn.w	r2, #4
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f8db 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8cd 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f8de 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b08      	cmp	r3, #8
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0208 	mvn.w	r2, #8
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2204      	movs	r2, #4
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f8b1 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8a3 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8b4 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0210 	mvn.w	r2, #16
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2208      	movs	r2, #8
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f887 	bl	800252a <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f879 	bl	8002516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f88a 	bl	800253e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d10e      	bne.n	800245c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d107      	bne.n	800245c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0201 	mvn.w	r2, #1
 8002454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fd ff98 	bl	800038c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b80      	cmp	r3, #128	; 0x80
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8f2 	bl	800266c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002496:	d10e      	bne.n	80024b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d107      	bne.n	80024b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f8e5 	bl	8002680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d10e      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	d107      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f838 	bl	8002552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d10e      	bne.n	800250e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d107      	bne.n	800250e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0220 	mvn.w	r2, #32
 8002506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8a5 	bl	8002658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a32      	ldr	r2, [pc, #200]	; (8002644 <TIM_Base_SetConfig+0xdc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <TIM_Base_SetConfig+0x28>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d003      	beq.n	8002590 <TIM_Base_SetConfig+0x28>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <TIM_Base_SetConfig+0xe0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d108      	bne.n	80025a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a27      	ldr	r2, [pc, #156]	; (8002644 <TIM_Base_SetConfig+0xdc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <TIM_Base_SetConfig+0x6a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d00f      	beq.n	80025d2 <TIM_Base_SetConfig+0x6a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a24      	ldr	r2, [pc, #144]	; (8002648 <TIM_Base_SetConfig+0xe0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <TIM_Base_SetConfig+0x6a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a23      	ldr	r2, [pc, #140]	; (800264c <TIM_Base_SetConfig+0xe4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <TIM_Base_SetConfig+0x6a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a22      	ldr	r2, [pc, #136]	; (8002650 <TIM_Base_SetConfig+0xe8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_Base_SetConfig+0x6a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a21      	ldr	r2, [pc, #132]	; (8002654 <TIM_Base_SetConfig+0xec>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d108      	bne.n	80025e4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <TIM_Base_SetConfig+0xdc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00b      	beq.n	8002628 <TIM_Base_SetConfig+0xc0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <TIM_Base_SetConfig+0xe4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <TIM_Base_SetConfig+0xc0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <TIM_Base_SetConfig+0xe8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <TIM_Base_SetConfig+0xc0>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <TIM_Base_SetConfig+0xec>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d103      	bne.n	8002630 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	615a      	str	r2, [r3, #20]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40000400 	.word	0x40000400
 800264c:	40014000 	.word	0x40014000
 8002650:	40014400 	.word	0x40014400
 8002654:	40014800 	.word	0x40014800

08002658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f103 0208 	add.w	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f103 0208 	add.w	r2, r3, #8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f103 0208 	add.w	r2, r3, #8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d103      	bne.n	800270e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e00c      	b.n	8002728 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3308      	adds	r3, #8
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e002      	b.n	800271c <vListInsert+0x2e>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	d2f6      	bcs.n	8002716 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	601a      	str	r2, [r3, #0]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6852      	ldr	r2, [r2, #4]
 8002780:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d103      	bne.n	8002794 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80027de:	bf00      	nop
 80027e0:	e7fe      	b.n	80027e0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d05d      	beq.n	80028a4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d059      	beq.n	80028a4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	2100      	movs	r1, #0
 80027fa:	fba3 2302 	umull	r2, r3, r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d000      	beq.n	8002804 <xQueueGenericReset+0x50>
 8002802:	2101      	movs	r1, #1
 8002804:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d14c      	bne.n	80028a4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800280a:	f002 f965 	bl	8004ad8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	6939      	ldr	r1, [r7, #16]
 8002818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	441a      	add	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2200      	movs	r2, #0
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	3b01      	subs	r3, #1
 800283c:	6939      	ldr	r1, [r7, #16]
 800283e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	441a      	add	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	22ff      	movs	r2, #255	; 0xff
 800284e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d114      	bne.n	800288a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01a      	beq.n	800289e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	3310      	adds	r3, #16
 800286c:	4618      	mov	r0, r3
 800286e:	f001 f983 	bl	8003b78 <xTaskRemoveFromEventList>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d012      	beq.n	800289e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <xQueueGenericReset+0x11c>)
 800287a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	e009      	b.n	800289e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	3310      	adds	r3, #16
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff00 	bl	8002694 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	3324      	adds	r3, #36	; 0x24
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fefb 	bl	8002694 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800289e:	f002 f94b 	bl	8004b38 <vPortExitCritical>
 80028a2:	e001      	b.n	80028a8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <xQueueGenericReset+0x110>
        __asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	60bb      	str	r3, [r7, #8]
    }
 80028c0:	bf00      	nop
 80028c2:	e7fe      	b.n	80028c2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80028c4:	697b      	ldr	r3, [r7, #20]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000ed04 	.word	0xe000ed04

080028d4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02e      	beq.n	800294a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80028ec:	2100      	movs	r1, #0
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	fba3 2302 	umull	r2, r3, r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d000      	beq.n	80028fc <xQueueGenericCreate+0x28>
 80028fa:	2101      	movs	r1, #1
 80028fc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d123      	bne.n	800294a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800290a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800290e:	d81c      	bhi.n	800294a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3350      	adds	r3, #80	; 0x50
 800291e:	4618      	mov	r0, r3
 8002920:	f002 f9fc 	bl	8004d1c <pvPortMalloc>
 8002924:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01c      	beq.n	8002966 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3350      	adds	r3, #80	; 0x50
 8002934:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002936:	79fa      	ldrb	r2, [r7, #7]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f814 	bl	8002970 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002948:	e00d      	b.n	8002966 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <xQueueGenericCreate+0x92>
        __asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	613b      	str	r3, [r7, #16]
    }
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002966:	69fb      	ldr	r3, [r7, #28]
    }
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d103      	bne.n	800298c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e002      	b.n	8002992 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800299e:	2101      	movs	r1, #1
 80029a0:	69b8      	ldr	r0, [r7, #24]
 80029a2:	f7ff ff07 	bl	80027b4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08e      	sub	sp, #56	; 0x38
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029c6:	2300      	movs	r3, #0
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueGenericSend+0x32>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <xQueueGenericSend+0x40>
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <xQueueGenericSend+0x44>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <xQueueGenericSend+0x46>
 80029fc:	2300      	movs	r3, #0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <xQueueGenericSend+0x60>
        __asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a14:	bf00      	nop
 8002a16:	e7fe      	b.n	8002a16 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d103      	bne.n	8002a26 <xQueueGenericSend+0x6e>
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <xQueueGenericSend+0x72>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <xQueueGenericSend+0x74>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericSend+0x8e>
        __asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	623b      	str	r3, [r7, #32]
    }
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a46:	f001 faa7 	bl	8003f98 <xTaskGetSchedulerState>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <xQueueGenericSend+0x9e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <xQueueGenericSend+0xa2>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <xQueueGenericSend+0xa4>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <xQueueGenericSend+0xbe>
        __asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	61fb      	str	r3, [r7, #28]
    }
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a76:	f002 f82f 	bl	8004ad8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <xQueueGenericSend+0xd4>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d129      	bne.n	8002ae0 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a92:	f000 fa21 	bl	8002ed8 <prvCopyDataToQueue>
 8002a96:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	3324      	adds	r3, #36	; 0x24
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 f867 	bl	8003b78 <xTaskRemoveFromEventList>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002ab0:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <xQueueGenericSend+0x1f8>)
 8002ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	e00a      	b.n	8002ad8 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002ac8:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <xQueueGenericSend+0x1f8>)
 8002aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002ad8:	f002 f82e 	bl	8004b38 <vPortExitCritical>
                return pdPASS;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e063      	b.n	8002ba8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ae6:	f002 f827 	bl	8004b38 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e05c      	b.n	8002ba8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f913 	bl	8003d24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b02:	f002 f819 	bl	8004b38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b06:	f000 fd35 	bl	8003574 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b0a:	f001 ffe5 	bl	8004ad8 <vPortEnterCritical>
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d103      	bne.n	8002b24 <xQueueGenericSend+0x16c>
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d103      	bne.n	8002b3a <xQueueGenericSend+0x182>
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b3a:	f001 fffd 	bl	8004b38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b3e:	1d3a      	adds	r2, r7, #4
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 f902 	bl	8003d50 <xTaskCheckForTimeOut>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d124      	bne.n	8002b9c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b54:	f000 fab8 	bl	80030c8 <prvIsQueueFull>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	3310      	adds	r3, #16
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 ff9c 	bl	8003aa4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b6e:	f000 fa43 	bl	8002ff8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002b72:	f000 fd0d 	bl	8003590 <xTaskResumeAll>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f af7c 	bne.w	8002a76 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <xQueueGenericSend+0x1f8>)
 8002b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	e772      	b.n	8002a76 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b92:	f000 fa31 	bl	8002ff8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b96:	f000 fcfb 	bl	8003590 <xTaskResumeAll>
 8002b9a:	e76c      	b.n	8002a76 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b9e:	f000 fa2b 	bl	8002ff8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ba2:	f000 fcf5 	bl	8003590 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002ba6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3738      	adds	r7, #56	; 0x38
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b092      	sub	sp, #72	; 0x48
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8002bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <xQueueGenericSendFromISR+0x3c>
 8002be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <xQueueGenericSendFromISR+0x40>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <xQueueGenericSendFromISR+0x42>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002c0c:	bf00      	nop
 8002c0e:	e7fe      	b.n	8002c0e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d103      	bne.n	8002c1e <xQueueGenericSendFromISR+0x6a>
 8002c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <xQueueGenericSendFromISR+0x6e>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <xQueueGenericSendFromISR+0x70>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c3e:	f002 f82d 	bl	8004c9c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002c42:	f3ef 8211 	mrs	r2, BASEPRI
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	623a      	str	r2, [r7, #32]
 8002c58:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <xQueueGenericSendFromISR+0xbc>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d146      	bne.n	8002cfe <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c86:	f000 f927 	bl	8002ed8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002c8a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d112      	bne.n	8002cba <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d02d      	beq.n	8002cf8 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9e:	3324      	adds	r3, #36	; 0x24
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 ff69 	bl	8003b78 <xTaskRemoveFromEventList>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d025      	beq.n	8002cf8 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d022      	beq.n	8002cf8 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e01e      	b.n	8002cf8 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002cba:	f000 fd75 	bl	80037a8 <uxTaskGetNumberOfTasks>
 8002cbe:	6338      	str	r0, [r7, #48]	; 0x30
 8002cc0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d916      	bls.n	8002cf8 <xQueueGenericSendFromISR+0x144>
 8002cca:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002cce:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd0:	d10a      	bne.n	8002ce8 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	61bb      	str	r3, [r7, #24]
    }
 8002ce4:	bf00      	nop
 8002ce6:	e7fe      	b.n	8002ce6 <xQueueGenericSendFromISR+0x132>
 8002ce8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002cec:	3301      	adds	r3, #1
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	b25a      	sxtb	r2, r3
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8002cfc:	e001      	b.n	8002d02 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
 8002d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d04:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002d0c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3748      	adds	r7, #72	; 0x48
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08c      	sub	sp, #48	; 0x30
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <xQueueReceive+0x30>
        __asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	623b      	str	r3, [r7, #32]
    }
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <xQueueReceive+0x3e>
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <xQueueReceive+0x42>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <xQueueReceive+0x44>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <xQueueReceive+0x5e>
        __asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	61fb      	str	r3, [r7, #28]
    }
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d76:	f001 f90f 	bl	8003f98 <xTaskGetSchedulerState>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <xQueueReceive+0x6e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <xQueueReceive+0x72>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueReceive+0x74>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueReceive+0x8e>
        __asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61bb      	str	r3, [r7, #24]
    }
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002da6:	f001 fe97 	bl	8004ad8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01f      	beq.n	8002df6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dba:	f000 f8f7 	bl	8002fac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	1e5a      	subs	r2, r3, #1
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00f      	beq.n	8002dee <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	3310      	adds	r3, #16
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fed0 	bl	8003b78 <xTaskRemoveFromEventList>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <xQueueReceive+0x1bc>)
 8002de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002dee:	f001 fea3 	bl	8004b38 <vPortExitCritical>
                return pdPASS;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e069      	b.n	8002eca <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d103      	bne.n	8002e04 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002dfc:	f001 fe9c 	bl	8004b38 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e062      	b.n	8002eca <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e0a:	f107 0310 	add.w	r3, r7, #16
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 ff88 	bl	8003d24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e18:	f001 fe8e 	bl	8004b38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e1c:	f000 fbaa 	bl	8003574 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e20:	f001 fe5a 	bl	8004ad8 <vPortEnterCritical>
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d103      	bne.n	8002e3a <xQueueReceive+0x122>
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e40:	b25b      	sxtb	r3, r3
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d103      	bne.n	8002e50 <xQueueReceive+0x138>
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e50:	f001 fe72 	bl	8004b38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e54:	1d3a      	adds	r2, r7, #4
 8002e56:	f107 0310 	add.w	r3, r7, #16
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 ff77 	bl	8003d50 <xTaskCheckForTimeOut>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d123      	bne.n	8002eb0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e6a:	f000 f917 	bl	800309c <prvIsQueueEmpty>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d017      	beq.n	8002ea4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	3324      	adds	r3, #36	; 0x24
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fe11 	bl	8003aa4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e84:	f000 f8b8 	bl	8002ff8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e88:	f000 fb82 	bl	8003590 <xTaskResumeAll>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d189      	bne.n	8002da6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <xQueueReceive+0x1bc>)
 8002e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	e780      	b.n	8002da6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea6:	f000 f8a7 	bl	8002ff8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002eaa:	f000 fb71 	bl	8003590 <xTaskResumeAll>
 8002eae:	e77a      	b.n	8002da6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb2:	f000 f8a1 	bl	8002ff8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002eb6:	f000 fb6b 	bl	8003590 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ebc:	f000 f8ee 	bl	800309c <prvIsQueueEmpty>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f43f af6f 	beq.w	8002da6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002ec8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3730      	adds	r7, #48	; 0x30
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	e000ed04 	.word	0xe000ed04

08002ed8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d14d      	bne.n	8002f9a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 f866 	bl	8003fd4 <xTaskPriorityDisinherit>
 8002f08:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	e043      	b.n	8002f9a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d119      	bne.n	8002f4c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6858      	ldr	r0, [r3, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	461a      	mov	r2, r3
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	f002 f8ea 	bl	80050fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	441a      	add	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d32b      	bcc.n	8002f9a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	e026      	b.n	8002f9a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68d8      	ldr	r0, [r3, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	461a      	mov	r2, r3
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	f002 f8d0 	bl	80050fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	425b      	negs	r3, r3
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d207      	bcs.n	8002f88 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	425b      	negs	r3, r3
 8002f82:	441a      	add	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d105      	bne.n	8002f9a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002fa2:	697b      	ldr	r3, [r7, #20]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	441a      	add	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d303      	bcc.n	8002fe0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68d9      	ldr	r1, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6838      	ldr	r0, [r7, #0]
 8002fec:	f002 f886 	bl	80050fc <memcpy>
    }
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003000:	f001 fd6a 	bl	8004ad8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800300a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800300c:	e011      	b.n	8003032 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2b00      	cmp	r3, #0
 8003014:	d012      	beq.n	800303c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3324      	adds	r3, #36	; 0x24
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fdac 	bl	8003b78 <xTaskRemoveFromEventList>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003026:	f000 fef9 	bl	8003e1c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3b01      	subs	r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	dce9      	bgt.n	800300e <prvUnlockQueue+0x16>
 800303a:	e000      	b.n	800303e <prvUnlockQueue+0x46>
                    break;
 800303c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	22ff      	movs	r2, #255	; 0xff
 8003042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003046:	f001 fd77 	bl	8004b38 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800304a:	f001 fd45 	bl	8004ad8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003054:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003056:	e011      	b.n	800307c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d012      	beq.n	8003086 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3310      	adds	r3, #16
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fd87 	bl	8003b78 <xTaskRemoveFromEventList>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003070:	f000 fed4 	bl	8003e1c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003074:	7bbb      	ldrb	r3, [r7, #14]
 8003076:	3b01      	subs	r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800307c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003080:	2b00      	cmp	r3, #0
 8003082:	dce9      	bgt.n	8003058 <prvUnlockQueue+0x60>
 8003084:	e000      	b.n	8003088 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003086:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	22ff      	movs	r2, #255	; 0xff
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003090:	f001 fd52 	bl	8004b38 <vPortExitCritical>
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80030a4:	f001 fd18 	bl	8004ad8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80030b0:	2301      	movs	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e001      	b.n	80030ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80030ba:	f001 fd3d 	bl	8004b38 <vPortExitCritical>

    return xReturn;
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80030d0:	f001 fd02 	bl	8004ad8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	429a      	cmp	r2, r3
 80030de:	d102      	bne.n	80030e6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e001      	b.n	80030ea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80030ea:	f001 fd25 	bl	8004b38 <vPortExitCritical>

    return xReturn;
 80030ee:	68fb      	ldr	r3, [r7, #12]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	60fb      	str	r3, [r7, #12]
    }
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d024      	beq.n	8003172 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	e01e      	b.n	800316c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <vQueueAddToRegistry+0x98>)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d105      	bne.n	800314a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4a13      	ldr	r2, [pc, #76]	; (8003190 <vQueueAddToRegistry+0x98>)
 8003144:	4413      	add	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
                    break;
 8003148:	e013      	b.n	8003172 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <vQueueAddToRegistry+0x6e>
 8003150:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <vQueueAddToRegistry+0x98>)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <vQueueAddToRegistry+0x98>)
 8003162:	4413      	add	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b07      	cmp	r3, #7
 8003170:	d9dd      	bls.n	800312e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	200000ec 	.word	0x200000ec

08003194 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80031a4:	f001 fc98 	bl	8004ad8 <vPortEnterCritical>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ae:	b25b      	sxtb	r3, r3
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d103      	bne.n	80031be <vQueueWaitForMessageRestricted+0x2a>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c4:	b25b      	sxtb	r3, r3
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d103      	bne.n	80031d4 <vQueueWaitForMessageRestricted+0x40>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d4:	f001 fcb0 	bl	8004b38 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3324      	adds	r3, #36	; 0x24
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fc7f 	bl	8003aec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80031ee:	6978      	ldr	r0, [r7, #20]
 80031f0:	f7ff ff02 	bl	8002ff8 <prvUnlockQueue>
    }
 80031f4:	bf00      	nop
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08c      	sub	sp, #48	; 0x30
 8003200:	af04      	add	r7, sp, #16
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fd83 	bl	8004d1c <pvPortMalloc>
 8003216:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d013      	beq.n	8003246 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800321e:	2058      	movs	r0, #88	; 0x58
 8003220:	f001 fd7c 	bl	8004d1c <pvPortMalloc>
 8003224:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800322c:	2258      	movs	r2, #88	; 0x58
 800322e:	2100      	movs	r1, #0
 8003230:	69f8      	ldr	r0, [r7, #28]
 8003232:	f001 ff71 	bl	8005118 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
 800323c:	e005      	b.n	800324a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800323e:	6978      	ldr	r0, [r7, #20]
 8003240:	f001 fe26 	bl	8004e90 <vPortFree>
 8003244:	e001      	b.n	800324a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	2300      	movs	r3, #0
 8003254:	9303      	str	r3, [sp, #12]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f80e 	bl	8003288 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800326c:	69f8      	ldr	r0, [r7, #28]
 800326e:	f000 f899 	bl	80033a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003272:	2301      	movs	r3, #1
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e002      	b.n	800327e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800327e:	69bb      	ldr	r3, [r7, #24]
    }
 8003280:	4618      	mov	r0, r3
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	461a      	mov	r2, r3
 80032a0:	21a5      	movs	r1, #165	; 0xa5
 80032a2:	f001 ff39 	bl	8005118 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032b0:	3b01      	subs	r3, #1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <prvInitialiseNewTask+0x58>
        __asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	617b      	str	r3, [r7, #20]
    }
 80032dc:	bf00      	nop
 80032de:	e7fe      	b.n	80032de <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01e      	beq.n	8003324 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	e012      	b.n	8003312 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	7819      	ldrb	r1, [r3, #0]
 80032f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	3334      	adds	r3, #52	; 0x34
 80032fc:	460a      	mov	r2, r1
 80032fe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	4413      	add	r3, r2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3301      	adds	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b09      	cmp	r3, #9
 8003316:	d9e9      	bls.n	80032ec <prvInitialiseNewTask+0x64>
 8003318:	e000      	b.n	800331c <prvInitialiseNewTask+0x94>
            {
                break;
 800331a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	2b04      	cmp	r3, #4
 8003328:	d90a      	bls.n	8003340 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	613b      	str	r3, [r7, #16]
    }
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	2b04      	cmp	r3, #4
 8003344:	d901      	bls.n	800334a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003346:	2304      	movs	r3, #4
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003354:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	3304      	adds	r3, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f9ba 	bl	80026d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	3318      	adds	r3, #24
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff f9b5 	bl	80026d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800336e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	f1c3 0205 	rsb	r2, r3, #5
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800337e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	69b8      	ldr	r0, [r7, #24]
 8003386:	f001 fa75 	bl	8004874 <pxPortInitialiseStack>
 800338a:	4602      	mov	r2, r0
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800339c:	bf00      	nop
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80033ac:	f001 fb94 	bl	8004ad8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80033b0:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <prvAddNewTaskToReadyList+0x110>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	4a3f      	ldr	r2, [pc, #252]	; (80034b4 <prvAddNewTaskToReadyList+0x110>)
 80033b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80033ba:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80033c2:	4a3d      	ldr	r2, [pc, #244]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033c8:	4b3a      	ldr	r3, [pc, #232]	; (80034b4 <prvAddNewTaskToReadyList+0x110>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d110      	bne.n	80033f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80033d0:	f000 fd48 	bl	8003e64 <prvInitialiseTaskLists>
 80033d4:	e00d      	b.n	80033f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80033d6:	4b39      	ldr	r3, [pc, #228]	; (80034bc <prvAddNewTaskToReadyList+0x118>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033de:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d802      	bhi.n	80033f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80033ec:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80033f2:	4b33      	ldr	r3, [pc, #204]	; (80034c0 <prvAddNewTaskToReadyList+0x11c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <prvAddNewTaskToReadyList+0x11c>)
 80033fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033fc:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <prvAddNewTaskToReadyList+0x11c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	2201      	movs	r2, #1
 800340a:	409a      	lsls	r2, r3
 800340c:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <prvAddNewTaskToReadyList+0x120>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <prvAddNewTaskToReadyList+0x120>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	492b      	ldr	r1, [pc, #172]	; (80034c8 <prvAddNewTaskToReadyList+0x124>)
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3304      	adds	r3, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	3204      	adds	r2, #4
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <prvAddNewTaskToReadyList+0x124>)
 800345a:	441a      	add	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	615a      	str	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	4918      	ldr	r1, [pc, #96]	; (80034c8 <prvAddNewTaskToReadyList+0x124>)
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1c59      	adds	r1, r3, #1
 8003474:	4814      	ldr	r0, [pc, #80]	; (80034c8 <prvAddNewTaskToReadyList+0x124>)
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4403      	add	r3, r0
 8003480:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003482:	f001 fb59 	bl	8004b38 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <prvAddNewTaskToReadyList+0x118>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00e      	beq.n	80034ac <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	429a      	cmp	r2, r3
 800349a:	d207      	bcs.n	80034ac <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <prvAddNewTaskToReadyList+0x128>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000204 	.word	0x20000204
 80034b8:	2000012c 	.word	0x2000012c
 80034bc:	20000210 	.word	0x20000210
 80034c0:	20000220 	.word	0x20000220
 80034c4:	2000020c 	.word	0x2000020c
 80034c8:	20000130 	.word	0x20000130
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <vTaskStartScheduler+0x88>)
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	2282      	movs	r2, #130	; 0x82
 80034e2:	491e      	ldr	r1, [pc, #120]	; (800355c <vTaskStartScheduler+0x8c>)
 80034e4:	481e      	ldr	r0, [pc, #120]	; (8003560 <vTaskStartScheduler+0x90>)
 80034e6:	f7ff fe89 	bl	80031fc <xTaskCreate>
 80034ea:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80034f2:	f000 fe93 	bl	800421c <xTimerCreateTimerTask>
 80034f6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d116      	bne.n	800352c <vTaskStartScheduler+0x5c>
        __asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	60bb      	str	r3, [r7, #8]
    }
 8003510:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <vTaskStartScheduler+0x94>)
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <vTaskStartScheduler+0x98>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <vTaskStartScheduler+0x9c>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003526:	f001 fa35 	bl	8004994 <xPortStartScheduler>
 800352a:	e00e      	b.n	800354a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	d10a      	bne.n	800354a <vTaskStartScheduler+0x7a>
        __asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	607b      	str	r3, [r7, #4]
    }
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <vTaskStartScheduler+0xa0>)
 800354c:	681b      	ldr	r3, [r3, #0]
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000228 	.word	0x20000228
 800355c:	08005b90 	.word	0x08005b90
 8003560:	08003e35 	.word	0x08003e35
 8003564:	20000224 	.word	0x20000224
 8003568:	20000210 	.word	0x20000210
 800356c:	20000208 	.word	0x20000208
 8003570:	2000000c 	.word	0x2000000c

08003574 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <vTaskSuspendAll+0x18>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3301      	adds	r3, #1
 800357e:	4a03      	ldr	r2, [pc, #12]	; (800358c <vTaskSuspendAll+0x18>)
 8003580:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	2000022c 	.word	0x2000022c

08003590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800359e:	4b71      	ldr	r3, [pc, #452]	; (8003764 <xTaskResumeAll+0x1d4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <xTaskResumeAll+0x2c>
        __asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	607b      	str	r3, [r7, #4]
    }
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80035bc:	f001 fa8c 	bl	8004ad8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80035c0:	4b68      	ldr	r3, [pc, #416]	; (8003764 <xTaskResumeAll+0x1d4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	4a67      	ldr	r2, [pc, #412]	; (8003764 <xTaskResumeAll+0x1d4>)
 80035c8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ca:	4b66      	ldr	r3, [pc, #408]	; (8003764 <xTaskResumeAll+0x1d4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 80c0 	bne.w	8003754 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035d4:	4b64      	ldr	r3, [pc, #400]	; (8003768 <xTaskResumeAll+0x1d8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80bb 	beq.w	8003754 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035de:	e08a      	b.n	80036f6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e0:	4b62      	ldr	r3, [pc, #392]	; (800376c <xTaskResumeAll+0x1dc>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	6a12      	ldr	r2, [r2, #32]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	69d2      	ldr	r2, [r2, #28]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3318      	adds	r3, #24
 800360a:	429a      	cmp	r2, r3
 800360c:	d103      	bne.n	8003616 <xTaskResumeAll+0x86>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2200      	movs	r2, #0
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1e5a      	subs	r2, r3, #1
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	68d2      	ldr	r2, [r2, #12]
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	6892      	ldr	r2, [r2, #8]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3304      	adds	r3, #4
 8003648:	429a      	cmp	r2, r3
 800364a:	d103      	bne.n	8003654 <xTaskResumeAll+0xc4>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2200      	movs	r2, #0
 8003658:	615a      	str	r2, [r3, #20]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	2201      	movs	r2, #1
 800366a:	409a      	lsls	r2, r3
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <xTaskResumeAll+0x1e0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	4a3f      	ldr	r2, [pc, #252]	; (8003770 <xTaskResumeAll+0x1e0>)
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367a:	493e      	ldr	r1, [pc, #248]	; (8003774 <xTaskResumeAll+0x1e4>)
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3304      	adds	r3, #4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	3204      	adds	r2, #4
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4a2e      	ldr	r2, [pc, #184]	; (8003774 <xTaskResumeAll+0x1e4>)
 80036ba:	441a      	add	r2, r3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	615a      	str	r2, [r3, #20]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	492b      	ldr	r1, [pc, #172]	; (8003774 <xTaskResumeAll+0x1e4>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	4827      	ldr	r0, [pc, #156]	; (8003774 <xTaskResumeAll+0x1e4>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4403      	add	r3, r0
 80036e0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <xTaskResumeAll+0x1e8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80036f0:	4b22      	ldr	r3, [pc, #136]	; (800377c <xTaskResumeAll+0x1ec>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <xTaskResumeAll+0x1dc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f47f af70 	bne.w	80035e0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003706:	f000 fc2b 	bl	8003f60 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <xTaskResumeAll+0x1f0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d010      	beq.n	8003738 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003716:	f000 f853 	bl	80037c0 <xTaskIncrementTick>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003720:	4b16      	ldr	r3, [pc, #88]	; (800377c <xTaskResumeAll+0x1ec>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3b01      	subs	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f1      	bne.n	8003716 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <xTaskResumeAll+0x1f0>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <xTaskResumeAll+0x1ec>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <xTaskResumeAll+0x1f4>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003754:	f001 f9f0 	bl	8004b38 <vPortExitCritical>

    return xAlreadyYielded;
 8003758:	69bb      	ldr	r3, [r7, #24]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	2000022c 	.word	0x2000022c
 8003768:	20000204 	.word	0x20000204
 800376c:	200001c4 	.word	0x200001c4
 8003770:	2000020c 	.word	0x2000020c
 8003774:	20000130 	.word	0x20000130
 8003778:	2000012c 	.word	0x2000012c
 800377c:	20000218 	.word	0x20000218
 8003780:	20000214 	.word	0x20000214
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <xTaskGetTickCount+0x1c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003794:	687b      	ldr	r3, [r7, #4]
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000208 	.word	0x20000208

080037a8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <uxTaskGetNumberOfTasks+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000204 	.word	0x20000204

080037c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ca:	4b7d      	ldr	r3, [pc, #500]	; (80039c0 <xTaskIncrementTick+0x200>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f040 80ec 	bne.w	80039ac <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037d4:	4b7b      	ldr	r3, [pc, #492]	; (80039c4 <xTaskIncrementTick+0x204>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80037dc:	4a79      	ldr	r2, [pc, #484]	; (80039c4 <xTaskIncrementTick+0x204>)
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d120      	bne.n	800382a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80037e8:	4b77      	ldr	r3, [pc, #476]	; (80039c8 <xTaskIncrementTick+0x208>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <xTaskIncrementTick+0x48>
        __asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	607b      	str	r3, [r7, #4]
    }
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <xTaskIncrementTick+0x46>
 8003808:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <xTaskIncrementTick+0x208>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	4b6f      	ldr	r3, [pc, #444]	; (80039cc <xTaskIncrementTick+0x20c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a6d      	ldr	r2, [pc, #436]	; (80039c8 <xTaskIncrementTick+0x208>)
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4a6d      	ldr	r2, [pc, #436]	; (80039cc <xTaskIncrementTick+0x20c>)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b6c      	ldr	r3, [pc, #432]	; (80039d0 <xTaskIncrementTick+0x210>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3301      	adds	r3, #1
 8003822:	4a6b      	ldr	r2, [pc, #428]	; (80039d0 <xTaskIncrementTick+0x210>)
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	f000 fb9b 	bl	8003f60 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <xTaskIncrementTick+0x214>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a3a      	ldr	r2, [r7, #32]
 8003830:	429a      	cmp	r2, r3
 8003832:	f0c0 80a6 	bcc.w	8003982 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003836:	4b64      	ldr	r3, [pc, #400]	; (80039c8 <xTaskIncrementTick+0x208>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003840:	4b64      	ldr	r3, [pc, #400]	; (80039d4 <xTaskIncrementTick+0x214>)
 8003842:	f04f 32ff 	mov.w	r2, #4294967295
 8003846:	601a      	str	r2, [r3, #0]
                    break;
 8003848:	e09b      	b.n	8003982 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <xTaskIncrementTick+0x208>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	429a      	cmp	r2, r3
 8003860:	d203      	bcs.n	800386a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003862:	4a5c      	ldr	r2, [pc, #368]	; (80039d4 <xTaskIncrementTick+0x214>)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003868:	e08b      	b.n	8003982 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	68d2      	ldr	r2, [r2, #12]
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	6892      	ldr	r2, [r2, #8]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	3304      	adds	r3, #4
 800388c:	429a      	cmp	r2, r3
 800388e:	d103      	bne.n	8003898 <xTaskIncrementTick+0xd8>
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2200      	movs	r2, #0
 800389c:	615a      	str	r2, [r3, #20]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1e5a      	subs	r2, r3, #1
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01e      	beq.n	80038ee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	6a12      	ldr	r2, [r2, #32]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	69d2      	ldr	r2, [r2, #28]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	3318      	adds	r3, #24
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d103      	bne.n	80038de <xTaskIncrementTick+0x11e>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	6a1a      	ldr	r2, [r3, #32]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2200      	movs	r2, #0
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	1e5a      	subs	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	2201      	movs	r2, #1
 80038f4:	409a      	lsls	r2, r3
 80038f6:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <xTaskIncrementTick+0x218>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	4a36      	ldr	r2, [pc, #216]	; (80039d8 <xTaskIncrementTick+0x218>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4935      	ldr	r1, [pc, #212]	; (80039dc <xTaskIncrementTick+0x21c>)
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3304      	adds	r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	60da      	str	r2, [r3, #12]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	3204      	adds	r2, #4
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	1d1a      	adds	r2, r3, #4
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4a26      	ldr	r2, [pc, #152]	; (80039dc <xTaskIncrementTick+0x21c>)
 8003944:	441a      	add	r2, r3
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	615a      	str	r2, [r3, #20]
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394e:	4923      	ldr	r1, [pc, #140]	; (80039dc <xTaskIncrementTick+0x21c>)
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1c59      	adds	r1, r3, #1
 800395e:	481f      	ldr	r0, [pc, #124]	; (80039dc <xTaskIncrementTick+0x21c>)
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4403      	add	r3, r0
 800396a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <xTaskIncrementTick+0x220>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	429a      	cmp	r2, r3
 8003978:	f67f af5d 	bls.w	8003836 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003980:	e759      	b.n	8003836 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <xTaskIncrementTick+0x220>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	4914      	ldr	r1, [pc, #80]	; (80039dc <xTaskIncrementTick+0x21c>)
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d901      	bls.n	800399e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800399a:	2301      	movs	r3, #1
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <xTaskIncrementTick+0x224>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80039a6:	2301      	movs	r3, #1
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	e004      	b.n	80039b6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <xTaskIncrementTick+0x228>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <xTaskIncrementTick+0x228>)
 80039b4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3728      	adds	r7, #40	; 0x28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	2000022c 	.word	0x2000022c
 80039c4:	20000208 	.word	0x20000208
 80039c8:	200001bc 	.word	0x200001bc
 80039cc:	200001c0 	.word	0x200001c0
 80039d0:	2000021c 	.word	0x2000021c
 80039d4:	20000224 	.word	0x20000224
 80039d8:	2000020c 	.word	0x2000020c
 80039dc:	20000130 	.word	0x20000130
 80039e0:	2000012c 	.word	0x2000012c
 80039e4:	20000218 	.word	0x20000218
 80039e8:	20000214 	.word	0x20000214

080039ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039f2:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <vTaskSwitchContext+0xa4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80039fa:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <vTaskSwitchContext+0xa8>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003a00:	e03f      	b.n	8003a82 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003a02:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <vTaskSwitchContext+0xa8>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <vTaskSwitchContext+0xac>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003a16:	7afb      	ldrb	r3, [r7, #11]
 8003a18:	f1c3 031f 	rsb	r3, r3, #31
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	491f      	ldr	r1, [pc, #124]	; (8003a9c <vTaskSwitchContext+0xb0>)
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	607b      	str	r3, [r7, #4]
    }
 8003a44:	bf00      	nop
 8003a46:	e7fe      	b.n	8003a46 <vTaskSwitchContext+0x5a>
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <vTaskSwitchContext+0xb0>)
 8003a54:	4413      	add	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d104      	bne.n	8003a78 <vTaskSwitchContext+0x8c>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	605a      	str	r2, [r3, #4]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <vTaskSwitchContext+0xb4>)
 8003a80:	6013      	str	r3, [r2, #0]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000022c 	.word	0x2000022c
 8003a94:	20000218 	.word	0x20000218
 8003a98:	2000020c 	.word	0x2000020c
 8003a9c:	20000130 	.word	0x20000130
 8003aa0:	2000012c 	.word	0x2000012c

08003aa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	60fb      	str	r3, [r7, #12]
    }
 8003ac6:	bf00      	nop
 8003ac8:	e7fe      	b.n	8003ac8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <vTaskPlaceOnEventList+0x44>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3318      	adds	r3, #24
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fe fe0b 	bl	80026ee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ad8:	2101      	movs	r1, #1
 8003ada:	6838      	ldr	r0, [r7, #0]
 8003adc:	f000 fb1e 	bl	800411c <prvAddCurrentTaskToDelayedList>
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	2000012c 	.word	0x2000012c

08003aec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	613b      	str	r3, [r7, #16]
    }
 8003b10:	bf00      	nop
 8003b12:	e7fe      	b.n	8003b12 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	61da      	str	r2, [r3, #28]
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	6892      	ldr	r2, [r2, #8]
 8003b2a:	621a      	str	r2, [r3, #32]
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	3218      	adds	r2, #24
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f103 0218 	add.w	r2, r3, #24
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	68b8      	ldr	r0, [r7, #8]
 8003b66:	f000 fad9 	bl	800411c <prvAddCurrentTaskToDelayedList>
    }
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000012c 	.word	0x2000012c

08003b78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b08b      	sub	sp, #44	; 0x2c
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	60fb      	str	r3, [r7, #12]
    }
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	6a3a      	ldr	r2, [r7, #32]
 8003bb0:	6a12      	ldr	r2, [r2, #32]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	69d2      	ldr	r2, [r2, #28]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	3318      	adds	r3, #24
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d103      	bne.n	8003bd2 <xTaskRemoveFromEventList+0x5a>
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1e5a      	subs	r2, r3, #1
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be2:	4b4a      	ldr	r3, [pc, #296]	; (8003d0c <xTaskRemoveFromEventList+0x194>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d15e      	bne.n	8003ca8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	68d2      	ldr	r2, [r2, #12]
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	6a3a      	ldr	r2, [r7, #32]
 8003c00:	6892      	ldr	r2, [r2, #8]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d103      	bne.n	8003c18 <xTaskRemoveFromEventList+0xa0>
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	615a      	str	r2, [r3, #20]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	1e5a      	subs	r2, r3, #1
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	4b37      	ldr	r3, [pc, #220]	; (8003d10 <xTaskRemoveFromEventList+0x198>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	4a36      	ldr	r2, [pc, #216]	; (8003d10 <xTaskRemoveFromEventList+0x198>)
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3e:	4935      	ldr	r1, [pc, #212]	; (8003d14 <xTaskRemoveFromEventList+0x19c>)
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	6a3a      	ldr	r2, [r7, #32]
 8003c64:	3204      	adds	r2, #4
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	1d1a      	adds	r2, r3, #4
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <xTaskRemoveFromEventList+0x19c>)
 8003c7e:	441a      	add	r2, r3
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	615a      	str	r2, [r3, #20]
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	4922      	ldr	r1, [pc, #136]	; (8003d14 <xTaskRemoveFromEventList+0x19c>)
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	1c59      	adds	r1, r3, #1
 8003c98:	481e      	ldr	r0, [pc, #120]	; (8003d14 <xTaskRemoveFromEventList+0x19c>)
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4403      	add	r3, r0
 8003ca4:	6019      	str	r1, [r3, #0]
 8003ca6:	e01b      	b.n	8003ce0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <xTaskRemoveFromEventList+0x1a0>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	61da      	str	r2, [r3, #28]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	621a      	str	r2, [r3, #32]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	3218      	adds	r2, #24
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f103 0218 	add.w	r2, r3, #24
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <xTaskRemoveFromEventList+0x1a0>)
 8003cd4:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <xTaskRemoveFromEventList+0x1a0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <xTaskRemoveFromEventList+0x1a0>)
 8003cde:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <xTaskRemoveFromEventList+0x1a4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d905      	bls.n	8003cfa <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <xTaskRemoveFromEventList+0x1a8>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e001      	b.n	8003cfe <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	372c      	adds	r7, #44	; 0x2c
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	2000022c 	.word	0x2000022c
 8003d10:	2000020c 	.word	0x2000020c
 8003d14:	20000130 	.word	0x20000130
 8003d18:	200001c4 	.word	0x200001c4
 8003d1c:	2000012c 	.word	0x2000012c
 8003d20:	20000218 	.word	0x20000218

08003d24 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <vTaskInternalSetTimeOutState+0x24>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <vTaskInternalSetTimeOutState+0x28>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	605a      	str	r2, [r3, #4]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	2000021c 	.word	0x2000021c
 8003d4c:	20000208 	.word	0x20000208

08003d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	613b      	str	r3, [r7, #16]
    }
 8003d72:	bf00      	nop
 8003d74:	e7fe      	b.n	8003d74 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	60fb      	str	r3, [r7, #12]
    }
 8003d8e:	bf00      	nop
 8003d90:	e7fe      	b.n	8003d90 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003d92:	f000 fea1 	bl	8004ad8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d96:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <xTaskCheckForTimeOut+0xc4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d102      	bne.n	8003db6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e026      	b.n	8003e04 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <xTaskCheckForTimeOut+0xc8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d00a      	beq.n	8003dd8 <xTaskCheckForTimeOut+0x88>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d305      	bcc.n	8003dd8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e015      	b.n	8003e04 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d20b      	bcs.n	8003dfa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	1ad2      	subs	r2, r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff98 	bl	8003d24 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e004      	b.n	8003e04 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e04:	f000 fe98 	bl	8004b38 <vPortExitCritical>

    return xReturn;
 8003e08:	69fb      	ldr	r3, [r7, #28]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000208 	.word	0x20000208
 8003e18:	2000021c 	.word	0x2000021c

08003e1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <vTaskMissedYield+0x14>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	20000218 	.word	0x20000218

08003e34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e3c:	f000 f852 	bl	8003ee4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <prvIdleTask+0x28>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d9f9      	bls.n	8003e3c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <prvIdleTask+0x2c>)
 8003e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003e58:	e7f0      	b.n	8003e3c <prvIdleTask+0x8>
 8003e5a:	bf00      	nop
 8003e5c:	20000130 	.word	0x20000130
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	e00c      	b.n	8003e8a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <prvInitialiseTaskLists+0x60>)
 8003e7c:	4413      	add	r3, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe fc08 	bl	8002694 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3301      	adds	r3, #1
 8003e88:	607b      	str	r3, [r7, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d9ef      	bls.n	8003e70 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e90:	480d      	ldr	r0, [pc, #52]	; (8003ec8 <prvInitialiseTaskLists+0x64>)
 8003e92:	f7fe fbff 	bl	8002694 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e96:	480d      	ldr	r0, [pc, #52]	; (8003ecc <prvInitialiseTaskLists+0x68>)
 8003e98:	f7fe fbfc 	bl	8002694 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003e9c:	480c      	ldr	r0, [pc, #48]	; (8003ed0 <prvInitialiseTaskLists+0x6c>)
 8003e9e:	f7fe fbf9 	bl	8002694 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003ea2:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <prvInitialiseTaskLists+0x70>)
 8003ea4:	f7fe fbf6 	bl	8002694 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003ea8:	480b      	ldr	r0, [pc, #44]	; (8003ed8 <prvInitialiseTaskLists+0x74>)
 8003eaa:	f7fe fbf3 	bl	8002694 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <prvInitialiseTaskLists+0x78>)
 8003eb0:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <prvInitialiseTaskLists+0x64>)
 8003eb2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <prvInitialiseTaskLists+0x7c>)
 8003eb6:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <prvInitialiseTaskLists+0x68>)
 8003eb8:	601a      	str	r2, [r3, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000130 	.word	0x20000130
 8003ec8:	20000194 	.word	0x20000194
 8003ecc:	200001a8 	.word	0x200001a8
 8003ed0:	200001c4 	.word	0x200001c4
 8003ed4:	200001d8 	.word	0x200001d8
 8003ed8:	200001f0 	.word	0x200001f0
 8003edc:	200001bc 	.word	0x200001bc
 8003ee0:	200001c0 	.word	0x200001c0

08003ee4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eea:	e019      	b.n	8003f20 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003eec:	f000 fdf4 	bl	8004ad8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <prvCheckTasksWaitingTermination+0x50>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe fc2f 	bl	8002760 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <prvCheckTasksWaitingTermination+0x54>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <prvCheckTasksWaitingTermination+0x54>)
 8003f0a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <prvCheckTasksWaitingTermination+0x58>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <prvCheckTasksWaitingTermination+0x58>)
 8003f14:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003f16:	f000 fe0f 	bl	8004b38 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f810 	bl	8003f40 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <prvCheckTasksWaitingTermination+0x58>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e1      	bne.n	8003eec <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	200001d8 	.word	0x200001d8
 8003f38:	20000204 	.word	0x20000204
 8003f3c:	200001ec 	.word	0x200001ec

08003f40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 ff9f 	bl	8004e90 <vPortFree>
            vPortFree( pxTCB );
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 ff9c 	bl	8004e90 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <prvResetNextTaskUnblockTime+0x30>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <prvResetNextTaskUnblockTime+0x34>)
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003f76:	e005      	b.n	8003f84 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <prvResetNextTaskUnblockTime+0x30>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <prvResetNextTaskUnblockTime+0x34>)
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	200001bc 	.word	0x200001bc
 8003f94:	20000224 	.word	0x20000224

08003f98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <xTaskGetSchedulerState+0x34>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d102      	bne.n	8003fac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	e008      	b.n	8003fbe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <xTaskGetSchedulerState+0x38>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	e001      	b.n	8003fbe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003fbe:	687b      	ldr	r3, [r7, #4]
    }
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000210 	.word	0x20000210
 8003fd0:	2000022c 	.word	0x2000022c

08003fd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 808c 	beq.w	8004104 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003fec:	4b48      	ldr	r3, [pc, #288]	; (8004110 <xTaskPriorityDisinherit+0x13c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d00a      	beq.n	800400c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	613b      	str	r3, [r7, #16]
    }
 8004008:	bf00      	nop
 800400a:	e7fe      	b.n	800400a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60fb      	str	r3, [r7, #12]
    }
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403c:	429a      	cmp	r2, r3
 800403e:	d061      	beq.n	8004104 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d15d      	bne.n	8004104 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	3304      	adds	r3, #4
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fb87 	bl	8002760 <uxListRemove>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	2201      	movs	r2, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43da      	mvns	r2, r3
 8004064:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <xTaskPriorityDisinherit+0x140>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4013      	ands	r3, r2
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <xTaskPriorityDisinherit+0x140>)
 800406c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	f1c3 0205 	rsb	r2, r3, #5
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	2201      	movs	r2, #1
 8004088:	409a      	lsls	r2, r3
 800408a:	4b22      	ldr	r3, [pc, #136]	; (8004114 <xTaskPriorityDisinherit+0x140>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <xTaskPriorityDisinherit+0x140>)
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	491f      	ldr	r1, [pc, #124]	; (8004118 <xTaskPriorityDisinherit+0x144>)
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	3304      	adds	r3, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	3204      	adds	r2, #4
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	1d1a      	adds	r2, r3, #4
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	609a      	str	r2, [r3, #8]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a10      	ldr	r2, [pc, #64]	; (8004118 <xTaskPriorityDisinherit+0x144>)
 80040d8:	441a      	add	r2, r3
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	615a      	str	r2, [r3, #20]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	490d      	ldr	r1, [pc, #52]	; (8004118 <xTaskPriorityDisinherit+0x144>)
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1c59      	adds	r1, r3, #1
 80040f2:	4809      	ldr	r0, [pc, #36]	; (8004118 <xTaskPriorityDisinherit+0x144>)
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4403      	add	r3, r0
 80040fe:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004104:	69fb      	ldr	r3, [r7, #28]
    }
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	2000012c 	.word	0x2000012c
 8004114:	2000020c 	.word	0x2000020c
 8004118:	20000130 	.word	0x20000130

0800411c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004126:	4b36      	ldr	r3, [pc, #216]	; (8004200 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800412c:	4b35      	ldr	r3, [pc, #212]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3304      	adds	r3, #4
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fb14 	bl	8002760 <uxListRemove>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800413e:	4b31      	ldr	r3, [pc, #196]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	2201      	movs	r2, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43da      	mvns	r2, r3
 800414c:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <prvAddCurrentTaskToDelayedList+0xec>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4013      	ands	r3, r2
 8004152:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <prvAddCurrentTaskToDelayedList+0xec>)
 8004154:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d124      	bne.n	80041a8 <prvAddCurrentTaskToDelayedList+0x8c>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d021      	beq.n	80041a8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004164:	4b29      	ldr	r3, [pc, #164]	; (800420c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	4b26      	ldr	r3, [pc, #152]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	609a      	str	r2, [r3, #8]
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	6892      	ldr	r2, [r2, #8]
 800417a:	60da      	str	r2, [r3, #12]
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	3204      	adds	r2, #4
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	1d1a      	adds	r2, r3, #4
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	609a      	str	r2, [r3, #8]
 8004192:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1d      	ldr	r2, [pc, #116]	; (800420c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004198:	615a      	str	r2, [r3, #20]
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <prvAddCurrentTaskToDelayedList+0xf0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	4a1a      	ldr	r2, [pc, #104]	; (800420c <prvAddCurrentTaskToDelayedList+0xf0>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80041a6:	e026      	b.n	80041f6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d209      	bcs.n	80041d4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <prvAddCurrentTaskToDelayedList+0xf4>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7fe fa8e 	bl	80026ee <vListInsert>
}
 80041d2:	e010      	b.n	80041f6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d4:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <prvAddCurrentTaskToDelayedList+0xf8>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fe fa84 	bl	80026ee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <prvAddCurrentTaskToDelayedList+0xfc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d202      	bcs.n	80041f6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80041f0:	4a09      	ldr	r2, [pc, #36]	; (8004218 <prvAddCurrentTaskToDelayedList+0xfc>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6013      	str	r3, [r2, #0]
}
 80041f6:	bf00      	nop
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000208 	.word	0x20000208
 8004204:	2000012c 	.word	0x2000012c
 8004208:	2000020c 	.word	0x2000020c
 800420c:	200001f0 	.word	0x200001f0
 8004210:	200001c0 	.word	0x200001c0
 8004214:	200001bc 	.word	0x200001bc
 8004218:	20000224 	.word	0x20000224

0800421c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004226:	f000 faef 	bl	8004808 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <xTimerCreateTimerTask+0x54>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <xTimerCreateTimerTask+0x58>)
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	2302      	movs	r3, #2
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004240:	490d      	ldr	r1, [pc, #52]	; (8004278 <xTimerCreateTimerTask+0x5c>)
 8004242:	480e      	ldr	r0, [pc, #56]	; (800427c <xTimerCreateTimerTask+0x60>)
 8004244:	f7fe ffda 	bl	80031fc <xTaskCreate>
 8004248:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	603b      	str	r3, [r7, #0]
    }
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004266:	687b      	ldr	r3, [r7, #4]
    }
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000260 	.word	0x20000260
 8004274:	20000264 	.word	0x20000264
 8004278:	08005b98 	.word	0x08005b98
 800427c:	08004475 	.word	0x08004475

08004280 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800428e:	202c      	movs	r0, #44	; 0x2c
 8004290:	f000 fd44 	bl	8004d1c <pvPortMalloc>
 8004294:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f805 	bl	80042c2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80042b8:	697b      	ldr	r3, [r7, #20]
        }
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10a      	bne.n	80042ec <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	617b      	str	r3, [r7, #20]
    }
 80042e8:	bf00      	nop
 80042ea:	e7fe      	b.n	80042ea <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80042ec:	f000 fa8c 	bl	8004808 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	6a3a      	ldr	r2, [r7, #32]
 8004306:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	3304      	adds	r3, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe f9e1 	bl	80026d4 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	b2da      	uxtb	r2, r3
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800432a:	bf00      	nop
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <xTimerGenericCommand+0x2e>
        __asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	623b      	str	r3, [r7, #32]
    }
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004362:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <xTimerGenericCommand+0x98>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d02a      	beq.n	80043c0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b05      	cmp	r3, #5
 800437a:	dc18      	bgt.n	80043ae <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800437c:	f7ff fe0c 	bl	8003f98 <xTaskGetSchedulerState>
 8004380:	4603      	mov	r3, r0
 8004382:	2b02      	cmp	r3, #2
 8004384:	d109      	bne.n	800439a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <xTimerGenericCommand+0x98>)
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	f107 0114 	add.w	r1, r7, #20
 800438e:	2300      	movs	r3, #0
 8004390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004392:	f7fe fb11 	bl	80029b8 <xQueueGenericSend>
 8004396:	6278      	str	r0, [r7, #36]	; 0x24
 8004398:	e012      	b.n	80043c0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <xTimerGenericCommand+0x98>)
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	f107 0114 	add.w	r1, r7, #20
 80043a2:	2300      	movs	r3, #0
 80043a4:	2200      	movs	r2, #0
 80043a6:	f7fe fb07 	bl	80029b8 <xQueueGenericSend>
 80043aa:	6278      	str	r0, [r7, #36]	; 0x24
 80043ac:	e008      	b.n	80043c0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <xTimerGenericCommand+0x98>)
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	f107 0114 	add.w	r1, r7, #20
 80043b6:	2300      	movs	r3, #0
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	f7fe fbfb 	bl	8002bb4 <xQueueGenericSendFromISR>
 80043be:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80043c2:	4618      	mov	r0, r3
 80043c4:	3728      	adds	r7, #40	; 0x28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000260 	.word	0x20000260

080043d0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80043dc:	e008      	b.n	80043f0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	4413      	add	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	18d1      	adds	r1, r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f8dd 	bl	80045bc <prvInsertTimerInActiveList>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ea      	bne.n	80043de <prvReloadTimer+0xe>
        }
    }
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <prvProcessExpiredTimer+0x5c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3304      	adds	r3, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe f997 	bl	8002760 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7ff ffc3 	bl	80043d0 <prvReloadTimer>
 800444a:	e008      	b.n	800445e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	b2da      	uxtb	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	4798      	blx	r3
    }
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20000258 	.word	0x20000258

08004474 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f857 	bl	8004534 <prvGetNextExpireTime>
 8004486:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4619      	mov	r1, r3
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f803 	bl	8004498 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004492:	f000 f8d5 	bl	8004640 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004496:	e7f1      	b.n	800447c <prvTimerTask+0x8>

08004498 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80044a2:	f7ff f867 	bl	8003574 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f866 	bl	800457c <prvSampleTimeNow>
 80044b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d130      	bne.n	800451a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <prvProcessTimerOrBlockTask+0x3c>
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d806      	bhi.n	80044d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80044c6:	f7ff f863 	bl	8003590 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ffa1 	bl	8004414 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80044d2:	e024      	b.n	800451e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044da:	4b13      	ldr	r3, [pc, #76]	; (8004528 <prvProcessTimerOrBlockTask+0x90>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <prvProcessTimerOrBlockTask+0x50>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <prvProcessTimerOrBlockTask+0x52>
 80044e8:	2300      	movs	r3, #0
 80044ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <prvProcessTimerOrBlockTask+0x94>)
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	f7fe fe4b 	bl	8003194 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80044fe:	f7ff f847 	bl	8003590 <xTaskResumeAll>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <prvProcessTimerOrBlockTask+0x98>)
 800450a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	f3bf 8f6f 	isb	sy
    }
 8004518:	e001      	b.n	800451e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800451a:	f7ff f839 	bl	8003590 <xTaskResumeAll>
    }
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	2000025c 	.word	0x2000025c
 800452c:	20000260 	.word	0x20000260
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <prvGetNextExpireTime+0x44>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <prvGetNextExpireTime+0x16>
 8004546:	2201      	movs	r2, #1
 8004548:	e000      	b.n	800454c <prvGetNextExpireTime+0x18>
 800454a:	2200      	movs	r2, #0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <prvGetNextExpireTime+0x44>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e001      	b.n	8004568 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004568:	68fb      	ldr	r3, [r7, #12]
    }
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000258 	.word	0x20000258

0800457c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004584:	f7ff f900 	bl	8003788 <xTaskGetTickCount>
 8004588:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <prvSampleTimeNow+0x3c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	429a      	cmp	r2, r3
 8004592:	d205      	bcs.n	80045a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004594:	f000 f912 	bl	80047bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e002      	b.n	80045a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80045a6:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <prvSampleTimeNow+0x3c>)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80045ac:	68fb      	ldr	r3, [r7, #12]
    }
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000268 	.word	0x20000268

080045bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d812      	bhi.n	8004608 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	1ad2      	subs	r2, r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d302      	bcc.n	80045f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e01b      	b.n	800462e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <prvInsertTimerInActiveList+0x7c>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7fe f874 	bl	80026ee <vListInsert>
 8004606:	e012      	b.n	800462e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d206      	bcs.n	800461e <prvInsertTimerInActiveList+0x62>
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e007      	b.n	800462e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <prvInsertTimerInActiveList+0x80>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7fe f860 	bl	80026ee <vListInsert>
            }
        }

        return xProcessTimerNow;
 800462e:	697b      	ldr	r3, [r7, #20]
    }
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	2000025c 	.word	0x2000025c
 800463c:	20000258 	.word	0x20000258

08004640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004646:	e0a6      	b.n	8004796 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f2c0 80a2 	blt.w	8004794 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe f87d 	bl	8002760 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff87 	bl	800457c <prvSampleTimeNow>
 800466e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3b01      	subs	r3, #1
 8004674:	2b08      	cmp	r3, #8
 8004676:	f200 808e 	bhi.w	8004796 <prvProcessReceivedCommands+0x156>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <prvProcessReceivedCommands+0x40>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046a5 	.word	0x080046a5
 8004688:	0800470d 	.word	0x0800470d
 800468c:	08004721 	.word	0x08004721
 8004690:	0800476b 	.word	0x0800476b
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046a5 	.word	0x080046a5
 800469c:	0800470d 	.word	0x0800470d
 80046a0:	08004721 	.word	0x08004721
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	18d1      	adds	r1, r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	69f8      	ldr	r0, [r7, #28]
 80046c4:	f7ff ff7a 	bl	80045bc <prvInsertTimerInActiveList>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d063      	beq.n	8004796 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	4413      	add	r3, r2
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4619      	mov	r1, r3
 80046e8:	69f8      	ldr	r0, [r7, #28]
 80046ea:	f7ff fe71 	bl	80043d0 <prvReloadTimer>
 80046ee:	e008      	b.n	8004702 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	69f8      	ldr	r0, [r7, #28]
 8004708:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800470a:	e044      	b.n	8004796 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	b2da      	uxtb	r2, r3
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800471e:	e03a      	b.n	8004796 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	b2da      	uxtb	r2, r3
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	617b      	str	r3, [r7, #20]
    }
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	18d1      	adds	r1, r2, r3
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	69f8      	ldr	r0, [r7, #28]
 8004764:	f7ff ff2a 	bl	80045bc <prvInsertTimerInActiveList>
                        break;
 8004768:	e015      	b.n	8004796 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d103      	bne.n	8004780 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004778:	69f8      	ldr	r0, [r7, #28]
 800477a:	f000 fb89 	bl	8004e90 <vPortFree>
 800477e:	e00a      	b.n	8004796 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004792:	e000      	b.n	8004796 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004794:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <prvProcessReceivedCommands+0x178>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f107 0108 	add.w	r1, r7, #8
 800479e:	2200      	movs	r2, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe fab9 	bl	8002d18 <xQueueReceive>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f47f af4d 	bne.w	8004648 <prvProcessReceivedCommands+0x8>
        }
    }
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000260 	.word	0x20000260

080047bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047c2:	e009      	b.n	80047d8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <prvSwitchTimerLists+0x44>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80047ce:	f04f 31ff 	mov.w	r1, #4294967295
 80047d2:	6838      	ldr	r0, [r7, #0]
 80047d4:	f7ff fe1e 	bl	8004414 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <prvSwitchTimerLists+0x44>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80047e2:	4b07      	ldr	r3, [pc, #28]	; (8004800 <prvSwitchTimerLists+0x44>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <prvSwitchTimerLists+0x48>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <prvSwitchTimerLists+0x44>)
 80047ee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80047f0:	4a04      	ldr	r2, [pc, #16]	; (8004804 <prvSwitchTimerLists+0x48>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6013      	str	r3, [r2, #0]
    }
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000258 	.word	0x20000258
 8004804:	2000025c 	.word	0x2000025c

08004808 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800480c:	f000 f964 	bl	8004ad8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004810:	4b12      	ldr	r3, [pc, #72]	; (800485c <prvCheckForValidListAndQueue+0x54>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11d      	bne.n	8004854 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004818:	4811      	ldr	r0, [pc, #68]	; (8004860 <prvCheckForValidListAndQueue+0x58>)
 800481a:	f7fd ff3b 	bl	8002694 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800481e:	4811      	ldr	r0, [pc, #68]	; (8004864 <prvCheckForValidListAndQueue+0x5c>)
 8004820:	f7fd ff38 	bl	8002694 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004824:	4b10      	ldr	r3, [pc, #64]	; (8004868 <prvCheckForValidListAndQueue+0x60>)
 8004826:	4a0e      	ldr	r2, [pc, #56]	; (8004860 <prvCheckForValidListAndQueue+0x58>)
 8004828:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <prvCheckForValidListAndQueue+0x64>)
 800482c:	4a0d      	ldr	r2, [pc, #52]	; (8004864 <prvCheckForValidListAndQueue+0x5c>)
 800482e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004830:	2200      	movs	r2, #0
 8004832:	210c      	movs	r1, #12
 8004834:	200a      	movs	r0, #10
 8004836:	f7fe f84d 	bl	80028d4 <xQueueGenericCreate>
 800483a:	4603      	mov	r3, r0
 800483c:	4a07      	ldr	r2, [pc, #28]	; (800485c <prvCheckForValidListAndQueue+0x54>)
 800483e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <prvCheckForValidListAndQueue+0x54>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <prvCheckForValidListAndQueue+0x54>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4908      	ldr	r1, [pc, #32]	; (8004870 <prvCheckForValidListAndQueue+0x68>)
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fc52 	bl	80030f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004854:	f000 f970 	bl	8004b38 <vPortExitCritical>
    }
 8004858:	bf00      	nop
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000260 	.word	0x20000260
 8004860:	20000230 	.word	0x20000230
 8004864:	20000244 	.word	0x20000244
 8004868:	20000258 	.word	0x20000258
 800486c:	2000025c 	.word	0x2000025c
 8004870:	08005ba0 	.word	0x08005ba0

08004874 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3b04      	subs	r3, #4
 8004884:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800488c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3b04      	subs	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3b04      	subs	r3, #4
 80048a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80048a4:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <pxPortInitialiseStack+0x64>)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b14      	subs	r3, #20
 80048ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3b04      	subs	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f06f 0202 	mvn.w	r2, #2
 80048c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3b20      	subs	r3, #32
 80048c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80048ca:	68fb      	ldr	r3, [r7, #12]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	080048dd 	.word	0x080048dd

080048dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <prvTaskExitError+0x54>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d00a      	beq.n	8004906 <prvTaskExitError+0x2a>
        __asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	60fb      	str	r3, [r7, #12]
    }
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <prvTaskExitError+0x28>
        __asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60bb      	str	r3, [r7, #8]
    }
 8004918:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800491a:	bf00      	nop
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0fc      	beq.n	800491c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	20000010 	.word	0x20000010
	...

08004940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <pxCurrentTCBConst2>)
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	6808      	ldr	r0, [r1, #0]
 8004946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494a:	f380 8809 	msr	PSP, r0
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f04f 0000 	mov.w	r0, #0
 8004956:	f380 8811 	msr	BASEPRI, r0
 800495a:	4770      	bx	lr
 800495c:	f3af 8000 	nop.w

08004960 <pxCurrentTCBConst2>:
 8004960:	2000012c 	.word	0x2000012c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004968:	4808      	ldr	r0, [pc, #32]	; (800498c <prvPortStartFirstTask+0x24>)
 800496a:	6800      	ldr	r0, [r0, #0]
 800496c:	6800      	ldr	r0, [r0, #0]
 800496e:	f380 8808 	msr	MSP, r0
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8814 	msr	CONTROL, r0
 800497a:	b662      	cpsie	i
 800497c:	b661      	cpsie	f
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	df00      	svc	0
 8004988:	bf00      	nop
 800498a:	0000      	.short	0x0000
 800498c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop

08004994 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800499a:	4b46      	ldr	r3, [pc, #280]	; (8004ab4 <xPortStartScheduler+0x120>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a46      	ldr	r2, [pc, #280]	; (8004ab8 <xPortStartScheduler+0x124>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10a      	bne.n	80049ba <xPortStartScheduler+0x26>
        __asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	613b      	str	r3, [r7, #16]
    }
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049ba:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <xPortStartScheduler+0x120>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a3f      	ldr	r2, [pc, #252]	; (8004abc <xPortStartScheduler+0x128>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10a      	bne.n	80049da <xPortStartScheduler+0x46>
        __asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60fb      	str	r3, [r7, #12]
    }
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049da:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <xPortStartScheduler+0x12c>)
 80049dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	22ff      	movs	r2, #255	; 0xff
 80049ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <xPortStartScheduler+0x130>)
 8004a00:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a02:	4b31      	ldr	r3, [pc, #196]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a04:	2207      	movs	r2, #7
 8004a06:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a08:	e009      	b.n	8004a1e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a12:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b80      	cmp	r3, #128	; 0x80
 8004a28:	d0ef      	beq.n	8004a0a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a2a:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1c3 0307 	rsb	r3, r3, #7
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d00a      	beq.n	8004a4c <xPortStartScheduler+0xb8>
        __asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	60bb      	str	r3, [r7, #8]
    }
 8004a48:	bf00      	nop
 8004a4a:	e7fe      	b.n	8004a4a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a54:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a56:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ac8 <xPortStartScheduler+0x134>)
 8004a60:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <xPortStartScheduler+0x138>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <xPortStartScheduler+0x138>)
 8004a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004a76:	4b15      	ldr	r3, [pc, #84]	; (8004acc <xPortStartScheduler+0x138>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a14      	ldr	r2, [pc, #80]	; (8004acc <xPortStartScheduler+0x138>)
 8004a7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004a82:	f000 f8db 	bl	8004c3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <xPortStartScheduler+0x13c>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004a8c:	f000 f8fa 	bl	8004c84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a90:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <xPortStartScheduler+0x140>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a0f      	ldr	r2, [pc, #60]	; (8004ad4 <xPortStartScheduler+0x140>)
 8004a96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a9c:	f7ff ff64 	bl	8004968 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004aa0:	f7fe ffa4 	bl	80039ec <vTaskSwitchContext>
    prvTaskExitError();
 8004aa4:	f7ff ff1a 	bl	80048dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	e000ed00 	.word	0xe000ed00
 8004ab8:	410fc271 	.word	0x410fc271
 8004abc:	410fc270 	.word	0x410fc270
 8004ac0:	e000e400 	.word	0xe000e400
 8004ac4:	2000026c 	.word	0x2000026c
 8004ac8:	20000270 	.word	0x20000270
 8004acc:	e000ed20 	.word	0xe000ed20
 8004ad0:	20000010 	.word	0x20000010
 8004ad4:	e000ef34 	.word	0xe000ef34

08004ad8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
        __asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	607b      	str	r3, [r7, #4]
    }
 8004af0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <vPortEnterCritical+0x58>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	4a0d      	ldr	r2, [pc, #52]	; (8004b30 <vPortEnterCritical+0x58>)
 8004afa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004afc:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <vPortEnterCritical+0x58>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d10f      	bne.n	8004b24 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <vPortEnterCritical+0x5c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <vPortEnterCritical+0x4c>
        __asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	603b      	str	r3, [r7, #0]
    }
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <vPortEnterCritical+0x4a>
    }
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	20000010 	.word	0x20000010
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <vPortExitCritical+0x50>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <vPortExitCritical+0x24>
        __asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	607b      	str	r3, [r7, #4]
    }
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <vPortExitCritical+0x50>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <vPortExitCritical+0x50>)
 8004b64:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004b66:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <vPortExitCritical+0x50>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <vPortExitCritical+0x42>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f383 8811 	msr	BASEPRI, r3
    }
 8004b78:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	00000000 	.word	0x00000000

08004b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004b90:	f3ef 8009 	mrs	r0, PSP
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <pxCurrentTCBConst>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f01e 0f10 	tst.w	lr, #16
 8004ba0:	bf08      	it	eq
 8004ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	6010      	str	r0, [r2, #0]
 8004bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bb4:	f380 8811 	msr	BASEPRI, r0
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f7fe ff14 	bl	80039ec <vTaskSwitchContext>
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f380 8811 	msr	BASEPRI, r0
 8004bcc:	bc09      	pop	{r0, r3}
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	6808      	ldr	r0, [r1, #0]
 8004bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd6:	f01e 0f10 	tst.w	lr, #16
 8004bda:	bf08      	it	eq
 8004bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004be0:	f380 8809 	msr	PSP, r0
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	f3af 8000 	nop.w

08004bf0 <pxCurrentTCBConst>:
 8004bf0:	2000012c 	.word	0x2000012c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
        __asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	607b      	str	r3, [r7, #4]
    }
 8004c10:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004c12:	f7fe fdd5 	bl	80037c0 <xTaskIncrementTick>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <SysTick_Handler+0x40>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	2300      	movs	r3, #0
 8004c26:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f383 8811 	msr	BASEPRI, r3
    }
 8004c2e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortSetupTimerInterrupt+0x34>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <vPortSetupTimerInterrupt+0x38>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <vPortSetupTimerInterrupt+0x3c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <vPortSetupTimerInterrupt+0x40>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <vPortSetupTimerInterrupt+0x44>)
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c5e:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <vPortSetupTimerInterrupt+0x34>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000e010 	.word	0xe000e010
 8004c74:	e000e018 	.word	0xe000e018
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	10624dd3 	.word	0x10624dd3
 8004c80:	e000e014 	.word	0xe000e014

08004c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c94 <vPortEnableVFP+0x10>
 8004c88:	6801      	ldr	r1, [r0, #0]
 8004c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c8e:	6001      	str	r1, [r0, #0]
 8004c90:	4770      	bx	lr
 8004c92:	0000      	.short	0x0000
 8004c94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop

08004c9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004ca2:	f3ef 8305 	mrs	r3, IPSR
 8004ca6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	d914      	bls.n	8004cd8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <vPortValidateInterruptPriority+0x70>)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cb8:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <vPortValidateInterruptPriority+0x74>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	7afa      	ldrb	r2, [r7, #11]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d20a      	bcs.n	8004cd8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	607b      	str	r3, [r7, #4]
    }
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <vPortValidateInterruptPriority+0x78>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <vPortValidateInterruptPriority+0x7c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d90a      	bls.n	8004cfe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	603b      	str	r3, [r7, #0]
    }
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <vPortValidateInterruptPriority+0x60>
    }
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	e000e3f0 	.word	0xe000e3f0
 8004d10:	2000026c 	.word	0x2000026c
 8004d14:	e000ed0c 	.word	0xe000ed0c
 8004d18:	20000270 	.word	0x20000270

08004d1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004d28:	f7fe fc24 	bl	8003574 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <pvPortMalloc+0x160>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004d34:	f000 f908 	bl	8004f48 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d012      	beq.n	8004d64 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004d3e:	2208      	movs	r2, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	3308      	adds	r3, #8
 8004d4a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d804      	bhi.n	8004d60 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	e001      	b.n	8004d64 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	db70      	blt.n	8004e4c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d06d      	beq.n	8004e4c <pvPortMalloc+0x130>
 8004d70:	4b43      	ldr	r3, [pc, #268]	; (8004e80 <pvPortMalloc+0x164>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d868      	bhi.n	8004e4c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004d7a:	4b42      	ldr	r3, [pc, #264]	; (8004e84 <pvPortMalloc+0x168>)
 8004d7c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004d7e:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <pvPortMalloc+0x168>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d84:	e004      	b.n	8004d90 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d903      	bls.n	8004da2 <pvPortMalloc+0x86>
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f1      	bne.n	8004d86 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004da2:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <pvPortMalloc+0x160>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d04f      	beq.n	8004e4c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2208      	movs	r2, #8
 8004db2:	4413      	add	r3, r2
 8004db4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	1ad2      	subs	r2, r2, r3
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d91f      	bls.n	8004e0e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <pvPortMalloc+0xda>
        __asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	613b      	str	r3, [r7, #16]
    }
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	1ad2      	subs	r2, r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e08:	6978      	ldr	r0, [r7, #20]
 8004e0a:	f000 f8f9 	bl	8005000 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <pvPortMalloc+0x164>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <pvPortMalloc+0x164>)
 8004e1a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <pvPortMalloc+0x164>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <pvPortMalloc+0x16c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d203      	bcs.n	8004e30 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e28:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <pvPortMalloc+0x164>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <pvPortMalloc+0x16c>)
 8004e2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <pvPortMalloc+0x170>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3301      	adds	r3, #1
 8004e48:	4a10      	ldr	r2, [pc, #64]	; (8004e8c <pvPortMalloc+0x170>)
 8004e4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004e4c:	f7fe fba0 	bl	8003590 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <pvPortMalloc+0x154>
        __asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	60fb      	str	r3, [r7, #12]
    }
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <pvPortMalloc+0x152>
    return pvReturn;
 8004e70:	69fb      	ldr	r3, [r7, #28]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3728      	adds	r7, #40	; 0x28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20001be0 	.word	0x20001be0
 8004e80:	20001be4 	.word	0x20001be4
 8004e84:	20001bd8 	.word	0x20001bd8
 8004e88:	20001be8 	.word	0x20001be8
 8004e8c:	20001bec 	.word	0x20001bec

08004e90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d049      	beq.n	8004f36 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	425b      	negs	r3, r3
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	db0a      	blt.n	8004ece <vPortFree+0x3e>
        __asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	60fb      	str	r3, [r7, #12]
    }
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <vPortFree+0x5c>
        __asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60bb      	str	r3, [r7, #8]
    }
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	0fdb      	lsrs	r3, r3, #31
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01c      	beq.n	8004f36 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d118      	bne.n	8004f36 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004f10:	f7fe fb30 	bl	8003574 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <vPortFree+0xb0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <vPortFree+0xb0>)
 8004f20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f22:	6938      	ldr	r0, [r7, #16]
 8004f24:	f000 f86c 	bl	8005000 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <vPortFree+0xb4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	4a05      	ldr	r2, [pc, #20]	; (8004f44 <vPortFree+0xb4>)
 8004f30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004f32:	f7fe fb2d 	bl	8003590 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004f36:	bf00      	nop
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20001be4 	.word	0x20001be4
 8004f44:	20001bf0 	.word	0x20001bf0

08004f48 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f4e:	f641 1364 	movw	r3, #6500	; 0x1964
 8004f52:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <prvHeapInit+0xa4>)
 8004f56:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00c      	beq.n	8004f7c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3307      	adds	r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0307 	bic.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <prvHeapInit+0xa4>)
 8004f78:	4413      	add	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f80:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <prvHeapInit+0xa8>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004f86:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <prvHeapInit+0xa8>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4413      	add	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004f94:	2208      	movs	r2, #8
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0307 	bic.w	r3, r3, #7
 8004fa2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <prvHeapInit+0xac>)
 8004fa8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <prvHeapInit+0xac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <prvHeapInit+0xac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <prvHeapInit+0xac>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <prvHeapInit+0xb0>)
 8004fd6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a07      	ldr	r2, [pc, #28]	; (8004ffc <prvHeapInit+0xb4>)
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000274 	.word	0x20000274
 8004ff0:	20001bd8 	.word	0x20001bd8
 8004ff4:	20001be0 	.word	0x20001be0
 8004ff8:	20001be8 	.word	0x20001be8
 8004ffc:	20001be4 	.word	0x20001be4

08005000 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005008:	4b28      	ldr	r3, [pc, #160]	; (80050ac <prvInsertBlockIntoFreeList+0xac>)
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e002      	b.n	8005014 <prvInsertBlockIntoFreeList+0x14>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	429a      	cmp	r2, r3
 800501c:	d8f7      	bhi.n	800500e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	4413      	add	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	d108      	bne.n	8005042 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	441a      	add	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	441a      	add	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d118      	bne.n	8005088 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <prvInsertBlockIntoFreeList+0xb0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d00d      	beq.n	800507e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e008      	b.n	8005090 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <prvInsertBlockIntoFreeList+0xb0>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e003      	b.n	8005090 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d002      	beq.n	800509e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20001bd8 	.word	0x20001bd8
 80050b0:	20001be0 	.word	0x20001be0

080050b4 <__libc_init_array>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	4d0d      	ldr	r5, [pc, #52]	; (80050ec <__libc_init_array+0x38>)
 80050b8:	4c0d      	ldr	r4, [pc, #52]	; (80050f0 <__libc_init_array+0x3c>)
 80050ba:	1b64      	subs	r4, r4, r5
 80050bc:	10a4      	asrs	r4, r4, #2
 80050be:	2600      	movs	r6, #0
 80050c0:	42a6      	cmp	r6, r4
 80050c2:	d109      	bne.n	80050d8 <__libc_init_array+0x24>
 80050c4:	4d0b      	ldr	r5, [pc, #44]	; (80050f4 <__libc_init_array+0x40>)
 80050c6:	4c0c      	ldr	r4, [pc, #48]	; (80050f8 <__libc_init_array+0x44>)
 80050c8:	f000 fd3a 	bl	8005b40 <_init>
 80050cc:	1b64      	subs	r4, r4, r5
 80050ce:	10a4      	asrs	r4, r4, #2
 80050d0:	2600      	movs	r6, #0
 80050d2:	42a6      	cmp	r6, r4
 80050d4:	d105      	bne.n	80050e2 <__libc_init_array+0x2e>
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050dc:	4798      	blx	r3
 80050de:	3601      	adds	r6, #1
 80050e0:	e7ee      	b.n	80050c0 <__libc_init_array+0xc>
 80050e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e6:	4798      	blx	r3
 80050e8:	3601      	adds	r6, #1
 80050ea:	e7f2      	b.n	80050d2 <__libc_init_array+0x1e>
 80050ec:	08005c44 	.word	0x08005c44
 80050f0:	08005c44 	.word	0x08005c44
 80050f4:	08005c44 	.word	0x08005c44
 80050f8:	08005c48 	.word	0x08005c48

080050fc <memcpy>:
 80050fc:	440a      	add	r2, r1
 80050fe:	4291      	cmp	r1, r2
 8005100:	f100 33ff 	add.w	r3, r0, #4294967295
 8005104:	d100      	bne.n	8005108 <memcpy+0xc>
 8005106:	4770      	bx	lr
 8005108:	b510      	push	{r4, lr}
 800510a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800510e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005112:	4291      	cmp	r1, r2
 8005114:	d1f9      	bne.n	800510a <memcpy+0xe>
 8005116:	bd10      	pop	{r4, pc}

08005118 <memset>:
 8005118:	4402      	add	r2, r0
 800511a:	4603      	mov	r3, r0
 800511c:	4293      	cmp	r3, r2
 800511e:	d100      	bne.n	8005122 <memset+0xa>
 8005120:	4770      	bx	lr
 8005122:	f803 1b01 	strb.w	r1, [r3], #1
 8005126:	e7f9      	b.n	800511c <memset+0x4>

08005128 <_puts_r>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	460e      	mov	r6, r1
 800512c:	4605      	mov	r5, r0
 800512e:	b118      	cbz	r0, 8005138 <_puts_r+0x10>
 8005130:	6983      	ldr	r3, [r0, #24]
 8005132:	b90b      	cbnz	r3, 8005138 <_puts_r+0x10>
 8005134:	f000 fa48 	bl	80055c8 <__sinit>
 8005138:	69ab      	ldr	r3, [r5, #24]
 800513a:	68ac      	ldr	r4, [r5, #8]
 800513c:	b913      	cbnz	r3, 8005144 <_puts_r+0x1c>
 800513e:	4628      	mov	r0, r5
 8005140:	f000 fa42 	bl	80055c8 <__sinit>
 8005144:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <_puts_r+0xd0>)
 8005146:	429c      	cmp	r4, r3
 8005148:	d120      	bne.n	800518c <_puts_r+0x64>
 800514a:	686c      	ldr	r4, [r5, #4]
 800514c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800514e:	07db      	lsls	r3, r3, #31
 8005150:	d405      	bmi.n	800515e <_puts_r+0x36>
 8005152:	89a3      	ldrh	r3, [r4, #12]
 8005154:	0598      	lsls	r0, r3, #22
 8005156:	d402      	bmi.n	800515e <_puts_r+0x36>
 8005158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800515a:	f000 fad3 	bl	8005704 <__retarget_lock_acquire_recursive>
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	0719      	lsls	r1, r3, #28
 8005162:	d51d      	bpl.n	80051a0 <_puts_r+0x78>
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	b1db      	cbz	r3, 80051a0 <_puts_r+0x78>
 8005168:	3e01      	subs	r6, #1
 800516a:	68a3      	ldr	r3, [r4, #8]
 800516c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005170:	3b01      	subs	r3, #1
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	bb39      	cbnz	r1, 80051c6 <_puts_r+0x9e>
 8005176:	2b00      	cmp	r3, #0
 8005178:	da38      	bge.n	80051ec <_puts_r+0xc4>
 800517a:	4622      	mov	r2, r4
 800517c:	210a      	movs	r1, #10
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f848 	bl	8005214 <__swbuf_r>
 8005184:	3001      	adds	r0, #1
 8005186:	d011      	beq.n	80051ac <_puts_r+0x84>
 8005188:	250a      	movs	r5, #10
 800518a:	e011      	b.n	80051b0 <_puts_r+0x88>
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <_puts_r+0xd4>)
 800518e:	429c      	cmp	r4, r3
 8005190:	d101      	bne.n	8005196 <_puts_r+0x6e>
 8005192:	68ac      	ldr	r4, [r5, #8]
 8005194:	e7da      	b.n	800514c <_puts_r+0x24>
 8005196:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <_puts_r+0xd8>)
 8005198:	429c      	cmp	r4, r3
 800519a:	bf08      	it	eq
 800519c:	68ec      	ldreq	r4, [r5, #12]
 800519e:	e7d5      	b.n	800514c <_puts_r+0x24>
 80051a0:	4621      	mov	r1, r4
 80051a2:	4628      	mov	r0, r5
 80051a4:	f000 f888 	bl	80052b8 <__swsetup_r>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d0dd      	beq.n	8005168 <_puts_r+0x40>
 80051ac:	f04f 35ff 	mov.w	r5, #4294967295
 80051b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051b2:	07da      	lsls	r2, r3, #31
 80051b4:	d405      	bmi.n	80051c2 <_puts_r+0x9a>
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	059b      	lsls	r3, r3, #22
 80051ba:	d402      	bmi.n	80051c2 <_puts_r+0x9a>
 80051bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051be:	f000 faa2 	bl	8005706 <__retarget_lock_release_recursive>
 80051c2:	4628      	mov	r0, r5
 80051c4:	bd70      	pop	{r4, r5, r6, pc}
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da04      	bge.n	80051d4 <_puts_r+0xac>
 80051ca:	69a2      	ldr	r2, [r4, #24]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	dc06      	bgt.n	80051de <_puts_r+0xb6>
 80051d0:	290a      	cmp	r1, #10
 80051d2:	d004      	beq.n	80051de <_puts_r+0xb6>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	6022      	str	r2, [r4, #0]
 80051da:	7019      	strb	r1, [r3, #0]
 80051dc:	e7c5      	b.n	800516a <_puts_r+0x42>
 80051de:	4622      	mov	r2, r4
 80051e0:	4628      	mov	r0, r5
 80051e2:	f000 f817 	bl	8005214 <__swbuf_r>
 80051e6:	3001      	adds	r0, #1
 80051e8:	d1bf      	bne.n	800516a <_puts_r+0x42>
 80051ea:	e7df      	b.n	80051ac <_puts_r+0x84>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	250a      	movs	r5, #10
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	6022      	str	r2, [r4, #0]
 80051f4:	701d      	strb	r5, [r3, #0]
 80051f6:	e7db      	b.n	80051b0 <_puts_r+0x88>
 80051f8:	08005c04 	.word	0x08005c04
 80051fc:	08005c24 	.word	0x08005c24
 8005200:	08005be4 	.word	0x08005be4

08005204 <puts>:
 8005204:	4b02      	ldr	r3, [pc, #8]	; (8005210 <puts+0xc>)
 8005206:	4601      	mov	r1, r0
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	f7ff bf8d 	b.w	8005128 <_puts_r>
 800520e:	bf00      	nop
 8005210:	20000014 	.word	0x20000014

08005214 <__swbuf_r>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	460e      	mov	r6, r1
 8005218:	4614      	mov	r4, r2
 800521a:	4605      	mov	r5, r0
 800521c:	b118      	cbz	r0, 8005226 <__swbuf_r+0x12>
 800521e:	6983      	ldr	r3, [r0, #24]
 8005220:	b90b      	cbnz	r3, 8005226 <__swbuf_r+0x12>
 8005222:	f000 f9d1 	bl	80055c8 <__sinit>
 8005226:	4b21      	ldr	r3, [pc, #132]	; (80052ac <__swbuf_r+0x98>)
 8005228:	429c      	cmp	r4, r3
 800522a:	d12b      	bne.n	8005284 <__swbuf_r+0x70>
 800522c:	686c      	ldr	r4, [r5, #4]
 800522e:	69a3      	ldr	r3, [r4, #24]
 8005230:	60a3      	str	r3, [r4, #8]
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	071a      	lsls	r2, r3, #28
 8005236:	d52f      	bpl.n	8005298 <__swbuf_r+0x84>
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	b36b      	cbz	r3, 8005298 <__swbuf_r+0x84>
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	1ac0      	subs	r0, r0, r3
 8005242:	6963      	ldr	r3, [r4, #20]
 8005244:	b2f6      	uxtb	r6, r6
 8005246:	4283      	cmp	r3, r0
 8005248:	4637      	mov	r7, r6
 800524a:	dc04      	bgt.n	8005256 <__swbuf_r+0x42>
 800524c:	4621      	mov	r1, r4
 800524e:	4628      	mov	r0, r5
 8005250:	f000 f926 	bl	80054a0 <_fflush_r>
 8005254:	bb30      	cbnz	r0, 80052a4 <__swbuf_r+0x90>
 8005256:	68a3      	ldr	r3, [r4, #8]
 8005258:	3b01      	subs	r3, #1
 800525a:	60a3      	str	r3, [r4, #8]
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	6022      	str	r2, [r4, #0]
 8005262:	701e      	strb	r6, [r3, #0]
 8005264:	6963      	ldr	r3, [r4, #20]
 8005266:	3001      	adds	r0, #1
 8005268:	4283      	cmp	r3, r0
 800526a:	d004      	beq.n	8005276 <__swbuf_r+0x62>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	07db      	lsls	r3, r3, #31
 8005270:	d506      	bpl.n	8005280 <__swbuf_r+0x6c>
 8005272:	2e0a      	cmp	r6, #10
 8005274:	d104      	bne.n	8005280 <__swbuf_r+0x6c>
 8005276:	4621      	mov	r1, r4
 8005278:	4628      	mov	r0, r5
 800527a:	f000 f911 	bl	80054a0 <_fflush_r>
 800527e:	b988      	cbnz	r0, 80052a4 <__swbuf_r+0x90>
 8005280:	4638      	mov	r0, r7
 8005282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005284:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <__swbuf_r+0x9c>)
 8005286:	429c      	cmp	r4, r3
 8005288:	d101      	bne.n	800528e <__swbuf_r+0x7a>
 800528a:	68ac      	ldr	r4, [r5, #8]
 800528c:	e7cf      	b.n	800522e <__swbuf_r+0x1a>
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <__swbuf_r+0xa0>)
 8005290:	429c      	cmp	r4, r3
 8005292:	bf08      	it	eq
 8005294:	68ec      	ldreq	r4, [r5, #12]
 8005296:	e7ca      	b.n	800522e <__swbuf_r+0x1a>
 8005298:	4621      	mov	r1, r4
 800529a:	4628      	mov	r0, r5
 800529c:	f000 f80c 	bl	80052b8 <__swsetup_r>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d0cb      	beq.n	800523c <__swbuf_r+0x28>
 80052a4:	f04f 37ff 	mov.w	r7, #4294967295
 80052a8:	e7ea      	b.n	8005280 <__swbuf_r+0x6c>
 80052aa:	bf00      	nop
 80052ac:	08005c04 	.word	0x08005c04
 80052b0:	08005c24 	.word	0x08005c24
 80052b4:	08005be4 	.word	0x08005be4

080052b8 <__swsetup_r>:
 80052b8:	4b32      	ldr	r3, [pc, #200]	; (8005384 <__swsetup_r+0xcc>)
 80052ba:	b570      	push	{r4, r5, r6, lr}
 80052bc:	681d      	ldr	r5, [r3, #0]
 80052be:	4606      	mov	r6, r0
 80052c0:	460c      	mov	r4, r1
 80052c2:	b125      	cbz	r5, 80052ce <__swsetup_r+0x16>
 80052c4:	69ab      	ldr	r3, [r5, #24]
 80052c6:	b913      	cbnz	r3, 80052ce <__swsetup_r+0x16>
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 f97d 	bl	80055c8 <__sinit>
 80052ce:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <__swsetup_r+0xd0>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	d10f      	bne.n	80052f4 <__swsetup_r+0x3c>
 80052d4:	686c      	ldr	r4, [r5, #4]
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052dc:	0719      	lsls	r1, r3, #28
 80052de:	d42c      	bmi.n	800533a <__swsetup_r+0x82>
 80052e0:	06dd      	lsls	r5, r3, #27
 80052e2:	d411      	bmi.n	8005308 <__swsetup_r+0x50>
 80052e4:	2309      	movs	r3, #9
 80052e6:	6033      	str	r3, [r6, #0]
 80052e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295
 80052f2:	e03e      	b.n	8005372 <__swsetup_r+0xba>
 80052f4:	4b25      	ldr	r3, [pc, #148]	; (800538c <__swsetup_r+0xd4>)
 80052f6:	429c      	cmp	r4, r3
 80052f8:	d101      	bne.n	80052fe <__swsetup_r+0x46>
 80052fa:	68ac      	ldr	r4, [r5, #8]
 80052fc:	e7eb      	b.n	80052d6 <__swsetup_r+0x1e>
 80052fe:	4b24      	ldr	r3, [pc, #144]	; (8005390 <__swsetup_r+0xd8>)
 8005300:	429c      	cmp	r4, r3
 8005302:	bf08      	it	eq
 8005304:	68ec      	ldreq	r4, [r5, #12]
 8005306:	e7e6      	b.n	80052d6 <__swsetup_r+0x1e>
 8005308:	0758      	lsls	r0, r3, #29
 800530a:	d512      	bpl.n	8005332 <__swsetup_r+0x7a>
 800530c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800530e:	b141      	cbz	r1, 8005322 <__swsetup_r+0x6a>
 8005310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005314:	4299      	cmp	r1, r3
 8005316:	d002      	beq.n	800531e <__swsetup_r+0x66>
 8005318:	4630      	mov	r0, r6
 800531a:	f000 fa5b 	bl	80057d4 <_free_r>
 800531e:	2300      	movs	r3, #0
 8005320:	6363      	str	r3, [r4, #52]	; 0x34
 8005322:	89a3      	ldrh	r3, [r4, #12]
 8005324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	2300      	movs	r3, #0
 800532c:	6063      	str	r3, [r4, #4]
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	f043 0308 	orr.w	r3, r3, #8
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	b94b      	cbnz	r3, 8005352 <__swsetup_r+0x9a>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005348:	d003      	beq.n	8005352 <__swsetup_r+0x9a>
 800534a:	4621      	mov	r1, r4
 800534c:	4630      	mov	r0, r6
 800534e:	f000 fa01 	bl	8005754 <__smakebuf_r>
 8005352:	89a0      	ldrh	r0, [r4, #12]
 8005354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005358:	f010 0301 	ands.w	r3, r0, #1
 800535c:	d00a      	beq.n	8005374 <__swsetup_r+0xbc>
 800535e:	2300      	movs	r3, #0
 8005360:	60a3      	str	r3, [r4, #8]
 8005362:	6963      	ldr	r3, [r4, #20]
 8005364:	425b      	negs	r3, r3
 8005366:	61a3      	str	r3, [r4, #24]
 8005368:	6923      	ldr	r3, [r4, #16]
 800536a:	b943      	cbnz	r3, 800537e <__swsetup_r+0xc6>
 800536c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005370:	d1ba      	bne.n	80052e8 <__swsetup_r+0x30>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	0781      	lsls	r1, r0, #30
 8005376:	bf58      	it	pl
 8005378:	6963      	ldrpl	r3, [r4, #20]
 800537a:	60a3      	str	r3, [r4, #8]
 800537c:	e7f4      	b.n	8005368 <__swsetup_r+0xb0>
 800537e:	2000      	movs	r0, #0
 8005380:	e7f7      	b.n	8005372 <__swsetup_r+0xba>
 8005382:	bf00      	nop
 8005384:	20000014 	.word	0x20000014
 8005388:	08005c04 	.word	0x08005c04
 800538c:	08005c24 	.word	0x08005c24
 8005390:	08005be4 	.word	0x08005be4

08005394 <__sflush_r>:
 8005394:	898a      	ldrh	r2, [r1, #12]
 8005396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539a:	4605      	mov	r5, r0
 800539c:	0710      	lsls	r0, r2, #28
 800539e:	460c      	mov	r4, r1
 80053a0:	d458      	bmi.n	8005454 <__sflush_r+0xc0>
 80053a2:	684b      	ldr	r3, [r1, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dc05      	bgt.n	80053b4 <__sflush_r+0x20>
 80053a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dc02      	bgt.n	80053b4 <__sflush_r+0x20>
 80053ae:	2000      	movs	r0, #0
 80053b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	d0f9      	beq.n	80053ae <__sflush_r+0x1a>
 80053ba:	2300      	movs	r3, #0
 80053bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053c0:	682f      	ldr	r7, [r5, #0]
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	d032      	beq.n	800542c <__sflush_r+0x98>
 80053c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	075a      	lsls	r2, r3, #29
 80053cc:	d505      	bpl.n	80053da <__sflush_r+0x46>
 80053ce:	6863      	ldr	r3, [r4, #4]
 80053d0:	1ac0      	subs	r0, r0, r3
 80053d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053d4:	b10b      	cbz	r3, 80053da <__sflush_r+0x46>
 80053d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053d8:	1ac0      	subs	r0, r0, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	4602      	mov	r2, r0
 80053de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053e0:	6a21      	ldr	r1, [r4, #32]
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b0      	blx	r6
 80053e6:	1c43      	adds	r3, r0, #1
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	d106      	bne.n	80053fa <__sflush_r+0x66>
 80053ec:	6829      	ldr	r1, [r5, #0]
 80053ee:	291d      	cmp	r1, #29
 80053f0:	d82c      	bhi.n	800544c <__sflush_r+0xb8>
 80053f2:	4a2a      	ldr	r2, [pc, #168]	; (800549c <__sflush_r+0x108>)
 80053f4:	40ca      	lsrs	r2, r1
 80053f6:	07d6      	lsls	r6, r2, #31
 80053f8:	d528      	bpl.n	800544c <__sflush_r+0xb8>
 80053fa:	2200      	movs	r2, #0
 80053fc:	6062      	str	r2, [r4, #4]
 80053fe:	04d9      	lsls	r1, r3, #19
 8005400:	6922      	ldr	r2, [r4, #16]
 8005402:	6022      	str	r2, [r4, #0]
 8005404:	d504      	bpl.n	8005410 <__sflush_r+0x7c>
 8005406:	1c42      	adds	r2, r0, #1
 8005408:	d101      	bne.n	800540e <__sflush_r+0x7a>
 800540a:	682b      	ldr	r3, [r5, #0]
 800540c:	b903      	cbnz	r3, 8005410 <__sflush_r+0x7c>
 800540e:	6560      	str	r0, [r4, #84]	; 0x54
 8005410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005412:	602f      	str	r7, [r5, #0]
 8005414:	2900      	cmp	r1, #0
 8005416:	d0ca      	beq.n	80053ae <__sflush_r+0x1a>
 8005418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800541c:	4299      	cmp	r1, r3
 800541e:	d002      	beq.n	8005426 <__sflush_r+0x92>
 8005420:	4628      	mov	r0, r5
 8005422:	f000 f9d7 	bl	80057d4 <_free_r>
 8005426:	2000      	movs	r0, #0
 8005428:	6360      	str	r0, [r4, #52]	; 0x34
 800542a:	e7c1      	b.n	80053b0 <__sflush_r+0x1c>
 800542c:	6a21      	ldr	r1, [r4, #32]
 800542e:	2301      	movs	r3, #1
 8005430:	4628      	mov	r0, r5
 8005432:	47b0      	blx	r6
 8005434:	1c41      	adds	r1, r0, #1
 8005436:	d1c7      	bne.n	80053c8 <__sflush_r+0x34>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0c4      	beq.n	80053c8 <__sflush_r+0x34>
 800543e:	2b1d      	cmp	r3, #29
 8005440:	d001      	beq.n	8005446 <__sflush_r+0xb2>
 8005442:	2b16      	cmp	r3, #22
 8005444:	d101      	bne.n	800544a <__sflush_r+0xb6>
 8005446:	602f      	str	r7, [r5, #0]
 8005448:	e7b1      	b.n	80053ae <__sflush_r+0x1a>
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	e7ad      	b.n	80053b0 <__sflush_r+0x1c>
 8005454:	690f      	ldr	r7, [r1, #16]
 8005456:	2f00      	cmp	r7, #0
 8005458:	d0a9      	beq.n	80053ae <__sflush_r+0x1a>
 800545a:	0793      	lsls	r3, r2, #30
 800545c:	680e      	ldr	r6, [r1, #0]
 800545e:	bf08      	it	eq
 8005460:	694b      	ldreq	r3, [r1, #20]
 8005462:	600f      	str	r7, [r1, #0]
 8005464:	bf18      	it	ne
 8005466:	2300      	movne	r3, #0
 8005468:	eba6 0807 	sub.w	r8, r6, r7
 800546c:	608b      	str	r3, [r1, #8]
 800546e:	f1b8 0f00 	cmp.w	r8, #0
 8005472:	dd9c      	ble.n	80053ae <__sflush_r+0x1a>
 8005474:	6a21      	ldr	r1, [r4, #32]
 8005476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005478:	4643      	mov	r3, r8
 800547a:	463a      	mov	r2, r7
 800547c:	4628      	mov	r0, r5
 800547e:	47b0      	blx	r6
 8005480:	2800      	cmp	r0, #0
 8005482:	dc06      	bgt.n	8005492 <__sflush_r+0xfe>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	e78e      	b.n	80053b0 <__sflush_r+0x1c>
 8005492:	4407      	add	r7, r0
 8005494:	eba8 0800 	sub.w	r8, r8, r0
 8005498:	e7e9      	b.n	800546e <__sflush_r+0xda>
 800549a:	bf00      	nop
 800549c:	20400001 	.word	0x20400001

080054a0 <_fflush_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	690b      	ldr	r3, [r1, #16]
 80054a4:	4605      	mov	r5, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	b913      	cbnz	r3, 80054b0 <_fflush_r+0x10>
 80054aa:	2500      	movs	r5, #0
 80054ac:	4628      	mov	r0, r5
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	b118      	cbz	r0, 80054ba <_fflush_r+0x1a>
 80054b2:	6983      	ldr	r3, [r0, #24]
 80054b4:	b90b      	cbnz	r3, 80054ba <_fflush_r+0x1a>
 80054b6:	f000 f887 	bl	80055c8 <__sinit>
 80054ba:	4b14      	ldr	r3, [pc, #80]	; (800550c <_fflush_r+0x6c>)
 80054bc:	429c      	cmp	r4, r3
 80054be:	d11b      	bne.n	80054f8 <_fflush_r+0x58>
 80054c0:	686c      	ldr	r4, [r5, #4]
 80054c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0ef      	beq.n	80054aa <_fflush_r+0xa>
 80054ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054cc:	07d0      	lsls	r0, r2, #31
 80054ce:	d404      	bmi.n	80054da <_fflush_r+0x3a>
 80054d0:	0599      	lsls	r1, r3, #22
 80054d2:	d402      	bmi.n	80054da <_fflush_r+0x3a>
 80054d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054d6:	f000 f915 	bl	8005704 <__retarget_lock_acquire_recursive>
 80054da:	4628      	mov	r0, r5
 80054dc:	4621      	mov	r1, r4
 80054de:	f7ff ff59 	bl	8005394 <__sflush_r>
 80054e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054e4:	07da      	lsls	r2, r3, #31
 80054e6:	4605      	mov	r5, r0
 80054e8:	d4e0      	bmi.n	80054ac <_fflush_r+0xc>
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	059b      	lsls	r3, r3, #22
 80054ee:	d4dd      	bmi.n	80054ac <_fflush_r+0xc>
 80054f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054f2:	f000 f908 	bl	8005706 <__retarget_lock_release_recursive>
 80054f6:	e7d9      	b.n	80054ac <_fflush_r+0xc>
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <_fflush_r+0x70>)
 80054fa:	429c      	cmp	r4, r3
 80054fc:	d101      	bne.n	8005502 <_fflush_r+0x62>
 80054fe:	68ac      	ldr	r4, [r5, #8]
 8005500:	e7df      	b.n	80054c2 <_fflush_r+0x22>
 8005502:	4b04      	ldr	r3, [pc, #16]	; (8005514 <_fflush_r+0x74>)
 8005504:	429c      	cmp	r4, r3
 8005506:	bf08      	it	eq
 8005508:	68ec      	ldreq	r4, [r5, #12]
 800550a:	e7da      	b.n	80054c2 <_fflush_r+0x22>
 800550c:	08005c04 	.word	0x08005c04
 8005510:	08005c24 	.word	0x08005c24
 8005514:	08005be4 	.word	0x08005be4

08005518 <std>:
 8005518:	2300      	movs	r3, #0
 800551a:	b510      	push	{r4, lr}
 800551c:	4604      	mov	r4, r0
 800551e:	e9c0 3300 	strd	r3, r3, [r0]
 8005522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005526:	6083      	str	r3, [r0, #8]
 8005528:	8181      	strh	r1, [r0, #12]
 800552a:	6643      	str	r3, [r0, #100]	; 0x64
 800552c:	81c2      	strh	r2, [r0, #14]
 800552e:	6183      	str	r3, [r0, #24]
 8005530:	4619      	mov	r1, r3
 8005532:	2208      	movs	r2, #8
 8005534:	305c      	adds	r0, #92	; 0x5c
 8005536:	f7ff fdef 	bl	8005118 <memset>
 800553a:	4b05      	ldr	r3, [pc, #20]	; (8005550 <std+0x38>)
 800553c:	6263      	str	r3, [r4, #36]	; 0x24
 800553e:	4b05      	ldr	r3, [pc, #20]	; (8005554 <std+0x3c>)
 8005540:	62a3      	str	r3, [r4, #40]	; 0x28
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <std+0x40>)
 8005544:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <std+0x44>)
 8005548:	6224      	str	r4, [r4, #32]
 800554a:	6323      	str	r3, [r4, #48]	; 0x30
 800554c:	bd10      	pop	{r4, pc}
 800554e:	bf00      	nop
 8005550:	080059b5 	.word	0x080059b5
 8005554:	080059d7 	.word	0x080059d7
 8005558:	08005a0f 	.word	0x08005a0f
 800555c:	08005a33 	.word	0x08005a33

08005560 <_cleanup_r>:
 8005560:	4901      	ldr	r1, [pc, #4]	; (8005568 <_cleanup_r+0x8>)
 8005562:	f000 b8af 	b.w	80056c4 <_fwalk_reent>
 8005566:	bf00      	nop
 8005568:	080054a1 	.word	0x080054a1

0800556c <__sfmoreglue>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	2268      	movs	r2, #104	; 0x68
 8005570:	1e4d      	subs	r5, r1, #1
 8005572:	4355      	muls	r5, r2
 8005574:	460e      	mov	r6, r1
 8005576:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800557a:	f000 f997 	bl	80058ac <_malloc_r>
 800557e:	4604      	mov	r4, r0
 8005580:	b140      	cbz	r0, 8005594 <__sfmoreglue+0x28>
 8005582:	2100      	movs	r1, #0
 8005584:	e9c0 1600 	strd	r1, r6, [r0]
 8005588:	300c      	adds	r0, #12
 800558a:	60a0      	str	r0, [r4, #8]
 800558c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005590:	f7ff fdc2 	bl	8005118 <memset>
 8005594:	4620      	mov	r0, r4
 8005596:	bd70      	pop	{r4, r5, r6, pc}

08005598 <__sfp_lock_acquire>:
 8005598:	4801      	ldr	r0, [pc, #4]	; (80055a0 <__sfp_lock_acquire+0x8>)
 800559a:	f000 b8b3 	b.w	8005704 <__retarget_lock_acquire_recursive>
 800559e:	bf00      	nop
 80055a0:	20001bf5 	.word	0x20001bf5

080055a4 <__sfp_lock_release>:
 80055a4:	4801      	ldr	r0, [pc, #4]	; (80055ac <__sfp_lock_release+0x8>)
 80055a6:	f000 b8ae 	b.w	8005706 <__retarget_lock_release_recursive>
 80055aa:	bf00      	nop
 80055ac:	20001bf5 	.word	0x20001bf5

080055b0 <__sinit_lock_acquire>:
 80055b0:	4801      	ldr	r0, [pc, #4]	; (80055b8 <__sinit_lock_acquire+0x8>)
 80055b2:	f000 b8a7 	b.w	8005704 <__retarget_lock_acquire_recursive>
 80055b6:	bf00      	nop
 80055b8:	20001bf6 	.word	0x20001bf6

080055bc <__sinit_lock_release>:
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <__sinit_lock_release+0x8>)
 80055be:	f000 b8a2 	b.w	8005706 <__retarget_lock_release_recursive>
 80055c2:	bf00      	nop
 80055c4:	20001bf6 	.word	0x20001bf6

080055c8 <__sinit>:
 80055c8:	b510      	push	{r4, lr}
 80055ca:	4604      	mov	r4, r0
 80055cc:	f7ff fff0 	bl	80055b0 <__sinit_lock_acquire>
 80055d0:	69a3      	ldr	r3, [r4, #24]
 80055d2:	b11b      	cbz	r3, 80055dc <__sinit+0x14>
 80055d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d8:	f7ff bff0 	b.w	80055bc <__sinit_lock_release>
 80055dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055e0:	6523      	str	r3, [r4, #80]	; 0x50
 80055e2:	4b13      	ldr	r3, [pc, #76]	; (8005630 <__sinit+0x68>)
 80055e4:	4a13      	ldr	r2, [pc, #76]	; (8005634 <__sinit+0x6c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80055ea:	42a3      	cmp	r3, r4
 80055ec:	bf04      	itt	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	61a3      	streq	r3, [r4, #24]
 80055f2:	4620      	mov	r0, r4
 80055f4:	f000 f820 	bl	8005638 <__sfp>
 80055f8:	6060      	str	r0, [r4, #4]
 80055fa:	4620      	mov	r0, r4
 80055fc:	f000 f81c 	bl	8005638 <__sfp>
 8005600:	60a0      	str	r0, [r4, #8]
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f818 	bl	8005638 <__sfp>
 8005608:	2200      	movs	r2, #0
 800560a:	60e0      	str	r0, [r4, #12]
 800560c:	2104      	movs	r1, #4
 800560e:	6860      	ldr	r0, [r4, #4]
 8005610:	f7ff ff82 	bl	8005518 <std>
 8005614:	68a0      	ldr	r0, [r4, #8]
 8005616:	2201      	movs	r2, #1
 8005618:	2109      	movs	r1, #9
 800561a:	f7ff ff7d 	bl	8005518 <std>
 800561e:	68e0      	ldr	r0, [r4, #12]
 8005620:	2202      	movs	r2, #2
 8005622:	2112      	movs	r1, #18
 8005624:	f7ff ff78 	bl	8005518 <std>
 8005628:	2301      	movs	r3, #1
 800562a:	61a3      	str	r3, [r4, #24]
 800562c:	e7d2      	b.n	80055d4 <__sinit+0xc>
 800562e:	bf00      	nop
 8005630:	08005be0 	.word	0x08005be0
 8005634:	08005561 	.word	0x08005561

08005638 <__sfp>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	4607      	mov	r7, r0
 800563c:	f7ff ffac 	bl	8005598 <__sfp_lock_acquire>
 8005640:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <__sfp+0x84>)
 8005642:	681e      	ldr	r6, [r3, #0]
 8005644:	69b3      	ldr	r3, [r6, #24]
 8005646:	b913      	cbnz	r3, 800564e <__sfp+0x16>
 8005648:	4630      	mov	r0, r6
 800564a:	f7ff ffbd 	bl	80055c8 <__sinit>
 800564e:	3648      	adds	r6, #72	; 0x48
 8005650:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005654:	3b01      	subs	r3, #1
 8005656:	d503      	bpl.n	8005660 <__sfp+0x28>
 8005658:	6833      	ldr	r3, [r6, #0]
 800565a:	b30b      	cbz	r3, 80056a0 <__sfp+0x68>
 800565c:	6836      	ldr	r6, [r6, #0]
 800565e:	e7f7      	b.n	8005650 <__sfp+0x18>
 8005660:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005664:	b9d5      	cbnz	r5, 800569c <__sfp+0x64>
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <__sfp+0x88>)
 8005668:	60e3      	str	r3, [r4, #12]
 800566a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800566e:	6665      	str	r5, [r4, #100]	; 0x64
 8005670:	f000 f847 	bl	8005702 <__retarget_lock_init_recursive>
 8005674:	f7ff ff96 	bl	80055a4 <__sfp_lock_release>
 8005678:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800567c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005680:	6025      	str	r5, [r4, #0]
 8005682:	61a5      	str	r5, [r4, #24]
 8005684:	2208      	movs	r2, #8
 8005686:	4629      	mov	r1, r5
 8005688:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800568c:	f7ff fd44 	bl	8005118 <memset>
 8005690:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005694:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005698:	4620      	mov	r0, r4
 800569a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800569c:	3468      	adds	r4, #104	; 0x68
 800569e:	e7d9      	b.n	8005654 <__sfp+0x1c>
 80056a0:	2104      	movs	r1, #4
 80056a2:	4638      	mov	r0, r7
 80056a4:	f7ff ff62 	bl	800556c <__sfmoreglue>
 80056a8:	4604      	mov	r4, r0
 80056aa:	6030      	str	r0, [r6, #0]
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d1d5      	bne.n	800565c <__sfp+0x24>
 80056b0:	f7ff ff78 	bl	80055a4 <__sfp_lock_release>
 80056b4:	230c      	movs	r3, #12
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	e7ee      	b.n	8005698 <__sfp+0x60>
 80056ba:	bf00      	nop
 80056bc:	08005be0 	.word	0x08005be0
 80056c0:	ffff0001 	.word	0xffff0001

080056c4 <_fwalk_reent>:
 80056c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c8:	4606      	mov	r6, r0
 80056ca:	4688      	mov	r8, r1
 80056cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056d0:	2700      	movs	r7, #0
 80056d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056d6:	f1b9 0901 	subs.w	r9, r9, #1
 80056da:	d505      	bpl.n	80056e8 <_fwalk_reent+0x24>
 80056dc:	6824      	ldr	r4, [r4, #0]
 80056de:	2c00      	cmp	r4, #0
 80056e0:	d1f7      	bne.n	80056d2 <_fwalk_reent+0xe>
 80056e2:	4638      	mov	r0, r7
 80056e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e8:	89ab      	ldrh	r3, [r5, #12]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d907      	bls.n	80056fe <_fwalk_reent+0x3a>
 80056ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056f2:	3301      	adds	r3, #1
 80056f4:	d003      	beq.n	80056fe <_fwalk_reent+0x3a>
 80056f6:	4629      	mov	r1, r5
 80056f8:	4630      	mov	r0, r6
 80056fa:	47c0      	blx	r8
 80056fc:	4307      	orrs	r7, r0
 80056fe:	3568      	adds	r5, #104	; 0x68
 8005700:	e7e9      	b.n	80056d6 <_fwalk_reent+0x12>

08005702 <__retarget_lock_init_recursive>:
 8005702:	4770      	bx	lr

08005704 <__retarget_lock_acquire_recursive>:
 8005704:	4770      	bx	lr

08005706 <__retarget_lock_release_recursive>:
 8005706:	4770      	bx	lr

08005708 <__swhatbuf_r>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	460e      	mov	r6, r1
 800570c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005710:	2900      	cmp	r1, #0
 8005712:	b096      	sub	sp, #88	; 0x58
 8005714:	4614      	mov	r4, r2
 8005716:	461d      	mov	r5, r3
 8005718:	da08      	bge.n	800572c <__swhatbuf_r+0x24>
 800571a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	602a      	str	r2, [r5, #0]
 8005722:	061a      	lsls	r2, r3, #24
 8005724:	d410      	bmi.n	8005748 <__swhatbuf_r+0x40>
 8005726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800572a:	e00e      	b.n	800574a <__swhatbuf_r+0x42>
 800572c:	466a      	mov	r2, sp
 800572e:	f000 f9a7 	bl	8005a80 <_fstat_r>
 8005732:	2800      	cmp	r0, #0
 8005734:	dbf1      	blt.n	800571a <__swhatbuf_r+0x12>
 8005736:	9a01      	ldr	r2, [sp, #4]
 8005738:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800573c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005740:	425a      	negs	r2, r3
 8005742:	415a      	adcs	r2, r3
 8005744:	602a      	str	r2, [r5, #0]
 8005746:	e7ee      	b.n	8005726 <__swhatbuf_r+0x1e>
 8005748:	2340      	movs	r3, #64	; 0x40
 800574a:	2000      	movs	r0, #0
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	b016      	add	sp, #88	; 0x58
 8005750:	bd70      	pop	{r4, r5, r6, pc}
	...

08005754 <__smakebuf_r>:
 8005754:	898b      	ldrh	r3, [r1, #12]
 8005756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005758:	079d      	lsls	r5, r3, #30
 800575a:	4606      	mov	r6, r0
 800575c:	460c      	mov	r4, r1
 800575e:	d507      	bpl.n	8005770 <__smakebuf_r+0x1c>
 8005760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	6123      	str	r3, [r4, #16]
 8005768:	2301      	movs	r3, #1
 800576a:	6163      	str	r3, [r4, #20]
 800576c:	b002      	add	sp, #8
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	ab01      	add	r3, sp, #4
 8005772:	466a      	mov	r2, sp
 8005774:	f7ff ffc8 	bl	8005708 <__swhatbuf_r>
 8005778:	9900      	ldr	r1, [sp, #0]
 800577a:	4605      	mov	r5, r0
 800577c:	4630      	mov	r0, r6
 800577e:	f000 f895 	bl	80058ac <_malloc_r>
 8005782:	b948      	cbnz	r0, 8005798 <__smakebuf_r+0x44>
 8005784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005788:	059a      	lsls	r2, r3, #22
 800578a:	d4ef      	bmi.n	800576c <__smakebuf_r+0x18>
 800578c:	f023 0303 	bic.w	r3, r3, #3
 8005790:	f043 0302 	orr.w	r3, r3, #2
 8005794:	81a3      	strh	r3, [r4, #12]
 8005796:	e7e3      	b.n	8005760 <__smakebuf_r+0xc>
 8005798:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <__smakebuf_r+0x7c>)
 800579a:	62b3      	str	r3, [r6, #40]	; 0x28
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	6020      	str	r0, [r4, #0]
 80057a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a4:	81a3      	strh	r3, [r4, #12]
 80057a6:	9b00      	ldr	r3, [sp, #0]
 80057a8:	6163      	str	r3, [r4, #20]
 80057aa:	9b01      	ldr	r3, [sp, #4]
 80057ac:	6120      	str	r0, [r4, #16]
 80057ae:	b15b      	cbz	r3, 80057c8 <__smakebuf_r+0x74>
 80057b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057b4:	4630      	mov	r0, r6
 80057b6:	f000 f975 	bl	8005aa4 <_isatty_r>
 80057ba:	b128      	cbz	r0, 80057c8 <__smakebuf_r+0x74>
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	81a3      	strh	r3, [r4, #12]
 80057c8:	89a0      	ldrh	r0, [r4, #12]
 80057ca:	4305      	orrs	r5, r0
 80057cc:	81a5      	strh	r5, [r4, #12]
 80057ce:	e7cd      	b.n	800576c <__smakebuf_r+0x18>
 80057d0:	08005561 	.word	0x08005561

080057d4 <_free_r>:
 80057d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057d6:	2900      	cmp	r1, #0
 80057d8:	d044      	beq.n	8005864 <_free_r+0x90>
 80057da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057de:	9001      	str	r0, [sp, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f1a1 0404 	sub.w	r4, r1, #4
 80057e6:	bfb8      	it	lt
 80057e8:	18e4      	addlt	r4, r4, r3
 80057ea:	f000 f97d 	bl	8005ae8 <__malloc_lock>
 80057ee:	4a1e      	ldr	r2, [pc, #120]	; (8005868 <_free_r+0x94>)
 80057f0:	9801      	ldr	r0, [sp, #4]
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	b933      	cbnz	r3, 8005804 <_free_r+0x30>
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	6014      	str	r4, [r2, #0]
 80057fa:	b003      	add	sp, #12
 80057fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005800:	f000 b978 	b.w	8005af4 <__malloc_unlock>
 8005804:	42a3      	cmp	r3, r4
 8005806:	d908      	bls.n	800581a <_free_r+0x46>
 8005808:	6825      	ldr	r5, [r4, #0]
 800580a:	1961      	adds	r1, r4, r5
 800580c:	428b      	cmp	r3, r1
 800580e:	bf01      	itttt	eq
 8005810:	6819      	ldreq	r1, [r3, #0]
 8005812:	685b      	ldreq	r3, [r3, #4]
 8005814:	1949      	addeq	r1, r1, r5
 8005816:	6021      	streq	r1, [r4, #0]
 8005818:	e7ed      	b.n	80057f6 <_free_r+0x22>
 800581a:	461a      	mov	r2, r3
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b10b      	cbz	r3, 8005824 <_free_r+0x50>
 8005820:	42a3      	cmp	r3, r4
 8005822:	d9fa      	bls.n	800581a <_free_r+0x46>
 8005824:	6811      	ldr	r1, [r2, #0]
 8005826:	1855      	adds	r5, r2, r1
 8005828:	42a5      	cmp	r5, r4
 800582a:	d10b      	bne.n	8005844 <_free_r+0x70>
 800582c:	6824      	ldr	r4, [r4, #0]
 800582e:	4421      	add	r1, r4
 8005830:	1854      	adds	r4, r2, r1
 8005832:	42a3      	cmp	r3, r4
 8005834:	6011      	str	r1, [r2, #0]
 8005836:	d1e0      	bne.n	80057fa <_free_r+0x26>
 8005838:	681c      	ldr	r4, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	6053      	str	r3, [r2, #4]
 800583e:	4421      	add	r1, r4
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	e7da      	b.n	80057fa <_free_r+0x26>
 8005844:	d902      	bls.n	800584c <_free_r+0x78>
 8005846:	230c      	movs	r3, #12
 8005848:	6003      	str	r3, [r0, #0]
 800584a:	e7d6      	b.n	80057fa <_free_r+0x26>
 800584c:	6825      	ldr	r5, [r4, #0]
 800584e:	1961      	adds	r1, r4, r5
 8005850:	428b      	cmp	r3, r1
 8005852:	bf04      	itt	eq
 8005854:	6819      	ldreq	r1, [r3, #0]
 8005856:	685b      	ldreq	r3, [r3, #4]
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	bf04      	itt	eq
 800585c:	1949      	addeq	r1, r1, r5
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	6054      	str	r4, [r2, #4]
 8005862:	e7ca      	b.n	80057fa <_free_r+0x26>
 8005864:	b003      	add	sp, #12
 8005866:	bd30      	pop	{r4, r5, pc}
 8005868:	20001bf8 	.word	0x20001bf8

0800586c <sbrk_aligned>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4e0e      	ldr	r6, [pc, #56]	; (80058a8 <sbrk_aligned+0x3c>)
 8005870:	460c      	mov	r4, r1
 8005872:	6831      	ldr	r1, [r6, #0]
 8005874:	4605      	mov	r5, r0
 8005876:	b911      	cbnz	r1, 800587e <sbrk_aligned+0x12>
 8005878:	f000 f88c 	bl	8005994 <_sbrk_r>
 800587c:	6030      	str	r0, [r6, #0]
 800587e:	4621      	mov	r1, r4
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f887 	bl	8005994 <_sbrk_r>
 8005886:	1c43      	adds	r3, r0, #1
 8005888:	d00a      	beq.n	80058a0 <sbrk_aligned+0x34>
 800588a:	1cc4      	adds	r4, r0, #3
 800588c:	f024 0403 	bic.w	r4, r4, #3
 8005890:	42a0      	cmp	r0, r4
 8005892:	d007      	beq.n	80058a4 <sbrk_aligned+0x38>
 8005894:	1a21      	subs	r1, r4, r0
 8005896:	4628      	mov	r0, r5
 8005898:	f000 f87c 	bl	8005994 <_sbrk_r>
 800589c:	3001      	adds	r0, #1
 800589e:	d101      	bne.n	80058a4 <sbrk_aligned+0x38>
 80058a0:	f04f 34ff 	mov.w	r4, #4294967295
 80058a4:	4620      	mov	r0, r4
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	20001bfc 	.word	0x20001bfc

080058ac <_malloc_r>:
 80058ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b0:	1ccd      	adds	r5, r1, #3
 80058b2:	f025 0503 	bic.w	r5, r5, #3
 80058b6:	3508      	adds	r5, #8
 80058b8:	2d0c      	cmp	r5, #12
 80058ba:	bf38      	it	cc
 80058bc:	250c      	movcc	r5, #12
 80058be:	2d00      	cmp	r5, #0
 80058c0:	4607      	mov	r7, r0
 80058c2:	db01      	blt.n	80058c8 <_malloc_r+0x1c>
 80058c4:	42a9      	cmp	r1, r5
 80058c6:	d905      	bls.n	80058d4 <_malloc_r+0x28>
 80058c8:	230c      	movs	r3, #12
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	2600      	movs	r6, #0
 80058ce:	4630      	mov	r0, r6
 80058d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d4:	4e2e      	ldr	r6, [pc, #184]	; (8005990 <_malloc_r+0xe4>)
 80058d6:	f000 f907 	bl	8005ae8 <__malloc_lock>
 80058da:	6833      	ldr	r3, [r6, #0]
 80058dc:	461c      	mov	r4, r3
 80058de:	bb34      	cbnz	r4, 800592e <_malloc_r+0x82>
 80058e0:	4629      	mov	r1, r5
 80058e2:	4638      	mov	r0, r7
 80058e4:	f7ff ffc2 	bl	800586c <sbrk_aligned>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	4604      	mov	r4, r0
 80058ec:	d14d      	bne.n	800598a <_malloc_r+0xde>
 80058ee:	6834      	ldr	r4, [r6, #0]
 80058f0:	4626      	mov	r6, r4
 80058f2:	2e00      	cmp	r6, #0
 80058f4:	d140      	bne.n	8005978 <_malloc_r+0xcc>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	4631      	mov	r1, r6
 80058fa:	4638      	mov	r0, r7
 80058fc:	eb04 0803 	add.w	r8, r4, r3
 8005900:	f000 f848 	bl	8005994 <_sbrk_r>
 8005904:	4580      	cmp	r8, r0
 8005906:	d13a      	bne.n	800597e <_malloc_r+0xd2>
 8005908:	6821      	ldr	r1, [r4, #0]
 800590a:	3503      	adds	r5, #3
 800590c:	1a6d      	subs	r5, r5, r1
 800590e:	f025 0503 	bic.w	r5, r5, #3
 8005912:	3508      	adds	r5, #8
 8005914:	2d0c      	cmp	r5, #12
 8005916:	bf38      	it	cc
 8005918:	250c      	movcc	r5, #12
 800591a:	4629      	mov	r1, r5
 800591c:	4638      	mov	r0, r7
 800591e:	f7ff ffa5 	bl	800586c <sbrk_aligned>
 8005922:	3001      	adds	r0, #1
 8005924:	d02b      	beq.n	800597e <_malloc_r+0xd2>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	442b      	add	r3, r5
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	e00e      	b.n	800594c <_malloc_r+0xa0>
 800592e:	6822      	ldr	r2, [r4, #0]
 8005930:	1b52      	subs	r2, r2, r5
 8005932:	d41e      	bmi.n	8005972 <_malloc_r+0xc6>
 8005934:	2a0b      	cmp	r2, #11
 8005936:	d916      	bls.n	8005966 <_malloc_r+0xba>
 8005938:	1961      	adds	r1, r4, r5
 800593a:	42a3      	cmp	r3, r4
 800593c:	6025      	str	r5, [r4, #0]
 800593e:	bf18      	it	ne
 8005940:	6059      	strne	r1, [r3, #4]
 8005942:	6863      	ldr	r3, [r4, #4]
 8005944:	bf08      	it	eq
 8005946:	6031      	streq	r1, [r6, #0]
 8005948:	5162      	str	r2, [r4, r5]
 800594a:	604b      	str	r3, [r1, #4]
 800594c:	4638      	mov	r0, r7
 800594e:	f104 060b 	add.w	r6, r4, #11
 8005952:	f000 f8cf 	bl	8005af4 <__malloc_unlock>
 8005956:	f026 0607 	bic.w	r6, r6, #7
 800595a:	1d23      	adds	r3, r4, #4
 800595c:	1af2      	subs	r2, r6, r3
 800595e:	d0b6      	beq.n	80058ce <_malloc_r+0x22>
 8005960:	1b9b      	subs	r3, r3, r6
 8005962:	50a3      	str	r3, [r4, r2]
 8005964:	e7b3      	b.n	80058ce <_malloc_r+0x22>
 8005966:	6862      	ldr	r2, [r4, #4]
 8005968:	42a3      	cmp	r3, r4
 800596a:	bf0c      	ite	eq
 800596c:	6032      	streq	r2, [r6, #0]
 800596e:	605a      	strne	r2, [r3, #4]
 8005970:	e7ec      	b.n	800594c <_malloc_r+0xa0>
 8005972:	4623      	mov	r3, r4
 8005974:	6864      	ldr	r4, [r4, #4]
 8005976:	e7b2      	b.n	80058de <_malloc_r+0x32>
 8005978:	4634      	mov	r4, r6
 800597a:	6876      	ldr	r6, [r6, #4]
 800597c:	e7b9      	b.n	80058f2 <_malloc_r+0x46>
 800597e:	230c      	movs	r3, #12
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	4638      	mov	r0, r7
 8005984:	f000 f8b6 	bl	8005af4 <__malloc_unlock>
 8005988:	e7a1      	b.n	80058ce <_malloc_r+0x22>
 800598a:	6025      	str	r5, [r4, #0]
 800598c:	e7de      	b.n	800594c <_malloc_r+0xa0>
 800598e:	bf00      	nop
 8005990:	20001bf8 	.word	0x20001bf8

08005994 <_sbrk_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4d06      	ldr	r5, [pc, #24]	; (80059b0 <_sbrk_r+0x1c>)
 8005998:	2300      	movs	r3, #0
 800599a:	4604      	mov	r4, r0
 800599c:	4608      	mov	r0, r1
 800599e:	602b      	str	r3, [r5, #0]
 80059a0:	f000 f8c0 	bl	8005b24 <_sbrk>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_sbrk_r+0x1a>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_sbrk_r+0x1a>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	20001c00 	.word	0x20001c00

080059b4 <__sread>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	460c      	mov	r4, r1
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	f000 f8a0 	bl	8005b00 <_read_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	bfab      	itete	ge
 80059c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059c6:	89a3      	ldrhlt	r3, [r4, #12]
 80059c8:	181b      	addge	r3, r3, r0
 80059ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ce:	bfac      	ite	ge
 80059d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80059d2:	81a3      	strhlt	r3, [r4, #12]
 80059d4:	bd10      	pop	{r4, pc}

080059d6 <__swrite>:
 80059d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059da:	461f      	mov	r7, r3
 80059dc:	898b      	ldrh	r3, [r1, #12]
 80059de:	05db      	lsls	r3, r3, #23
 80059e0:	4605      	mov	r5, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	4616      	mov	r6, r2
 80059e6:	d505      	bpl.n	80059f4 <__swrite+0x1e>
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	2302      	movs	r3, #2
 80059ee:	2200      	movs	r2, #0
 80059f0:	f000 f868 	bl	8005ac4 <_lseek_r>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	4632      	mov	r2, r6
 8005a02:	463b      	mov	r3, r7
 8005a04:	4628      	mov	r0, r5
 8005a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	f000 b817 	b.w	8005a3c <_write_r>

08005a0e <__sseek>:
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	460c      	mov	r4, r1
 8005a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a16:	f000 f855 	bl	8005ac4 <_lseek_r>
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	bf15      	itete	ne
 8005a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a2a:	81a3      	strheq	r3, [r4, #12]
 8005a2c:	bf18      	it	ne
 8005a2e:	81a3      	strhne	r3, [r4, #12]
 8005a30:	bd10      	pop	{r4, pc}

08005a32 <__sclose>:
 8005a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a36:	f000 b813 	b.w	8005a60 <_close_r>
	...

08005a3c <_write_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d07      	ldr	r5, [pc, #28]	; (8005a5c <_write_r+0x20>)
 8005a40:	4604      	mov	r4, r0
 8005a42:	4608      	mov	r0, r1
 8005a44:	4611      	mov	r1, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	602a      	str	r2, [r5, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f7fa fdb9 	bl	80005c2 <_write>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_write_r+0x1e>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_write_r+0x1e>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	20001c00 	.word	0x20001c00

08005a60 <_close_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d06      	ldr	r5, [pc, #24]	; (8005a7c <_close_r+0x1c>)
 8005a64:	2300      	movs	r3, #0
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	f7fa fdc5 	bl	80005fa <_close>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_close_r+0x1a>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_close_r+0x1a>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20001c00 	.word	0x20001c00

08005a80 <_fstat_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	; (8005aa0 <_fstat_r+0x20>)
 8005a84:	2300      	movs	r3, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	602b      	str	r3, [r5, #0]
 8005a8e:	f7fa fdc0 	bl	8000612 <_fstat>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	d102      	bne.n	8005a9c <_fstat_r+0x1c>
 8005a96:	682b      	ldr	r3, [r5, #0]
 8005a98:	b103      	cbz	r3, 8005a9c <_fstat_r+0x1c>
 8005a9a:	6023      	str	r3, [r4, #0]
 8005a9c:	bd38      	pop	{r3, r4, r5, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20001c00 	.word	0x20001c00

08005aa4 <_isatty_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d06      	ldr	r5, [pc, #24]	; (8005ac0 <_isatty_r+0x1c>)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	f7fa fdbf 	bl	8000632 <_isatty>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_isatty_r+0x1a>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_isatty_r+0x1a>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20001c00 	.word	0x20001c00

08005ac4 <_lseek_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d07      	ldr	r5, [pc, #28]	; (8005ae4 <_lseek_r+0x20>)
 8005ac8:	4604      	mov	r4, r0
 8005aca:	4608      	mov	r0, r1
 8005acc:	4611      	mov	r1, r2
 8005ace:	2200      	movs	r2, #0
 8005ad0:	602a      	str	r2, [r5, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f7fa fdb8 	bl	8000648 <_lseek>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_lseek_r+0x1e>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_lseek_r+0x1e>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	20001c00 	.word	0x20001c00

08005ae8 <__malloc_lock>:
 8005ae8:	4801      	ldr	r0, [pc, #4]	; (8005af0 <__malloc_lock+0x8>)
 8005aea:	f7ff be0b 	b.w	8005704 <__retarget_lock_acquire_recursive>
 8005aee:	bf00      	nop
 8005af0:	20001bf4 	.word	0x20001bf4

08005af4 <__malloc_unlock>:
 8005af4:	4801      	ldr	r0, [pc, #4]	; (8005afc <__malloc_unlock+0x8>)
 8005af6:	f7ff be06 	b.w	8005706 <__retarget_lock_release_recursive>
 8005afa:	bf00      	nop
 8005afc:	20001bf4 	.word	0x20001bf4

08005b00 <_read_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	; (8005b20 <_read_r+0x20>)
 8005b04:	4604      	mov	r4, r0
 8005b06:	4608      	mov	r0, r1
 8005b08:	4611      	mov	r1, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fa fd3a 	bl	8000588 <_read>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_read_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_read_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20001c00 	.word	0x20001c00

08005b24 <_sbrk>:
 8005b24:	4a04      	ldr	r2, [pc, #16]	; (8005b38 <_sbrk+0x14>)
 8005b26:	6811      	ldr	r1, [r2, #0]
 8005b28:	4603      	mov	r3, r0
 8005b2a:	b909      	cbnz	r1, 8005b30 <_sbrk+0xc>
 8005b2c:	4903      	ldr	r1, [pc, #12]	; (8005b3c <_sbrk+0x18>)
 8005b2e:	6011      	str	r1, [r2, #0]
 8005b30:	6810      	ldr	r0, [r2, #0]
 8005b32:	4403      	add	r3, r0
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	4770      	bx	lr
 8005b38:	20001c04 	.word	0x20001c04
 8005b3c:	20001c08 	.word	0x20001c08

08005b40 <_init>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	bf00      	nop
 8005b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b46:	bc08      	pop	{r3}
 8005b48:	469e      	mov	lr, r3
 8005b4a:	4770      	bx	lr

08005b4c <_fini>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr
