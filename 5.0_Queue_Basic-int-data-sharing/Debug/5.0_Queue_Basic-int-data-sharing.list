
5.0_Queue_Basic-int-data-sharing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a4  080060a4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080060a4  080060a4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060a4  080060a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080060ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001654  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200016cc  200016cc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f516  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026a4  00000000  00000000  0002f5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00031c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  00032b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219cd  00000000  00000000  00033970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e17  00000000  00000000  0005533d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8661  00000000  00000000  00066154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e7b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004658  00000000  00000000  0012e808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f10 	.word	0x08005f10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005f10 	.word	0x08005f10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fac1 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f835 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f875 	bl	800036c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
 queue = xQueueCreate(3,sizeof(int));
 8000282:	2200      	movs	r2, #0
 8000284:	2104      	movs	r1, #4
 8000286:	2003      	movs	r0, #3
 8000288:	f002 fb96 	bl	80029b8 <xQueueGenericCreate>
 800028c:	4603      	mov	r3, r0
 800028e:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <main+0x60>)
 8000290:	6013      	str	r3, [r2, #0]
 if (queue != NULL)
 8000292:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <main+0x60>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d002      	beq.n	80002a0 <main+0x30>
 {
	 printf("Queue Created Succesfully\n");
 800029a:	480e      	ldr	r0, [pc, #56]	; (80002d4 <main+0x64>)
 800029c:	f004 feac 	bl	8004ff8 <puts>
 }
 xTaskCreate(sender,"sender-task",100,NULL,3,NULL);
 80002a0:	2300      	movs	r3, #0
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2303      	movs	r3, #3
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2300      	movs	r3, #0
 80002aa:	2264      	movs	r2, #100	; 0x64
 80002ac:	490a      	ldr	r1, [pc, #40]	; (80002d8 <main+0x68>)
 80002ae:	480b      	ldr	r0, [pc, #44]	; (80002dc <main+0x6c>)
 80002b0:	f002 fffa 	bl	80032a8 <xTaskCreate>
 xTaskCreate(reciever,"reciever-task",100,NULL,2,NULL);
 80002b4:	2300      	movs	r3, #0
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2302      	movs	r3, #2
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2300      	movs	r3, #0
 80002be:	2264      	movs	r2, #100	; 0x64
 80002c0:	4907      	ldr	r1, [pc, #28]	; (80002e0 <main+0x70>)
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <main+0x74>)
 80002c4:	f002 fff0 	bl	80032a8 <xTaskCreate>
 vTaskStartScheduler();
 80002c8:	f003 f968 	bl	800359c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <main+0x5c>
 80002ce:	bf00      	nop
 80002d0:	20000094 	.word	0x20000094
 80002d4:	08005f28 	.word	0x08005f28
 80002d8:	08005f44 	.word	0x08005f44
 80002dc:	0800045d 	.word	0x0800045d
 80002e0:	08005f50 	.word	0x08005f50
 80002e4:	080004ad 	.word	0x080004ad

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f004 fdf0 	bl	8004edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	2310      	movs	r3, #16
 8000314:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2302      	movs	r3, #2
 8000318:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800031e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000322:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	f107 0318 	add.w	r3, r7, #24
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fd09 	bl	8000d40 <HAL_RCC_OscConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000334:	f000 f8ee 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	230f      	movs	r3, #15
 800033a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033c:	2302      	movs	r3, #2
 800033e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2102      	movs	r1, #2
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fd32 	bl	8001dbc <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800035e:	f000 f8d9 	bl	8000514 <Error_Handler>
  }
}
 8000362:	bf00      	nop
 8000364:	3740      	adds	r7, #64	; 0x40
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	; 0x28
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b34      	ldr	r3, [pc, #208]	; (8000454 <MX_GPIO_Init+0xe8>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a33      	ldr	r2, [pc, #204]	; (8000454 <MX_GPIO_Init+0xe8>)
 8000388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b31      	ldr	r3, [pc, #196]	; (8000454 <MX_GPIO_Init+0xe8>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <MX_GPIO_Init+0xe8>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a2d      	ldr	r2, [pc, #180]	; (8000454 <MX_GPIO_Init+0xe8>)
 80003a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <MX_GPIO_Init+0xe8>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <MX_GPIO_Init+0xe8>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a27      	ldr	r2, [pc, #156]	; (8000454 <MX_GPIO_Init+0xe8>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b25      	ldr	r3, [pc, #148]	; (8000454 <MX_GPIO_Init+0xe8>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b22      	ldr	r3, [pc, #136]	; (8000454 <MX_GPIO_Init+0xe8>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a21      	ldr	r2, [pc, #132]	; (8000454 <MX_GPIO_Init+0xe8>)
 80003d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_GPIO_Init+0xe8>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2120      	movs	r1, #32
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f000 fc91 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003fe:	f107 0314 	add.w	r3, r7, #20
 8000402:	4619      	mov	r1, r3
 8000404:	4814      	ldr	r0, [pc, #80]	; (8000458 <MX_GPIO_Init+0xec>)
 8000406:	f000 fb11 	bl	8000a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800040a:	230c      	movs	r3, #12
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800040e:	2302      	movs	r3, #2
 8000410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000416:	2303      	movs	r3, #3
 8000418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800041a:	2307      	movs	r3, #7
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	4619      	mov	r1, r3
 8000424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000428:	f000 fb00 	bl	8000a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800042c:	2320      	movs	r3, #32
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	2301      	movs	r3, #1
 8000432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	2300      	movs	r3, #0
 800043a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4619      	mov	r1, r3
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f000 faf1 	bl	8000a2c <HAL_GPIO_Init>

}
 800044a:	bf00      	nop
 800044c:	3728      	adds	r7, #40	; 0x28
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	48000800 	.word	0x48000800

0800045c <sender>:

/* USER CODE BEGIN 4 */

void sender (void *p)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	int senditem=1;
 8000464:	2301      	movs	r3, #1
 8000466:	60fb      	str	r3, [r7, #12]
	while(1)
	{
	 printf("Send %d to Reciever task\n",senditem);
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	4619      	mov	r1, r3
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <sender+0x44>)
 800046e:	f004 fd3d 	bl	8004eec <iprintf>
     if(!xQueueSend(queue,&senditem,0))
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <sender+0x48>)
 8000474:	6818      	ldr	r0, [r3, #0]
 8000476:	f107 010c 	add.w	r1, r7, #12
 800047a:	2300      	movs	r3, #0
 800047c:	2200      	movs	r2, #0
 800047e:	f002 fb1d 	bl	8002abc <xQueueGenericSend>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <sender+0x32>
     {
    	 printf("failed to send Queue\n");
 8000488:	4807      	ldr	r0, [pc, #28]	; (80004a8 <sender+0x4c>)
 800048a:	f004 fdb5 	bl	8004ff8 <puts>

     }

     senditem++;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3301      	adds	r3, #1
 8000492:	60fb      	str	r3, [r7, #12]
     vTaskDelay(3000);
 8000494:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000498:	f003 f84c 	bl	8003534 <vTaskDelay>
	 printf("Send %d to Reciever task\n",senditem);
 800049c:	e7e4      	b.n	8000468 <sender+0xc>
 800049e:	bf00      	nop
 80004a0:	08005f60 	.word	0x08005f60
 80004a4:	20000094 	.word	0x20000094
 80004a8:	08005f7c 	.word	0x08005f7c

080004ac <reciever>:
	}
}

void reciever (void *p)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]

	int recieveitem = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
	while(1)
	{

      if(xQueueReceive(queue, &recieveitem, 1000)) // I will be waiting 1 second(1000) till i recieve an item, after that the else part will be executed
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <reciever+0x38>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f107 010c 	add.w	r1, r7, #12
 80004c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004c4:	4618      	mov	r0, r3
 80004c6:	f002 fca1 	bl	8002e0c <xQueueReceive>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d005      	beq.n	80004dc <reciever+0x30>

      {
    	  printf("Recieved %d\n",recieveitem);
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <reciever+0x3c>)
 80004d6:	f004 fd09 	bl	8004eec <iprintf>
 80004da:	e7ed      	b.n	80004b8 <reciever+0xc>
      }
      else
      {
    	  printf("failed to Recieve Queue\n");
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <reciever+0x40>)
 80004de:	f004 fd8b 	bl	8004ff8 <puts>
      if(xQueueReceive(queue, &recieveitem, 1000)) // I will be waiting 1 second(1000) till i recieve an item, after that the else part will be executed
 80004e2:	e7e9      	b.n	80004b8 <reciever+0xc>
 80004e4:	20000094 	.word	0x20000094
 80004e8:	08005f94 	.word	0x08005f94
 80004ec:	08005fa4 	.word	0x08005fa4

080004f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000502:	f000 f991 	bl	8000828 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40001000 	.word	0x40001000

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x44>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_MspInit+0x44>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x44>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x44>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_MspInit+0x44>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_MspInit+0x44>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority ,0);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	2036      	movs	r0, #54	; 0x36
 800057e:	f000 fa2b 	bl	80009d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000582:	2036      	movs	r0, #54	; 0x36
 8000584:	f000 fa44 	bl	8000a10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <HAL_InitTick+0xa0>)
 800058a:	69db      	ldr	r3, [r3, #28]
 800058c:	4a1e      	ldr	r2, [pc, #120]	; (8000608 <HAL_InitTick+0xa0>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	61d3      	str	r3, [r2, #28]
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <HAL_InitTick+0xa0>)
 8000596:	69db      	ldr	r3, [r3, #28]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005a0:	f107 0210 	add.w	r2, r7, #16
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fe1a 	bl	80021e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005b0:	f001 fdf6 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 80005b4:	4603      	mov	r3, r0
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005bc:	4a13      	ldr	r2, [pc, #76]	; (800060c <HAL_InitTick+0xa4>)
 80005be:	fba2 2303 	umull	r2, r3, r2, r3
 80005c2:	0c9b      	lsrs	r3, r3, #18
 80005c4:	3b01      	subs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <HAL_InitTick+0xa8>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <HAL_InitTick+0xac>)
 80005cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_InitTick+0xa8>)
 80005d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_InitTick+0xa8>)
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_InitTick+0xa8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_InitTick+0xa8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <HAL_InitTick+0xa8>)
 80005ea:	f001 fe2d 	bl	8002248 <HAL_TIM_Base_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d104      	bne.n	80005fe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80005f4:	4806      	ldr	r0, [pc, #24]	; (8000610 <HAL_InitTick+0xa8>)
 80005f6:	f001 fe89 	bl	800230c <HAL_TIM_Base_Start_IT>
 80005fa:	4603      	mov	r3, r0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3730      	adds	r7, #48	; 0x30
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	431bde83 	.word	0x431bde83
 8000610:	20000098 	.word	0x20000098
 8000614:	40001000 	.word	0x40001000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <TIM6_DAC1_IRQHandler+0x10>)
 800064a:	f001 febb 	bl	80023c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000098 	.word	0x20000098

08000658 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <ITM_SendChar+0x48>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <ITM_SendChar+0x48>)
 8000668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800066c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <ITM_SendChar+0x4c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <ITM_SendChar+0x4c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800067a:	bf00      	nop
 800067c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f8      	beq.n	800067c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800068a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	6013      	str	r3, [r2, #0]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000edfc 	.word	0xe000edfc
 80006a4:	e0000e00 	.word	0xe0000e00

080006a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e00a      	b.n	80006d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006ba:	f3af 8000 	nop.w
 80006be:	4601      	mov	r1, r0
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	60ba      	str	r2, [r7, #8]
 80006c6:	b2ca      	uxtb	r2, r1
 80006c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbf0      	blt.n	80006ba <_read+0x12>
	}

return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b086      	sub	sp, #24
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	e009      	b.n	8000708 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	60ba      	str	r2, [r7, #8]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ffab 	bl	8000658 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3301      	adds	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	dbf1      	blt.n	80006f4 <_write+0x12>
	}
	return len;
 8000710:	687b      	ldr	r3, [r7, #4]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <_close>:

int _close(int file)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
	return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000742:	605a      	str	r2, [r3, #4]
	return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <_isatty>:

int _isatty(int file)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	return 1;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
	return 0;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <SystemInit+0x20>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078e:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <SystemInit+0x20>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ac:	f7ff ffea 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	; (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	; (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d6:	f004 fb4f 	bl	8004e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f7ff fd49 	bl	8000270 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80007ec:	080060ac 	.word	0x080060ac
  ldr r2, =_sbss
 80007f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007f4:	200016cc 	.word	0x200016cc

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f8d8 	bl	80009c2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fea8 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fe82 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	200000e4 	.word	0x200000e4

08000850 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;  
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	200000e4 	.word	0x200000e4

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db0b      	blt.n	80008f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 021f 	and.w	r2, r3, #31
 80008e4:	4907      	ldr	r1, [pc, #28]	; (8000904 <__NVIC_EnableIRQ+0x38>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	095b      	lsrs	r3, r3, #5
 80008ec:	2001      	movs	r0, #1
 80008ee:	fa00 f202 	lsl.w	r2, r0, r2
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	; (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	; 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff ff4c 	bl	8000868 <__NVIC_SetPriorityGrouping>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ea:	f7ff ff61 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 80009ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	68b9      	ldr	r1, [r7, #8]
 80009f4:	6978      	ldr	r0, [r7, #20]
 80009f6:	f7ff ffb1 	bl	800095c <NVIC_EncodePriority>
 80009fa:	4602      	mov	r2, r0
 80009fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff80 	bl	8000908 <__NVIC_SetPriority>
}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff54 	bl	80008cc <__NVIC_EnableIRQ>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3a:	e14e      	b.n	8000cda <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 8140 	beq.w	8000cd4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d005      	beq.n	8000a6c <HAL_GPIO_Init+0x40>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	f003 0201 	and.w	r2, r3, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d017      	beq.n	8000b0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d123      	bne.n	8000b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	08da      	lsrs	r2, r3, #3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3208      	adds	r2, #8
 8000b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	08da      	lsrs	r2, r3, #3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3208      	adds	r2, #8
 8000b58:	6939      	ldr	r1, [r7, #16]
 8000b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0203 	and.w	r2, r3, #3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 809a 	beq.w	8000cd4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	4b55      	ldr	r3, [pc, #340]	; (8000cf8 <HAL_GPIO_Init+0x2cc>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a54      	ldr	r2, [pc, #336]	; (8000cf8 <HAL_GPIO_Init+0x2cc>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b52      	ldr	r3, [pc, #328]	; (8000cf8 <HAL_GPIO_Init+0x2cc>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb8:	4a50      	ldr	r2, [pc, #320]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	220f      	movs	r2, #15
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000be2:	d013      	beq.n	8000c0c <HAL_GPIO_Init+0x1e0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a46      	ldr	r2, [pc, #280]	; (8000d00 <HAL_GPIO_Init+0x2d4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d00d      	beq.n	8000c08 <HAL_GPIO_Init+0x1dc>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a45      	ldr	r2, [pc, #276]	; (8000d04 <HAL_GPIO_Init+0x2d8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d007      	beq.n	8000c04 <HAL_GPIO_Init+0x1d8>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a44      	ldr	r2, [pc, #272]	; (8000d08 <HAL_GPIO_Init+0x2dc>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d101      	bne.n	8000c00 <HAL_GPIO_Init+0x1d4>
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e006      	b.n	8000c0e <HAL_GPIO_Init+0x1e2>
 8000c00:	2305      	movs	r3, #5
 8000c02:	e004      	b.n	8000c0e <HAL_GPIO_Init+0x1e2>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x1e2>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_GPIO_Init+0x1e2>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	f002 0203 	and.w	r2, r2, #3
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4093      	lsls	r3, r2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c1e:	4937      	ldr	r1, [pc, #220]	; (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2c:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c50:	4a2e      	ldr	r2, [pc, #184]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c7a:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f47f aea9 	bne.w	8000a3c <HAL_GPIO_Init+0x10>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d20:	787b      	ldrb	r3, [r7, #1]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	f001 b823 	b.w	8001dac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 817d 	beq.w	8001076 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d7c:	4bbc      	ldr	r3, [pc, #752]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d00c      	beq.n	8000da2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d88:	4bb9      	ldr	r3, [pc, #740]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d15c      	bne.n	8000e4e <HAL_RCC_OscConfig+0x10e>
 8000d94:	4bb6      	ldr	r3, [pc, #728]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da0:	d155      	bne.n	8000e4e <HAL_RCC_OscConfig+0x10e>
 8000da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000daa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dae:	fa93 f3a3 	rbit	r3, r3
 8000db2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000db6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dba:	fab3 f383 	clz	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	095b      	lsrs	r3, r3, #5
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d102      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x94>
 8000dce:	4ba8      	ldr	r3, [pc, #672]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	e015      	b.n	8000e00 <HAL_RCC_OscConfig+0xc0>
 8000dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ddc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000de0:	fa93 f3a3 	rbit	r3, r3
 8000de4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000df0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000df4:	fa93 f3a3 	rbit	r3, r3
 8000df8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000dfc:	4b9c      	ldr	r3, [pc, #624]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e0c:	fa92 f2a2 	rbit	r2, r2
 8000e10:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e14:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	f042 0220 	orr.w	r2, r2, #32
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	f002 021f 	and.w	r2, r2, #31
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 811f 	beq.w	8001074 <HAL_RCC_OscConfig+0x334>
 8000e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8116 	bne.w	8001074 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f000 bfaf 	b.w	8001dac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5e:	d106      	bne.n	8000e6e <HAL_RCC_OscConfig+0x12e>
 8000e60:	4b83      	ldr	r3, [pc, #524]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a82      	ldr	r2, [pc, #520]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e036      	b.n	8000edc <HAL_RCC_OscConfig+0x19c>
 8000e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0x158>
 8000e7e:	4b7c      	ldr	r3, [pc, #496]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a7b      	ldr	r2, [pc, #492]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b79      	ldr	r3, [pc, #484]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a78      	ldr	r2, [pc, #480]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e021      	b.n	8000edc <HAL_RCC_OscConfig+0x19c>
 8000e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x184>
 8000eaa:	4b71      	ldr	r3, [pc, #452]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a70      	ldr	r2, [pc, #448]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b6e      	ldr	r3, [pc, #440]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a6d      	ldr	r2, [pc, #436]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e00b      	b.n	8000edc <HAL_RCC_OscConfig+0x19c>
 8000ec4:	4b6a      	ldr	r3, [pc, #424]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a69      	ldr	r2, [pc, #420]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b67      	ldr	r3, [pc, #412]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a66      	ldr	r2, [pc, #408]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000edc:	4b64      	ldr	r3, [pc, #400]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	f023 020f 	bic.w	r2, r3, #15
 8000ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	495f      	ldr	r1, [pc, #380]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d059      	beq.n	8000fba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fca3 	bl	8000850 <HAL_GetTick>
 8000f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0e:	e00a      	b.n	8000f26 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fc9e 	bl	8000850 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b64      	cmp	r3, #100	; 0x64
 8000f1e:	d902      	bls.n	8000f26 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	f000 bf43 	b.w	8001dac <HAL_RCC_OscConfig+0x106c>
 8000f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	fab3 f383 	clz	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	095b      	lsrs	r3, r3, #5
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <HAL_RCC_OscConfig+0x218>
 8000f52:	4b47      	ldr	r3, [pc, #284]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	e015      	b.n	8000f84 <HAL_RCC_OscConfig+0x244>
 8000f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f70:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f74:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f88:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f8c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f90:	fa92 f2a2 	rbit	r2, r2
 8000f94:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f98:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	f042 0220 	orr.w	r2, r2, #32
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	f002 021f 	and.w	r2, r2, #31
 8000fac:	2101      	movs	r1, #1
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0ab      	beq.n	8000f10 <HAL_RCC_OscConfig+0x1d0>
 8000fb8:	e05d      	b.n	8001076 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fc49 	bl	8000850 <HAL_GetTick>
 8000fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	e00a      	b.n	8000fda <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fc44 	bl	8000850 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d902      	bls.n	8000fda <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	f000 bee9 	b.w	8001dac <HAL_RCC_OscConfig+0x106c>
 8000fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fde:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fe6:	fa93 f3a3 	rbit	r3, r3
 8000fea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff2:	fab3 f383 	clz	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	095b      	lsrs	r3, r3, #5
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x2cc>
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	e015      	b.n	8001038 <HAL_RCC_OscConfig+0x2f8>
 800100c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001010:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001024:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001028:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_RCC_OscConfig+0x330>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800103c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001040:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001044:	fa92 f2a2 	rbit	r2, r2
 8001048:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800104c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001050:	fab2 f282 	clz	r2, r2
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	f042 0220 	orr.w	r2, r2, #32
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	f002 021f 	and.w	r2, r2, #31
 8001060:	2101      	movs	r1, #1
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	4013      	ands	r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1ab      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x284>
 800106c:	e003      	b.n	8001076 <HAL_RCC_OscConfig+0x336>
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 817d 	beq.w	8001386 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800108c:	4ba6      	ldr	r3, [pc, #664]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00b      	beq.n	80010b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001098:	4ba3      	ldr	r3, [pc, #652]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d172      	bne.n	800118a <HAL_RCC_OscConfig+0x44a>
 80010a4:	4ba0      	ldr	r3, [pc, #640]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d16c      	bne.n	800118a <HAL_RCC_OscConfig+0x44a>
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <HAL_RCC_OscConfig+0x3a0>
 80010da:	4b93      	ldr	r3, [pc, #588]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	e013      	b.n	8001108 <HAL_RCC_OscConfig+0x3c8>
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001104:	4b88      	ldr	r3, [pc, #544]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	2202      	movs	r2, #2
 800110a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800110e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001112:	fa92 f2a2 	rbit	r2, r2
 8001116:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800111a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800111e:	fab2 f282 	clz	r2, r2
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	f042 0220 	orr.w	r2, r2, #32
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	f002 021f 	and.w	r2, r2, #31
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <HAL_RCC_OscConfig+0x410>
 800113a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800113e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d002      	beq.n	8001150 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	f000 be2e 	b.w	8001dac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b75      	ldr	r3, [pc, #468]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	21f8      	movs	r1, #248	; 0xf8
 8001166:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800116e:	fa91 f1a1 	rbit	r1, r1
 8001172:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001176:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800117a:	fab1 f181 	clz	r1, r1
 800117e:	b2c9      	uxtb	r1, r1
 8001180:	408b      	lsls	r3, r1
 8001182:	4969      	ldr	r1, [pc, #420]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001188:	e0fd      	b.n	8001386 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8088 	beq.w	80012ac <HAL_RCC_OscConfig+0x56c>
 800119c:	2301      	movs	r3, #1
 800119e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	461a      	mov	r2, r3
 80011c4:	2301      	movs	r3, #1
 80011c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fb42 	bl	8000850 <HAL_GetTick>
 80011cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	e00a      	b.n	80011e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fb3d 	bl	8000850 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d902      	bls.n	80011e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	f000 bde2 	b.w	8001dac <HAL_RCC_OscConfig+0x106c>
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	095b      	lsrs	r3, r3, #5
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x4d8>
 8001212:	4b45      	ldr	r3, [pc, #276]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	e013      	b.n	8001240 <HAL_RCC_OscConfig+0x500>
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001230:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800123c:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	2202      	movs	r2, #2
 8001242:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001246:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800124a:	fa92 f2a2 	rbit	r2, r2
 800124e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001252:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001256:	fab2 f282 	clz	r2, r2
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	f042 0220 	orr.w	r2, r2, #32
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f002 021f 	and.w	r2, r2, #31
 8001266:	2101      	movs	r1, #1
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0af      	beq.n	80011d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	21f8      	movs	r1, #248	; 0xf8
 8001288:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001290:	fa91 f1a1 	rbit	r1, r1
 8001294:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001298:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800129c:	fab1 f181 	clz	r1, r1
 80012a0:	b2c9      	uxtb	r1, r1
 80012a2:	408b      	lsls	r3, r1
 80012a4:	4920      	ldr	r1, [pc, #128]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
 80012aa:	e06c      	b.n	8001386 <HAL_RCC_OscConfig+0x646>
 80012ac:	2301      	movs	r3, #1
 80012ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	461a      	mov	r2, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff faba 	bl	8000850 <HAL_GetTick>
 80012dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fab5 	bl	8000850 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d902      	bls.n	80012f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f000 bd5a 	b.w	8001dac <HAL_RCC_OscConfig+0x106c>
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001302:	fa93 f3a3 	rbit	r3, r3
 8001306:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800130a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d104      	bne.n	800132c <HAL_RCC_OscConfig+0x5ec>
 8001322:	4b01      	ldr	r3, [pc, #4]	; (8001328 <HAL_RCC_OscConfig+0x5e8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	e015      	b.n	8001354 <HAL_RCC_OscConfig+0x614>
 8001328:	40021000 	.word	0x40021000
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001344:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001350:	4bc8      	ldr	r3, [pc, #800]	; (8001674 <HAL_RCC_OscConfig+0x934>)
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2202      	movs	r2, #2
 8001356:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800135a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800135e:	fa92 f2a2 	rbit	r2, r2
 8001362:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001366:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800136a:	fab2 f282 	clz	r2, r2
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	f042 0220 	orr.w	r2, r2, #32
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	f002 021f 	and.w	r2, r2, #31
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1ad      	bne.n	80012e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8110 	beq.w	80015bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d079      	beq.n	80014a0 <HAL_RCC_OscConfig+0x760>
 80013ac:	2301      	movs	r3, #1
 80013ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	4bab      	ldr	r3, [pc, #684]	; (8001678 <HAL_RCC_OscConfig+0x938>)
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	461a      	mov	r2, r3
 80013d2:	2301      	movs	r3, #1
 80013d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fa3b 	bl	8000850 <HAL_GetTick>
 80013da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fa36 	bl	8000850 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d902      	bls.n	80013f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f000 bcdb 	b.w	8001dac <HAL_RCC_OscConfig+0x106c>
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001410:	2202      	movs	r2, #2
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001418:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	fa93 f2a3 	rbit	r2, r3
 8001422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001434:	2202      	movs	r2, #2
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fa93 f2a3 	rbit	r2, r3
 8001446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800144e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001450:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x934>)
 8001452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001458:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800145c:	2102      	movs	r1, #2
 800145e:	6019      	str	r1, [r3, #0]
 8001460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001464:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fa93 f1a3 	rbit	r1, r3
 800146e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001472:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001476:	6019      	str	r1, [r3, #0]
  return result;
 8001478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0a0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x6a0>
 800149e:	e08d      	b.n	80015bc <HAL_RCC_OscConfig+0x87c>
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f2a3 	rbit	r2, r3
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014c2:	601a      	str	r2, [r3, #0]
  return result;
 80014c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ce:	fab3 f383 	clz	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b68      	ldr	r3, [pc, #416]	; (8001678 <HAL_RCC_OscConfig+0x938>)
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	461a      	mov	r2, r3
 80014de:	2300      	movs	r3, #0
 80014e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff f9b5 	bl	8000850 <HAL_GetTick>
 80014e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff f9b0 	bl	8000850 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d902      	bls.n	8001502 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f000 bc55 	b.w	8001dac <HAL_RCC_OscConfig+0x106c>
 8001502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001506:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800150a:	2202      	movs	r2, #2
 800150c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	fa93 f2a3 	rbit	r2, r3
 800151c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001520:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	fa93 f2a3 	rbit	r2, r3
 8001540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001552:	2202      	movs	r2, #2
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800156c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_RCC_OscConfig+0x934>)
 8001570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800157a:	2102      	movs	r1, #2
 800157c:	6019      	str	r1, [r3, #0]
 800157e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001582:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fa93 f1a3 	rbit	r1, r3
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001594:	6019      	str	r1, [r3, #0]
  return result;
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	2101      	movs	r1, #1
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d197      	bne.n	80014ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 81a1 	beq.w	8001914 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <HAL_RCC_OscConfig+0x934>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d116      	bne.n	8001612 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_RCC_OscConfig+0x934>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_RCC_OscConfig+0x934>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	61d3      	str	r3, [r2, #28]
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_RCC_OscConfig+0x934>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800160a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800160c:	2301      	movs	r3, #1
 800160e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_RCC_OscConfig+0x93c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11a      	bne.n	8001654 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_RCC_OscConfig+0x93c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <HAL_RCC_OscConfig+0x93c>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7ff f911 	bl	8000850 <HAL_GetTick>
 800162e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	e009      	b.n	8001648 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001634:	f7ff f90c 	bl	8000850 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	; 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e3b1      	b.n	8001dac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_RCC_OscConfig+0x93c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ef      	beq.n	8001634 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d10d      	bne.n	8001680 <HAL_RCC_OscConfig+0x940>
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_RCC_OscConfig+0x934>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a02      	ldr	r2, [pc, #8]	; (8001674 <HAL_RCC_OscConfig+0x934>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	e03c      	b.n	80016ec <HAL_RCC_OscConfig+0x9ac>
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	10908120 	.word	0x10908120
 800167c:	40007000 	.word	0x40007000
 8001680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x96a>
 8001690:	4bc1      	ldr	r3, [pc, #772]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4ac0      	ldr	r2, [pc, #768]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	4bbe      	ldr	r3, [pc, #760]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4abd      	ldr	r2, [pc, #756]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	e020      	b.n	80016ec <HAL_RCC_OscConfig+0x9ac>
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x994>
 80016ba:	4bb7      	ldr	r3, [pc, #732]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4ab6      	ldr	r2, [pc, #728]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4bb4      	ldr	r3, [pc, #720]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4ab3      	ldr	r2, [pc, #716]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	e00b      	b.n	80016ec <HAL_RCC_OscConfig+0x9ac>
 80016d4:	4bb0      	ldr	r3, [pc, #704]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4aaf      	ldr	r2, [pc, #700]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	4bad      	ldr	r3, [pc, #692]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4aac      	ldr	r2, [pc, #688]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80016e6:	f023 0304 	bic.w	r3, r3, #4
 80016ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8081 	beq.w	8001800 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff f8a7 	bl	8000850 <HAL_GetTick>
 8001702:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff f8a2 	bl	8000850 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e345      	b.n	8001dac <HAL_RCC_OscConfig+0x106c>
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001728:	2202      	movs	r2, #2
 800172a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	fa93 f2a3 	rbit	r2, r3
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001748:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800174c:	2202      	movs	r2, #2
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f2a3 	rbit	r2, r3
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001766:	601a      	str	r2, [r3, #0]
  return result;
 8001768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001770:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d102      	bne.n	800178c <HAL_RCC_OscConfig+0xa4c>
 8001786:	4b84      	ldr	r3, [pc, #528]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	e013      	b.n	80017b4 <HAL_RCC_OscConfig+0xa74>
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001794:	2202      	movs	r2, #2
 8001796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4b79      	ldr	r3, [pc, #484]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017bc:	2102      	movs	r1, #2
 80017be:	6011      	str	r1, [r2, #0]
 80017c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	fa92 f1a2 	rbit	r1, r2
 80017ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017d6:	6011      	str	r1, [r2, #0]
  return result;
 80017d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	fab2 f282 	clz	r2, r2
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f002 021f 	and.w	r2, r2, #31
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d084      	beq.n	8001708 <HAL_RCC_OscConfig+0x9c8>
 80017fe:	e07f      	b.n	8001900 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff f826 	bl	8000850 <HAL_GetTick>
 8001804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	e00b      	b.n	8001822 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff f821 	bl	8000850 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e2c4      	b.n	8001dac <HAL_RCC_OscConfig+0x106c>
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800184e:	2202      	movs	r2, #2
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001868:	601a      	str	r2, [r3, #0]
  return result;
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001872:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d102      	bne.n	800188e <HAL_RCC_OscConfig+0xb4e>
 8001888:	4b43      	ldr	r3, [pc, #268]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	e013      	b.n	80018b6 <HAL_RCC_OscConfig+0xb76>
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001896:	2202      	movs	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fa93 f2a3 	rbit	r2, r3
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018be:	2102      	movs	r1, #2
 80018c0:	6011      	str	r1, [r2, #0]
 80018c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	fa92 f1a2 	rbit	r1, r2
 80018d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018d8:	6011      	str	r1, [r2, #0]
  return result;
 80018da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	fab2 f282 	clz	r2, r2
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	f002 021f 	and.w	r2, r2, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d184      	bne.n	800180a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001900:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b23      	ldr	r3, [pc, #140]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4a22      	ldr	r2, [pc, #136]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001912:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 8242 	beq.w	8001daa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_RCC_OscConfig+0xc58>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b08      	cmp	r3, #8
 8001930:	f000 8213 	beq.w	8001d5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b02      	cmp	r3, #2
 8001942:	f040 8162 	bne.w	8001c0a <HAL_RCC_OscConfig+0xeca>
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800194e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800196a:	601a      	str	r2, [r3, #0]
  return result;
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001974:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2300      	movs	r3, #0
 800198a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe ff60 	bl	8000850 <HAL_GetTick>
 8001990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001994:	e00c      	b.n	80019b0 <HAL_RCC_OscConfig+0xc70>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7fe ff58 	bl	8000850 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1fd      	b.n	8001dac <HAL_RCC_OscConfig+0x106c>
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019d4:	601a      	str	r2, [r3, #0]
  return result;
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_OscConfig+0xcba>
 80019f4:	4bb0      	ldr	r3, [pc, #704]	; (8001cb8 <HAL_RCC_OscConfig+0xf78>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e027      	b.n	8001a4a <HAL_RCC_OscConfig+0xd0a>
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	4b9c      	ldr	r3, [pc, #624]	; (8001cb8 <HAL_RCC_OscConfig+0xf78>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a4e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a56:	6011      	str	r1, [r2, #0]
 8001a58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a5c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	fa92 f1a2 	rbit	r1, r2
 8001a66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a6e:	6011      	str	r1, [r2, #0]
  return result;
 8001a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	fab2 f282 	clz	r2, r2
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f042 0220 	orr.w	r2, r2, #32
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	f002 021f 	and.w	r2, r2, #31
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d182      	bne.n	800199c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0xf78>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	497f      	ldr	r1, [pc, #508]	; (8001cb8 <HAL_RCC_OscConfig+0xf78>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fa93 f2a3 	rbit	r2, r3
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ae2:	601a      	str	r2, [r3, #0]
  return result;
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	461a      	mov	r2, r3
 8001b00:	2301      	movs	r3, #1
 8001b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe fea4 	bl	8000850 <HAL_GetTick>
 8001b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7fe fe9f 	bl	8000850 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e144      	b.n	8001dac <HAL_RCC_OscConfig+0x106c>
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b46:	601a      	str	r2, [r3, #0]
  return result;
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d102      	bne.n	8001b6c <HAL_RCC_OscConfig+0xe2c>
 8001b66:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <HAL_RCC_OscConfig+0xf78>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	e027      	b.n	8001bbc <HAL_RCC_OscConfig+0xe7c>
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	fa93 f2a3 	rbit	r2, r3
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0xf78>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bc8:	6011      	str	r1, [r2, #0]
 8001bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	fa92 f1a2 	rbit	r1, r2
 8001bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bdc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001be0:	6011      	str	r1, [r2, #0]
  return result;
 8001be2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	fab2 f282 	clz	r2, r2
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f042 0220 	orr.w	r2, r2, #32
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f002 021f 	and.w	r2, r2, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d082      	beq.n	8001b0e <HAL_RCC_OscConfig+0xdce>
 8001c08:	e0cf      	b.n	8001daa <HAL_RCC_OscConfig+0x106a>
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c2e:	601a      	str	r2, [r3, #0]
  return result;
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7fe fdfe 	bl	8000850 <HAL_GetTick>
 8001c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe fdf9 	bl	8000850 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e09e      	b.n	8001dac <HAL_RCC_OscConfig+0x106c>
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c92:	601a      	str	r2, [r3, #0]
  return result;
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d104      	bne.n	8001cbc <HAL_RCC_OscConfig+0xf7c>
 8001cb2:	4b01      	ldr	r3, [pc, #4]	; (8001cb8 <HAL_RCC_OscConfig+0xf78>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e029      	b.n	8001d0c <HAL_RCC_OscConfig+0xfcc>
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_OscConfig+0x1078>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d10:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d18:	6011      	str	r1, [r2, #0]
 8001d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d1e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	fa92 f1a2 	rbit	r1, r2
 8001d28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d30:	6011      	str	r1, [r2, #0]
  return result;
 8001d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d36:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d180      	bne.n	8001c5a <HAL_RCC_OscConfig+0xf1a>
 8001d58:	e027      	b.n	8001daa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e01e      	b.n	8001dac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_OscConfig+0x1078>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d7a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b09e      	sub	sp, #120	; 0x78
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e162      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b90      	ldr	r3, [pc, #576]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d910      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b8d      	ldr	r3, [pc, #564]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0207 	bic.w	r2, r3, #7
 8001dea:	498b      	ldr	r1, [pc, #556]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b89      	ldr	r3, [pc, #548]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e14a      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b82      	ldr	r3, [pc, #520]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	497f      	ldr	r1, [pc, #508]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80dc 	beq.w	8001fe8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d13c      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xf6>
 8001e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d102      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xa6>
 8001e5c:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	e00f      	b.n	8001e82 <HAL_RCC_ClockConfig+0xc6>
 8001e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e74:	663b      	str	r3, [r7, #96]	; 0x60
 8001e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e86:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d17b      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0f3      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d13c      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x178>
 8001eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ebe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x128>
 8001ede:	4b4f      	ldr	r3, [pc, #316]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e00f      	b.n	8001f04 <HAL_RCC_ClockConfig+0x148>
 8001ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f00:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f08:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f0c:	fa92 f2a2 	rbit	r2, r2
 8001f10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f002 021f 	and.w	r2, r2, #31
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d13a      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b2      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
 8001f34:	2302      	movs	r3, #2
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x1a0>
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	e00d      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1bc>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	2302      	movs	r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2202      	movs	r2, #2
 8001f7a:	61ba      	str	r2, [r7, #24]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	617a      	str	r2, [r7, #20]
  return result;
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f002 021f 	and.w	r2, r2, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e079      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	491a      	ldr	r1, [pc, #104]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fc4a 	bl	8000850 <HAL_GetTick>
 8001fbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7fe fc46 	bl	8000850 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e061      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d214      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4906      	ldr	r1, [pc, #24]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e040      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
 8002018:	40022000 	.word	0x40022000
 800201c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	491a      	ldr	r1, [pc, #104]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4912      	ldr	r1, [pc, #72]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800205e:	f000 f829 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002062:	4601      	mov	r1, r0
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800206c:	22f0      	movs	r2, #240	; 0xf0
 800206e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	fa92 f2a2 	rbit	r2, r2
 8002076:	60fa      	str	r2, [r7, #12]
  return result;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	fab2 f282 	clz	r2, r2
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	40d3      	lsrs	r3, r2
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	fa21 f303 	lsr.w	r3, r1, r3
 800208a:	4a08      	ldr	r2, [pc, #32]	; (80020ac <HAL_RCC_ClockConfig+0x2f0>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa68 	bl	8000568 <HAL_InitTick>
  
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3778      	adds	r7, #120	; 0x78
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08005fd4 	.word	0x08005fd4
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000004 	.word	0x20000004

080020b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b08b      	sub	sp, #44	; 0x2c
 80020b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x30>
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x36>
 80020e2:	e03c      	b.n	800215e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020e6:	623b      	str	r3, [r7, #32]
      break;
 80020e8:	e03c      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	fa92 f2a2 	rbit	r2, r2
 80020fc:	607a      	str	r2, [r7, #4]
  return result;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	40d3      	lsrs	r3, r2
 8002108:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_RCC_GetSysClockFreq+0xc8>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	220f      	movs	r2, #15
 8002118:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	fa92 f2a2 	rbit	r2, r2
 8002120:	60fa      	str	r2, [r7, #12]
  return result;
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	40d3      	lsrs	r3, r2
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_RCC_GetSysClockFreq+0xcc>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc4>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	fbb2 f2f3 	udiv	r2, r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
 800214c:	e004      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	623b      	str	r3, [r7, #32]
      break;
 800215c:	e002      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002160:	623b      	str	r3, [r7, #32]
      break;
 8002162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002164:	6a3b      	ldr	r3, [r7, #32]
}
 8002166:	4618      	mov	r0, r3
 8002168:	372c      	adds	r7, #44	; 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	007a1200 	.word	0x007a1200
 800217c:	08005fec 	.word	0x08005fec
 8002180:	08005ffc 	.word	0x08005ffc
 8002184:	003d0900 	.word	0x003d0900

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_RCC_GetHCLKFreq+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000000 	.word	0x20000000

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021a6:	f7ff ffef 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021aa:	4601      	mov	r1, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	fa92 f2a2 	rbit	r2, r2
 80021c0:	603a      	str	r2, [r7, #0]
  return result;
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	40d3      	lsrs	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08005fe4 	.word	0x08005fe4

080021e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	220f      	movs	r2, #15
 80021f2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_GetClockConfig+0x5c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0203 	and.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCC_GetClockConfig+0x5c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCC_GetClockConfig+0x5c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_GetClockConfig+0x5c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_RCC_GetClockConfig+0x60>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0207 	and.w	r2, r3, #7
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	40022000 	.word	0x40022000

08002248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e049      	b.n	80022ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f841 	bl	80022f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f000 f9e4 	bl	8002654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d001      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e040      	b.n	80023a6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00e      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x58>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234e:	d009      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x58>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_TIM_Base_Start_IT+0xac>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d004      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x58>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_TIM_Base_Start_IT+0xb0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d115      	bne.n	8002390 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_TIM_Base_Start_IT+0xb4>)
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b06      	cmp	r3, #6
 8002374:	d015      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x96>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237c:	d011      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	e008      	b.n	80023a2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e000      	b.n	80023a4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40014000 	.word	0x40014000
 80023c0:	00010007 	.word	0x00010007

080023c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d122      	bne.n	8002420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d11b      	bne.n	8002420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0202 	mvn.w	r2, #2
 80023f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f905 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8f7 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f908 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b04      	cmp	r3, #4
 800242c:	d122      	bne.n	8002474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b04      	cmp	r3, #4
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0204 	mvn.w	r2, #4
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8db 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8cd 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f8de 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b08      	cmp	r3, #8
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0208 	mvn.w	r2, #8
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f8b1 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f8a3 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f8b4 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0210 	mvn.w	r2, #16
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2208      	movs	r2, #8
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f887 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f879 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f88a 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0201 	mvn.w	r2, #1
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fd ffd4 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	2b80      	cmp	r3, #128	; 0x80
 8002554:	d10e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d107      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8f2 	bl	8002758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002582:	d10e      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	d107      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800259a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f8e5 	bl	800276c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d10e      	bne.n	80025ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d107      	bne.n	80025ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f838 	bl	800263e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d10e      	bne.n	80025fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d107      	bne.n	80025fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f06f 0220 	mvn.w	r2, #32
 80025f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f8a5 	bl	8002744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a32      	ldr	r2, [pc, #200]	; (8002730 <TIM_Base_SetConfig+0xdc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <TIM_Base_SetConfig+0x28>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x28>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a2f      	ldr	r2, [pc, #188]	; (8002734 <TIM_Base_SetConfig+0xe0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <TIM_Base_SetConfig+0xdc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d00f      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a24      	ldr	r2, [pc, #144]	; (8002734 <TIM_Base_SetConfig+0xe0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00b      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a23      	ldr	r2, [pc, #140]	; (8002738 <TIM_Base_SetConfig+0xe4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <TIM_Base_SetConfig+0xe8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d003      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a21      	ldr	r2, [pc, #132]	; (8002740 <TIM_Base_SetConfig+0xec>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d108      	bne.n	80026d0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <TIM_Base_SetConfig+0xdc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00b      	beq.n	8002714 <TIM_Base_SetConfig+0xc0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <TIM_Base_SetConfig+0xe4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <TIM_Base_SetConfig+0xc0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0d      	ldr	r2, [pc, #52]	; (800273c <TIM_Base_SetConfig+0xe8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d003      	beq.n	8002714 <TIM_Base_SetConfig+0xc0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <TIM_Base_SetConfig+0xec>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d103      	bne.n	800271c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	615a      	str	r2, [r3, #20]
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40012c00 	.word	0x40012c00
 8002734:	40000400 	.word	0x40000400
 8002738:	40014000 	.word	0x40014000
 800273c:	40014400 	.word	0x40014400
 8002740:	40014800 	.word	0x40014800

08002744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f103 0208 	add.w	r2, r3, #8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f103 0208 	add.w	r2, r3, #8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f103 0208 	add.w	r2, r3, #8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d103      	bne.n	8002842 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e00c      	b.n	800285c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3308      	adds	r3, #8
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e002      	b.n	8002850 <vListInsert+0x2e>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	429a      	cmp	r2, r3
 800285a:	d2f6      	bcs.n	800284a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	601a      	str	r2, [r3, #0]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6852      	ldr	r2, [r2, #4]
 80028b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d103      	bne.n	80028c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	1e5a      	subs	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002912:	f001 ff91 	bl	8004838 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	68f9      	ldr	r1, [r7, #12]
 8002920:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	441a      	add	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	3b01      	subs	r3, #1
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	441a      	add	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	22ff      	movs	r2, #255	; 0xff
 800295e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d114      	bne.n	8002992 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01a      	beq.n	80029a6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3310      	adds	r3, #16
 8002974:	4618      	mov	r0, r3
 8002976:	f001 f881 	bl	8003a7c <xTaskRemoveFromEventList>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d012      	beq.n	80029a6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <xQueueGenericReset+0xcc>)
 8002982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	e009      	b.n	80029a6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3310      	adds	r3, #16
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fef2 	bl	8002780 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3324      	adds	r3, #36	; 0x24
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff feed 	bl	8002780 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80029a6:	f001 ff77 	bl	8004898 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80029aa:	2301      	movs	r3, #1
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	e000ed04 	.word	0xe000ed04

080029b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	; 0x30
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	61bb      	str	r3, [r7, #24]
    }
 80029de:	bf00      	nop
 80029e0:	e7fe      	b.n	80029e0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <xQueueGenericCreate+0x48>
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d101      	bne.n	8002a04 <xQueueGenericCreate+0x4c>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <xQueueGenericCreate+0x4e>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <xQueueGenericCreate+0x68>
        __asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	617b      	str	r3, [r7, #20]
    }
 8002a1c:	bf00      	nop
 8002a1e:	e7fe      	b.n	8002a1e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002a26:	d90a      	bls.n	8002a3e <xQueueGenericCreate+0x86>
        __asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	613b      	str	r3, [r7, #16]
    }
 8002a3a:	bf00      	nop
 8002a3c:	e7fe      	b.n	8002a3c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	3350      	adds	r3, #80	; 0x50
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 f81a 	bl	8004a7c <pvPortMalloc>
 8002a48:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	3350      	adds	r3, #80	; 0x50
 8002a58:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a5a:	79fa      	ldrb	r2, [r7, #7]
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f805 	bl	8002a76 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
    }
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d103      	bne.n	8002a92 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e002      	b.n	8002a98 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	69b8      	ldr	r0, [r7, #24]
 8002aa8:	f7ff ff1e 	bl	80028e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08e      	sub	sp, #56	; 0x38
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aca:	2300      	movs	r3, #0
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericSend+0x32>
        __asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <xQueueGenericSend+0x40>
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <xQueueGenericSend+0x44>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <xQueueGenericSend+0x46>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <xQueueGenericSend+0x60>
        __asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002b18:	bf00      	nop
 8002b1a:	e7fe      	b.n	8002b1a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d103      	bne.n	8002b2a <xQueueGenericSend+0x6e>
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <xQueueGenericSend+0x72>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <xQueueGenericSend+0x74>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <xQueueGenericSend+0x8e>
        __asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	623b      	str	r3, [r7, #32]
    }
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b4a:	f001 f933 	bl	8003db4 <xTaskGetSchedulerState>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <xQueueGenericSend+0x9e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <xQueueGenericSend+0xa2>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <xQueueGenericSend+0xa4>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueGenericSend+0xbe>
        __asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61fb      	str	r3, [r7, #28]
    }
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b7a:	f001 fe5d 	bl	8004838 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d302      	bcc.n	8002b90 <xQueueGenericSend+0xd4>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d129      	bne.n	8002be4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b96:	f000 fa19 	bl	8002fcc <prvCopyDataToQueue>
 8002b9a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	3324      	adds	r3, #36	; 0x24
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 ff67 	bl	8003a7c <xTaskRemoveFromEventList>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <xQueueGenericSend+0x1f8>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	e00a      	b.n	8002bdc <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <xQueueGenericSend+0x1f8>)
 8002bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002bdc:	f001 fe5c 	bl	8004898 <vPortExitCritical>
                return pdPASS;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e063      	b.n	8002cac <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002bea:	f001 fe55 	bl	8004898 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e05c      	b.n	8002cac <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 ff9f 	bl	8003b40 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c06:	f001 fe47 	bl	8004898 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c0a:	f000 fd19 	bl	8003640 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c0e:	f001 fe13 	bl	8004838 <vPortEnterCritical>
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d103      	bne.n	8002c28 <xQueueGenericSend+0x16c>
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d103      	bne.n	8002c3e <xQueueGenericSend+0x182>
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c3e:	f001 fe2b 	bl	8004898 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c42:	1d3a      	adds	r2, r7, #4
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 ff8e 	bl	8003b6c <xTaskCheckForTimeOut>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d124      	bne.n	8002ca0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c58:	f000 fab0 	bl	80031bc <prvIsQueueFull>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d018      	beq.n	8002c94 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	3310      	adds	r3, #16
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 feb6 	bl	80039dc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c72:	f000 fa3b 	bl	80030ec <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002c76:	f000 fcf1 	bl	800365c <xTaskResumeAll>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f47f af7c 	bne.w	8002b7a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <xQueueGenericSend+0x1f8>)
 8002c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	e772      	b.n	8002b7a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c96:	f000 fa29 	bl	80030ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c9a:	f000 fcdf 	bl	800365c <xTaskResumeAll>
 8002c9e:	e76c      	b.n	8002b7a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ca2:	f000 fa23 	bl	80030ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ca6:	f000 fcd9 	bl	800365c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002caa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3738      	adds	r7, #56	; 0x38
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	e000ed04 	.word	0xe000ed04

08002cb8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b090      	sub	sp, #64	; 0x40
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <xQueueGenericSendFromISR+0x3c>
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <xQueueGenericSendFromISR+0x40>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <xQueueGenericSendFromISR+0x42>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002d10:	bf00      	nop
 8002d12:	e7fe      	b.n	8002d12 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d103      	bne.n	8002d22 <xQueueGenericSendFromISR+0x6a>
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <xQueueGenericSendFromISR+0x6e>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <xQueueGenericSendFromISR+0x70>
 8002d26:	2300      	movs	r3, #0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	623b      	str	r3, [r7, #32]
    }
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d42:	f001 fe5b 	bl	80049fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002d46:	f3ef 8211 	mrs	r2, BASEPRI
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	61fa      	str	r2, [r7, #28]
 8002d5c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <xQueueGenericSendFromISR+0xbc>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d13e      	bne.n	8002df2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d8a:	f000 f91f 	bl	8002fcc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002d8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d112      	bne.n	8002dbe <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d025      	beq.n	8002dec <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	3324      	adds	r3, #36	; 0x24
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fe69 	bl	8003a7c <xTaskRemoveFromEventList>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01d      	beq.n	8002dec <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01a      	beq.n	8002dec <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e016      	b.n	8002dec <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002dbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8002dc4:	d10a      	bne.n	8002ddc <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	617b      	str	r3, [r7, #20]
    }
 8002dd8:	bf00      	nop
 8002dda:	e7fe      	b.n	8002dda <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	b25a      	sxtb	r2, r3
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002dec:	2301      	movs	r3, #1
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002df0:	e001      	b.n	8002df6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e00:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3740      	adds	r7, #64	; 0x40
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <xQueueReceive+0x30>
        __asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	623b      	str	r3, [r7, #32]
    }
 8002e38:	bf00      	nop
 8002e3a:	e7fe      	b.n	8002e3a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <xQueueReceive+0x3e>
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <xQueueReceive+0x42>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <xQueueReceive+0x44>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <xQueueReceive+0x5e>
        __asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	61fb      	str	r3, [r7, #28]
    }
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e6a:	f000 ffa3 	bl	8003db4 <xTaskGetSchedulerState>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <xQueueReceive+0x6e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <xQueueReceive+0x72>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <xQueueReceive+0x74>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <xQueueReceive+0x8e>
        __asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	61bb      	str	r3, [r7, #24]
    }
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e9a:	f001 fccd 	bl	8004838 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01f      	beq.n	8002eea <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eae:	f000 f8f7 	bl	80030a0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1e5a      	subs	r2, r3, #1
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00f      	beq.n	8002ee2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	3310      	adds	r3, #16
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fdd8 	bl	8003a7c <xTaskRemoveFromEventList>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <xQueueReceive+0x1bc>)
 8002ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002ee2:	f001 fcd9 	bl	8004898 <vPortExitCritical>
                return pdPASS;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e069      	b.n	8002fbe <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ef0:	f001 fcd2 	bl	8004898 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e062      	b.n	8002fbe <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002efe:	f107 0310 	add.w	r3, r7, #16
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fe1c 	bl	8003b40 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002f0c:	f001 fcc4 	bl	8004898 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002f10:	f000 fb96 	bl	8003640 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002f14:	f001 fc90 	bl	8004838 <vPortEnterCritical>
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d103      	bne.n	8002f2e <xQueueReceive+0x122>
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f34:	b25b      	sxtb	r3, r3
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d103      	bne.n	8002f44 <xQueueReceive+0x138>
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f44:	f001 fca8 	bl	8004898 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f48:	1d3a      	adds	r2, r7, #4
 8002f4a:	f107 0310 	add.w	r3, r7, #16
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fe0b 	bl	8003b6c <xTaskCheckForTimeOut>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d123      	bne.n	8002fa4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5e:	f000 f917 	bl	8003190 <prvIsQueueEmpty>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d017      	beq.n	8002f98 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	3324      	adds	r3, #36	; 0x24
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fd33 	bl	80039dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f78:	f000 f8b8 	bl	80030ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002f7c:	f000 fb6e 	bl	800365c <xTaskResumeAll>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d189      	bne.n	8002e9a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <xQueueReceive+0x1bc>)
 8002f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	e780      	b.n	8002e9a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9a:	f000 f8a7 	bl	80030ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f9e:	f000 fb5d 	bl	800365c <xTaskResumeAll>
 8002fa2:	e77a      	b.n	8002e9a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa6:	f000 f8a1 	bl	80030ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002faa:	f000 fb57 	bl	800365c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb0:	f000 f8ee 	bl	8003190 <prvIsQueueEmpty>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f43f af6f 	beq.w	8002e9a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002fbc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3730      	adds	r7, #48	; 0x30
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10d      	bne.n	8003006 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d14d      	bne.n	800308e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fefa 	bl	8003df0 <xTaskPriorityDisinherit>
 8002ffc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	e043      	b.n	800308e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d119      	bne.n	8003040 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6858      	ldr	r0, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	461a      	mov	r2, r3
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	f001 ff52 	bl	8004ec0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	441a      	add	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d32b      	bcc.n	800308e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	e026      	b.n	800308e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68d8      	ldr	r0, [r3, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	461a      	mov	r2, r3
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	f001 ff38 	bl	8004ec0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	425b      	negs	r3, r3
 800305a:	441a      	add	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d207      	bcs.n	800307c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	425b      	negs	r3, r3
 8003076:	441a      	add	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d105      	bne.n	800308e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	3b01      	subs	r3, #1
 800308c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003096:	697b      	ldr	r3, [r7, #20]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d018      	beq.n	80030e4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	441a      	add	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d303      	bcc.n	80030d4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68d9      	ldr	r1, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	461a      	mov	r2, r3
 80030de:	6838      	ldr	r0, [r7, #0]
 80030e0:	f001 feee 	bl	8004ec0 <memcpy>
    }
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80030f4:	f001 fba0 	bl	8004838 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003100:	e011      	b.n	8003126 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d012      	beq.n	8003130 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3324      	adds	r3, #36	; 0x24
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fcb4 	bl	8003a7c <xTaskRemoveFromEventList>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800311a:	f000 fd8d 	bl	8003c38 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	3b01      	subs	r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	dce9      	bgt.n	8003102 <prvUnlockQueue+0x16>
 800312e:	e000      	b.n	8003132 <prvUnlockQueue+0x46>
                        break;
 8003130:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	22ff      	movs	r2, #255	; 0xff
 8003136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800313a:	f001 fbad 	bl	8004898 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800313e:	f001 fb7b 	bl	8004838 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003148:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800314a:	e011      	b.n	8003170 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d012      	beq.n	800317a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3310      	adds	r3, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fc8f 	bl	8003a7c <xTaskRemoveFromEventList>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003164:	f000 fd68 	bl	8003c38 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	3b01      	subs	r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003174:	2b00      	cmp	r3, #0
 8003176:	dce9      	bgt.n	800314c <prvUnlockQueue+0x60>
 8003178:	e000      	b.n	800317c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800317a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003184:	f001 fb88 	bl	8004898 <vPortExitCritical>
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003198:	f001 fb4e 	bl	8004838 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e001      	b.n	80031ae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80031ae:	f001 fb73 	bl	8004898 <vPortExitCritical>

    return xReturn;
 80031b2:	68fb      	ldr	r3, [r7, #12]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80031c4:	f001 fb38 	bl	8004838 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d102      	bne.n	80031da <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e001      	b.n	80031de <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80031de:	f001 fb5b 	bl	8004898 <vPortExitCritical>

    return xReturn;
 80031e2:	68fb      	ldr	r3, [r7, #12]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e014      	b.n	8003226 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031fc:	4a0f      	ldr	r2, [pc, #60]	; (800323c <vQueueAddToRegistry+0x50>)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003208:	490c      	ldr	r1, [pc, #48]	; (800323c <vQueueAddToRegistry+0x50>)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <vQueueAddToRegistry+0x50>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800321e:	e006      	b.n	800322e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b07      	cmp	r3, #7
 800322a:	d9e7      	bls.n	80031fc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	200000e8 	.word	0x200000e8

08003240 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003250:	f001 faf2 	bl	8004838 <vPortEnterCritical>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800325a:	b25b      	sxtb	r3, r3
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d103      	bne.n	800326a <vQueueWaitForMessageRestricted+0x2a>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003270:	b25b      	sxtb	r3, r3
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d103      	bne.n	8003280 <vQueueWaitForMessageRestricted+0x40>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003280:	f001 fb0a 	bl	8004898 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3324      	adds	r3, #36	; 0x24
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fbc5 	bl	8003a24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f7ff ff26 	bl	80030ec <prvUnlockQueue>
    }
 80032a0:	bf00      	nop
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af04      	add	r7, sp, #16
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fbdd 	bl	8004a7c <pvPortMalloc>
 80032c2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032ca:	2058      	movs	r0, #88	; 0x58
 80032cc:	f001 fbd6 	bl	8004a7c <pvPortMalloc>
 80032d0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30
 80032de:	e005      	b.n	80032ec <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80032e0:	6978      	ldr	r0, [r7, #20]
 80032e2:	f001 fcab 	bl	8004c3c <vPortFree>
 80032e6:	e001      	b.n	80032ec <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d013      	beq.n	800331a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	2300      	movs	r3, #0
 80032f6:	9303      	str	r3, [sp, #12]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	9302      	str	r3, [sp, #8]
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f80e 	bl	800332a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800330e:	69f8      	ldr	r0, [r7, #28]
 8003310:	f000 f8a2 	bl	8003458 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003314:	2301      	movs	r3, #1
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	e002      	b.n	8003320 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
 800331e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003320:	69bb      	ldr	r3, [r7, #24]
    }
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b088      	sub	sp, #32
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	461a      	mov	r2, r3
 8003342:	21a5      	movs	r1, #165	; 0xa5
 8003344:	f001 fdca 	bl	8004edc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003352:	3b01      	subs	r3, #1
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f023 0307 	bic.w	r3, r3, #7
 8003360:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <prvInitialiseNewTask+0x58>
        __asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	617b      	str	r3, [r7, #20]
    }
 800337e:	bf00      	nop
 8003380:	e7fe      	b.n	8003380 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01f      	beq.n	80033c8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e012      	b.n	80033b4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	7819      	ldrb	r1, [r3, #0]
 8003396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	3334      	adds	r3, #52	; 0x34
 800339e:	460a      	mov	r2, r1
 80033a0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	d9e9      	bls.n	800338e <prvInitialiseNewTask+0x64>
 80033ba:	e000      	b.n	80033be <prvInitialiseNewTask+0x94>
            {
                break;
 80033bc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033c6:	e003      	b.n	80033d0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d901      	bls.n	80033da <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033d6:	2306      	movs	r3, #6
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	2200      	movs	r2, #0
 80033ea:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	3304      	adds	r3, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff f9e5 	bl	80027c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	3318      	adds	r3, #24
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff f9e0 	bl	80027c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003404:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	f1c3 0207 	rsb	r2, r3, #7
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003414:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	3350      	adds	r3, #80	; 0x50
 800341a:	2204      	movs	r2, #4
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f001 fd5c 	bl	8004edc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	3354      	adds	r3, #84	; 0x54
 8003428:	2201      	movs	r2, #1
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f001 fd55 	bl	8004edc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	69b8      	ldr	r0, [r7, #24]
 8003438:	f001 f8cc 	bl	80045d4 <pxPortInitialiseStack>
 800343c:	4602      	mov	r2, r0
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800344e:	bf00      	nop
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003460:	f001 f9ea 	bl	8004838 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003464:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <prvAddNewTaskToReadyList+0xc0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <prvAddNewTaskToReadyList+0xc0>)
 800346c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <prvAddNewTaskToReadyList+0xc4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003476:	4a29      	ldr	r2, [pc, #164]	; (800351c <prvAddNewTaskToReadyList+0xc4>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800347c:	4b26      	ldr	r3, [pc, #152]	; (8003518 <prvAddNewTaskToReadyList+0xc0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d110      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003484:	f000 fbfc 	bl	8003c80 <prvInitialiseTaskLists>
 8003488:	e00d      	b.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800348a:	4b25      	ldr	r3, [pc, #148]	; (8003520 <prvAddNewTaskToReadyList+0xc8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003492:	4b22      	ldr	r3, [pc, #136]	; (800351c <prvAddNewTaskToReadyList+0xc4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	429a      	cmp	r2, r3
 800349e:	d802      	bhi.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80034a0:	4a1e      	ldr	r2, [pc, #120]	; (800351c <prvAddNewTaskToReadyList+0xc4>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80034a6:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <prvAddNewTaskToReadyList+0xcc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <prvAddNewTaskToReadyList+0xcc>)
 80034ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034b0:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <prvAddNewTaskToReadyList+0xcc>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <prvAddNewTaskToReadyList+0xd0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	4a18      	ldr	r2, [pc, #96]	; (8003528 <prvAddNewTaskToReadyList+0xd0>)
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <prvAddNewTaskToReadyList+0xd4>)
 80034d8:	441a      	add	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	4610      	mov	r0, r2
 80034e2:	f7ff f97a 	bl	80027da <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80034e6:	f001 f9d7 	bl	8004898 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <prvAddNewTaskToReadyList+0xc8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00e      	beq.n	8003510 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <prvAddNewTaskToReadyList+0xc4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d207      	bcs.n	8003510 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <prvAddNewTaskToReadyList+0xd8>)
 8003502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000228 	.word	0x20000228
 800351c:	20000128 	.word	0x20000128
 8003520:	20000234 	.word	0x20000234
 8003524:	20000244 	.word	0x20000244
 8003528:	20000230 	.word	0x20000230
 800352c:	2000012c 	.word	0x2000012c
 8003530:	e000ed04 	.word	0xe000ed04

08003534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d017      	beq.n	8003576 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <vTaskDelay+0x60>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <vTaskDelay+0x30>
        __asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	60bb      	str	r3, [r7, #8]
    }
 8003560:	bf00      	nop
 8003562:	e7fe      	b.n	8003562 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003564:	f000 f86c 	bl	8003640 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003568:	2100      	movs	r1, #0
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fcba 	bl	8003ee4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003570:	f000 f874 	bl	800365c <xTaskResumeAll>
 8003574:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <vTaskDelay+0x64>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000250 	.word	0x20000250
 8003598:	e000ed04 	.word	0xe000ed04

0800359c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <vTaskStartScheduler+0x88>)
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2300      	movs	r3, #0
 80035ac:	2287      	movs	r2, #135	; 0x87
 80035ae:	491e      	ldr	r1, [pc, #120]	; (8003628 <vTaskStartScheduler+0x8c>)
 80035b0:	481e      	ldr	r0, [pc, #120]	; (800362c <vTaskStartScheduler+0x90>)
 80035b2:	f7ff fe79 	bl	80032a8 <xTaskCreate>
 80035b6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80035be:	f000 fcf7 	bl	8003fb0 <xTimerCreateTimerTask>
 80035c2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d116      	bne.n	80035f8 <vTaskStartScheduler+0x5c>
        __asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	60bb      	str	r3, [r7, #8]
    }
 80035dc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <vTaskStartScheduler+0x94>)
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <vTaskStartScheduler+0x98>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <vTaskStartScheduler+0x9c>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80035f2:	f001 f87f 	bl	80046f4 <xPortStartScheduler>
 80035f6:	e00e      	b.n	8003616 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d10a      	bne.n	8003616 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	607b      	str	r3, [r7, #4]
    }
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <vTaskStartScheduler+0xa0>)
 8003618:	681b      	ldr	r3, [r3, #0]
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000024c 	.word	0x2000024c
 8003628:	08005fbc 	.word	0x08005fbc
 800362c:	08003c51 	.word	0x08003c51
 8003630:	20000248 	.word	0x20000248
 8003634:	20000234 	.word	0x20000234
 8003638:	2000022c 	.word	0x2000022c
 800363c:	2000000c 	.word	0x2000000c

08003640 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <vTaskSuspendAll+0x18>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	4a03      	ldr	r2, [pc, #12]	; (8003658 <vTaskSuspendAll+0x18>)
 800364c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	20000250 	.word	0x20000250

0800365c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <xTaskResumeAll+0x114>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <xTaskResumeAll+0x2c>
        __asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	603b      	str	r3, [r7, #0]
    }
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003688:	f001 f8d6 	bl	8004838 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800368c:	4b38      	ldr	r3, [pc, #224]	; (8003770 <xTaskResumeAll+0x114>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3b01      	subs	r3, #1
 8003692:	4a37      	ldr	r2, [pc, #220]	; (8003770 <xTaskResumeAll+0x114>)
 8003694:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003696:	4b36      	ldr	r3, [pc, #216]	; (8003770 <xTaskResumeAll+0x114>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d161      	bne.n	8003762 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800369e:	4b35      	ldr	r3, [pc, #212]	; (8003774 <xTaskResumeAll+0x118>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d05d      	beq.n	8003762 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036a6:	e02e      	b.n	8003706 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a8:	4b33      	ldr	r3, [pc, #204]	; (8003778 <xTaskResumeAll+0x11c>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3318      	adds	r3, #24
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f8ed 	bl	8002894 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff f8e8 	bl	8002894 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	2201      	movs	r2, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	4b2b      	ldr	r3, [pc, #172]	; (800377c <xTaskResumeAll+0x120>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	4a2a      	ldr	r2, [pc, #168]	; (800377c <xTaskResumeAll+0x120>)
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4a27      	ldr	r2, [pc, #156]	; (8003780 <xTaskResumeAll+0x124>)
 80036e4:	441a      	add	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f7ff f874 	bl	80027da <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	4b23      	ldr	r3, [pc, #140]	; (8003784 <xTaskResumeAll+0x128>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d302      	bcc.n	8003706 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <xTaskResumeAll+0x12c>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <xTaskResumeAll+0x11c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1cc      	bne.n	80036a8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003714:	f000 fb32 	bl	8003d7c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003718:	4b1c      	ldr	r3, [pc, #112]	; (800378c <xTaskResumeAll+0x130>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003724:	f000 f846 	bl	80037b4 <xTaskIncrementTick>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <xTaskResumeAll+0x12c>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f1      	bne.n	8003724 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003740:	4b12      	ldr	r3, [pc, #72]	; (800378c <xTaskResumeAll+0x130>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <xTaskResumeAll+0x12c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800374e:	2301      	movs	r3, #1
 8003750:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <xTaskResumeAll+0x134>)
 8003754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003762:	f001 f899 	bl	8004898 <vPortExitCritical>

    return xAlreadyYielded;
 8003766:	68bb      	ldr	r3, [r7, #8]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000250 	.word	0x20000250
 8003774:	20000228 	.word	0x20000228
 8003778:	200001e8 	.word	0x200001e8
 800377c:	20000230 	.word	0x20000230
 8003780:	2000012c 	.word	0x2000012c
 8003784:	20000128 	.word	0x20000128
 8003788:	2000023c 	.word	0x2000023c
 800378c:	20000238 	.word	0x20000238
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <xTaskGetTickCount+0x1c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80037a0:	687b      	ldr	r3, [r7, #4]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	2000022c 	.word	0x2000022c

080037b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037be:	4b4e      	ldr	r3, [pc, #312]	; (80038f8 <xTaskIncrementTick+0x144>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 808e 	bne.w	80038e4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037c8:	4b4c      	ldr	r3, [pc, #304]	; (80038fc <xTaskIncrementTick+0x148>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80037d0:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <xTaskIncrementTick+0x148>)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d120      	bne.n	800381e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80037dc:	4b48      	ldr	r3, [pc, #288]	; (8003900 <xTaskIncrementTick+0x14c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <xTaskIncrementTick+0x48>
        __asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	603b      	str	r3, [r7, #0]
    }
 80037f8:	bf00      	nop
 80037fa:	e7fe      	b.n	80037fa <xTaskIncrementTick+0x46>
 80037fc:	4b40      	ldr	r3, [pc, #256]	; (8003900 <xTaskIncrementTick+0x14c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b40      	ldr	r3, [pc, #256]	; (8003904 <xTaskIncrementTick+0x150>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a3e      	ldr	r2, [pc, #248]	; (8003900 <xTaskIncrementTick+0x14c>)
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4a3e      	ldr	r2, [pc, #248]	; (8003904 <xTaskIncrementTick+0x150>)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <xTaskIncrementTick+0x154>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	4a3c      	ldr	r2, [pc, #240]	; (8003908 <xTaskIncrementTick+0x154>)
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	f000 faaf 	bl	8003d7c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800381e:	4b3b      	ldr	r3, [pc, #236]	; (800390c <xTaskIncrementTick+0x158>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	429a      	cmp	r2, r3
 8003826:	d348      	bcc.n	80038ba <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003828:	4b35      	ldr	r3, [pc, #212]	; (8003900 <xTaskIncrementTick+0x14c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003832:	4b36      	ldr	r3, [pc, #216]	; (800390c <xTaskIncrementTick+0x158>)
 8003834:	f04f 32ff 	mov.w	r2, #4294967295
 8003838:	601a      	str	r2, [r3, #0]
                    break;
 800383a:	e03e      	b.n	80038ba <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800383c:	4b30      	ldr	r3, [pc, #192]	; (8003900 <xTaskIncrementTick+0x14c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d203      	bcs.n	800385c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003854:	4a2d      	ldr	r2, [pc, #180]	; (800390c <xTaskIncrementTick+0x158>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800385a:	e02e      	b.n	80038ba <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff f817 	bl	8002894 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	3318      	adds	r3, #24
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff f80e 	bl	8002894 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	2201      	movs	r2, #1
 800387e:	409a      	lsls	r2, r3
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <xTaskIncrementTick+0x15c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4313      	orrs	r3, r2
 8003886:	4a22      	ldr	r2, [pc, #136]	; (8003910 <xTaskIncrementTick+0x15c>)
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <xTaskIncrementTick+0x160>)
 8003898:	441a      	add	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	3304      	adds	r3, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	4610      	mov	r0, r2
 80038a2:	f7fe ff9a 	bl	80027da <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <xTaskIncrementTick+0x164>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d3b9      	bcc.n	8003828 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80038b4:	2301      	movs	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b8:	e7b6      	b.n	8003828 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038ba:	4b17      	ldr	r3, [pc, #92]	; (8003918 <xTaskIncrementTick+0x164>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	4914      	ldr	r1, [pc, #80]	; (8003914 <xTaskIncrementTick+0x160>)
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d901      	bls.n	80038d6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80038d2:	2301      	movs	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80038d6:	4b11      	ldr	r3, [pc, #68]	; (800391c <xTaskIncrementTick+0x168>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80038de:	2301      	movs	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e004      	b.n	80038ee <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <xTaskIncrementTick+0x16c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <xTaskIncrementTick+0x16c>)
 80038ec:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80038ee:	697b      	ldr	r3, [r7, #20]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000250 	.word	0x20000250
 80038fc:	2000022c 	.word	0x2000022c
 8003900:	200001e0 	.word	0x200001e0
 8003904:	200001e4 	.word	0x200001e4
 8003908:	20000240 	.word	0x20000240
 800390c:	20000248 	.word	0x20000248
 8003910:	20000230 	.word	0x20000230
 8003914:	2000012c 	.word	0x2000012c
 8003918:	20000128 	.word	0x20000128
 800391c:	2000023c 	.word	0x2000023c
 8003920:	20000238 	.word	0x20000238

08003924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800392a:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <vTaskSwitchContext+0xa4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <vTaskSwitchContext+0xa8>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003938:	e03f      	b.n	80039ba <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <vTaskSwitchContext+0xa8>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003940:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <vTaskSwitchContext+0xac>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800394e:	7afb      	ldrb	r3, [r7, #11]
 8003950:	f1c3 031f 	rsb	r3, r3, #31
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	491f      	ldr	r1, [pc, #124]	; (80039d4 <vTaskSwitchContext+0xb0>)
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <vTaskSwitchContext+0x5c>
        __asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	607b      	str	r3, [r7, #4]
    }
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <vTaskSwitchContext+0x5a>
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <vTaskSwitchContext+0xb0>)
 800398c:	4413      	add	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3308      	adds	r3, #8
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d104      	bne.n	80039b0 <vTaskSwitchContext+0x8c>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <vTaskSwitchContext+0xb4>)
 80039b8:	6013      	str	r3, [r2, #0]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000250 	.word	0x20000250
 80039cc:	2000023c 	.word	0x2000023c
 80039d0:	20000230 	.word	0x20000230
 80039d4:	2000012c 	.word	0x2000012c
 80039d8:	20000128 	.word	0x20000128

080039dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	60fb      	str	r3, [r7, #12]
    }
 80039fe:	bf00      	nop
 8003a00:	e7fe      	b.n	8003a00 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <vTaskPlaceOnEventList+0x44>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3318      	adds	r3, #24
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fe ff09 	bl	8002822 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a10:	2101      	movs	r1, #1
 8003a12:	6838      	ldr	r0, [r7, #0]
 8003a14:	f000 fa66 	bl	8003ee4 <prvAddCurrentTaskToDelayedList>
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000128 	.word	0x20000128

08003a24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	617b      	str	r3, [r7, #20]
    }
 8003a48:	bf00      	nop
 8003a4a:	e7fe      	b.n	8003a4a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3318      	adds	r3, #24
 8003a52:	4619      	mov	r1, r3
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7fe fec0 	bl	80027da <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
 8003a64:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	68b8      	ldr	r0, [r7, #8]
 8003a6a:	f000 fa3b 	bl	8003ee4 <prvAddCurrentTaskToDelayedList>
    }
 8003a6e:	bf00      	nop
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000128 	.word	0x20000128

08003a7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	60fb      	str	r3, [r7, #12]
    }
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	3318      	adds	r3, #24
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fef1 	bl	8002894 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <xTaskRemoveFromEventList+0xac>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11c      	bne.n	8003af4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	3304      	adds	r3, #4
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fee8 	bl	8002894 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2201      	movs	r2, #1
 8003aca:	409a      	lsls	r2, r3
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <xTaskRemoveFromEventList+0xb0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <xTaskRemoveFromEventList+0xb0>)
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <xTaskRemoveFromEventList+0xb4>)
 8003ae4:	441a      	add	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7fe fe74 	bl	80027da <vListInsertEnd>
 8003af2:	e005      	b.n	8003b00 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	3318      	adds	r3, #24
 8003af8:	4619      	mov	r1, r3
 8003afa:	480e      	ldr	r0, [pc, #56]	; (8003b34 <xTaskRemoveFromEventList+0xb8>)
 8003afc:	f7fe fe6d 	bl	80027da <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <xTaskRemoveFromEventList+0xbc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d905      	bls.n	8003b1a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <xTaskRemoveFromEventList+0xc0>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e001      	b.n	8003b1e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003b1e:	697b      	ldr	r3, [r7, #20]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000250 	.word	0x20000250
 8003b2c:	20000230 	.word	0x20000230
 8003b30:	2000012c 	.word	0x2000012c
 8003b34:	200001e8 	.word	0x200001e8
 8003b38:	20000128 	.word	0x20000128
 8003b3c:	2000023c 	.word	0x2000023c

08003b40 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <vTaskInternalSetTimeOutState+0x24>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <vTaskInternalSetTimeOutState+0x28>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	605a      	str	r2, [r3, #4]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	20000240 	.word	0x20000240
 8003b68:	2000022c 	.word	0x2000022c

08003b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	613b      	str	r3, [r7, #16]
    }
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	60fb      	str	r3, [r7, #12]
    }
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003bae:	f000 fe43 	bl	8004838 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003bb2:	4b1f      	ldr	r3, [pc, #124]	; (8003c30 <xTaskCheckForTimeOut+0xc4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d102      	bne.n	8003bd2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	e026      	b.n	8003c20 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <xTaskCheckForTimeOut+0xc8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d00a      	beq.n	8003bf4 <xTaskCheckForTimeOut+0x88>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d305      	bcc.n	8003bf4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003be8:	2301      	movs	r3, #1
 8003bea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e015      	b.n	8003c20 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d20b      	bcs.n	8003c16 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	1ad2      	subs	r2, r2, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff98 	bl	8003b40 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	e004      	b.n	8003c20 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003c20:	f000 fe3a 	bl	8004898 <vPortExitCritical>

    return xReturn;
 8003c24:	69fb      	ldr	r3, [r7, #28]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2000022c 	.word	0x2000022c
 8003c34:	20000240 	.word	0x20000240

08003c38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <vTaskMissedYield+0x14>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	2000023c 	.word	0x2000023c

08003c50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c58:	f000 f852 	bl	8003d00 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <prvIdleTask+0x28>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d9f9      	bls.n	8003c58 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <prvIdleTask+0x2c>)
 8003c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c74:	e7f0      	b.n	8003c58 <prvIdleTask+0x8>
 8003c76:	bf00      	nop
 8003c78:	2000012c 	.word	0x2000012c
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
 8003c8a:	e00c      	b.n	8003ca6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <prvInitialiseTaskLists+0x60>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fd70 	bl	8002780 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	d9ef      	bls.n	8003c8c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003cac:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <prvInitialiseTaskLists+0x64>)
 8003cae:	f7fe fd67 	bl	8002780 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003cb2:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <prvInitialiseTaskLists+0x68>)
 8003cb4:	f7fe fd64 	bl	8002780 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003cb8:	480c      	ldr	r0, [pc, #48]	; (8003cec <prvInitialiseTaskLists+0x6c>)
 8003cba:	f7fe fd61 	bl	8002780 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003cbe:	480c      	ldr	r0, [pc, #48]	; (8003cf0 <prvInitialiseTaskLists+0x70>)
 8003cc0:	f7fe fd5e 	bl	8002780 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003cc4:	480b      	ldr	r0, [pc, #44]	; (8003cf4 <prvInitialiseTaskLists+0x74>)
 8003cc6:	f7fe fd5b 	bl	8002780 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <prvInitialiseTaskLists+0x78>)
 8003ccc:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <prvInitialiseTaskLists+0x64>)
 8003cce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvInitialiseTaskLists+0x7c>)
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <prvInitialiseTaskLists+0x68>)
 8003cd4:	601a      	str	r2, [r3, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000012c 	.word	0x2000012c
 8003ce4:	200001b8 	.word	0x200001b8
 8003ce8:	200001cc 	.word	0x200001cc
 8003cec:	200001e8 	.word	0x200001e8
 8003cf0:	200001fc 	.word	0x200001fc
 8003cf4:	20000214 	.word	0x20000214
 8003cf8:	200001e0 	.word	0x200001e0
 8003cfc:	200001e4 	.word	0x200001e4

08003d00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d06:	e019      	b.n	8003d3c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003d08:	f000 fd96 	bl	8004838 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d0c:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <prvCheckTasksWaitingTermination+0x50>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fdbb 	bl	8002894 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <prvCheckTasksWaitingTermination+0x54>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <prvCheckTasksWaitingTermination+0x54>)
 8003d26:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <prvCheckTasksWaitingTermination+0x58>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <prvCheckTasksWaitingTermination+0x58>)
 8003d30:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003d32:	f000 fdb1 	bl	8004898 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f810 	bl	8003d5c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <prvCheckTasksWaitingTermination+0x58>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e1      	bne.n	8003d08 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200001fc 	.word	0x200001fc
 8003d54:	20000228 	.word	0x20000228
 8003d58:	20000210 	.word	0x20000210

08003d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 ff67 	bl	8004c3c <vPortFree>
                vPortFree( pxTCB );
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 ff64 	bl	8004c3c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <prvResetNextTaskUnblockTime+0x30>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d8a:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <prvResetNextTaskUnblockTime+0x34>)
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d92:	e005      	b.n	8003da0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <prvResetNextTaskUnblockTime+0x30>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <prvResetNextTaskUnblockTime+0x34>)
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	200001e0 	.word	0x200001e0
 8003db0:	20000248 	.word	0x20000248

08003db4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <xTaskGetSchedulerState+0x34>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	e008      	b.n	8003dda <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <xTaskGetSchedulerState+0x38>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	e001      	b.n	8003dda <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003dda:	687b      	ldr	r3, [r7, #4]
    }
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	20000234 	.word	0x20000234
 8003dec:	20000250 	.word	0x20000250

08003df0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d063      	beq.n	8003ece <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003e06:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <xTaskPriorityDisinherit+0xe8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d00a      	beq.n	8003e26 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60fb      	str	r3, [r7, #12]
    }
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60bb      	str	r3, [r7, #8]
    }
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e48:	1e5a      	subs	r2, r3, #1
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d039      	beq.n	8003ece <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d135      	bne.n	8003ece <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	3304      	adds	r3, #4
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fd14 	bl	8002894 <uxListRemove>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	2201      	movs	r2, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <xTaskPriorityDisinherit+0xec>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4013      	ands	r3, r2
 8003e84:	4a15      	ldr	r2, [pc, #84]	; (8003edc <xTaskPriorityDisinherit+0xec>)
 8003e86:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	f1c3 0207 	rsb	r2, r3, #7
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <xTaskPriorityDisinherit+0xec>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <xTaskPriorityDisinherit+0xec>)
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <xTaskPriorityDisinherit+0xf0>)
 8003ebc:	441a      	add	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7fe fc88 	bl	80027da <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ece:	697b      	ldr	r3, [r7, #20]
    }
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000128 	.word	0x20000128
 8003edc:	20000230 	.word	0x20000230
 8003ee0:	2000012c 	.word	0x2000012c

08003ee4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003eee:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef4:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fcca 	bl	8002894 <uxListRemove>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f06:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f1c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d10a      	bne.n	8003f3c <prvAddCurrentTaskToDelayedList+0x58>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	481a      	ldr	r0, [pc, #104]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f36:	f7fe fc50 	bl	80027da <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f3a:	e026      	b.n	8003f8a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d209      	bcs.n	8003f68 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7fe fc5e 	bl	8002822 <vListInsert>
}
 8003f66:	e010      	b.n	8003f8a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f7fe fc54 	bl	8002822 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d202      	bcs.n	8003f8a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003f84:	4a09      	ldr	r2, [pc, #36]	; (8003fac <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	6013      	str	r3, [r2, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	2000022c 	.word	0x2000022c
 8003f98:	20000128 	.word	0x20000128
 8003f9c:	20000230 	.word	0x20000230
 8003fa0:	20000214 	.word	0x20000214
 8003fa4:	200001e4 	.word	0x200001e4
 8003fa8:	200001e0 	.word	0x200001e0
 8003fac:	20000248 	.word	0x20000248

08003fb0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003fba:	f000 fad5 	bl	8004568 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003fbe:	4b11      	ldr	r3, [pc, #68]	; (8004004 <xTimerCreateTimerTask+0x54>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <xTimerCreateTimerTask+0x58>)
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	2302      	movs	r3, #2
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8003fd4:	490d      	ldr	r1, [pc, #52]	; (800400c <xTimerCreateTimerTask+0x5c>)
 8003fd6:	480e      	ldr	r0, [pc, #56]	; (8004010 <xTimerCreateTimerTask+0x60>)
 8003fd8:	f7ff f966 	bl	80032a8 <xTaskCreate>
 8003fdc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	603b      	str	r3, [r7, #0]
    }
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ffa:	687b      	ldr	r3, [r7, #4]
    }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000284 	.word	0x20000284
 8004008:	20000288 	.word	0x20000288
 800400c:	08005fc4 	.word	0x08005fc4
 8004010:	08004149 	.word	0x08004149

08004014 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <xTimerGenericCommand+0x2e>
        __asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	623b      	str	r3, [r7, #32]
    }
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <xTimerGenericCommand+0x98>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d02a      	beq.n	80040a0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b05      	cmp	r3, #5
 800405a:	dc18      	bgt.n	800408e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800405c:	f7ff feaa 	bl	8003db4 <xTaskGetSchedulerState>
 8004060:	4603      	mov	r3, r0
 8004062:	2b02      	cmp	r3, #2
 8004064:	d109      	bne.n	800407a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <xTimerGenericCommand+0x98>)
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	f107 0114 	add.w	r1, r7, #20
 800406e:	2300      	movs	r3, #0
 8004070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004072:	f7fe fd23 	bl	8002abc <xQueueGenericSend>
 8004076:	6278      	str	r0, [r7, #36]	; 0x24
 8004078:	e012      	b.n	80040a0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <xTimerGenericCommand+0x98>)
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	f107 0114 	add.w	r1, r7, #20
 8004082:	2300      	movs	r3, #0
 8004084:	2200      	movs	r2, #0
 8004086:	f7fe fd19 	bl	8002abc <xQueueGenericSend>
 800408a:	6278      	str	r0, [r7, #36]	; 0x24
 800408c:	e008      	b.n	80040a0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <xTimerGenericCommand+0x98>)
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	f107 0114 	add.w	r1, r7, #20
 8004096:	2300      	movs	r3, #0
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	f7fe fe0d 	bl	8002cb8 <xQueueGenericSendFromISR>
 800409e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80040a2:	4618      	mov	r0, r3
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000284 	.word	0x20000284

080040b0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ba:	4b22      	ldr	r3, [pc, #136]	; (8004144 <prvProcessExpiredTimer+0x94>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fbe3 	bl	8002894 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d022      	beq.n	8004122 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	18d1      	adds	r1, r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	6978      	ldr	r0, [r7, #20]
 80040ea:	f000 f8d1 	bl	8004290 <prvInsertTimerInActiveList>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01f      	beq.n	8004134 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040f4:	2300      	movs	r3, #0
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2300      	movs	r3, #0
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	2100      	movs	r1, #0
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	f7ff ff88 	bl	8004014 <xTimerGenericCommand>
 8004104:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d113      	bne.n	8004134 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
    }
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	b2da      	uxtb	r2, r3
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	6978      	ldr	r0, [r7, #20]
 800413a:	4798      	blx	r3
    }
 800413c:	bf00      	nop
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	2000027c 	.word	0x2000027c

08004148 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004150:	f107 0308 	add.w	r3, r7, #8
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f857 	bl	8004208 <prvGetNextExpireTime>
 800415a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4619      	mov	r1, r3
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f803 	bl	800416c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004166:	f000 f8d5 	bl	8004314 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800416a:	e7f1      	b.n	8004150 <prvTimerTask+0x8>

0800416c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004176:	f7ff fa63 	bl	8003640 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800417a:	f107 0308 	add.w	r3, r7, #8
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f866 	bl	8004250 <prvSampleTimeNow>
 8004184:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d130      	bne.n	80041ee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <prvProcessTimerOrBlockTask+0x3c>
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	429a      	cmp	r2, r3
 8004198:	d806      	bhi.n	80041a8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800419a:	f7ff fa5f 	bl	800365c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff85 	bl	80040b0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80041a6:	e024      	b.n	80041f2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <prvProcessTimerOrBlockTask+0x90>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <prvProcessTimerOrBlockTask+0x50>
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <prvProcessTimerOrBlockTask+0x52>
 80041bc:	2300      	movs	r3, #0
 80041be:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <prvProcessTimerOrBlockTask+0x94>)
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f7ff f837 	bl	8003240 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80041d2:	f7ff fa43 	bl	800365c <xTaskResumeAll>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <prvProcessTimerOrBlockTask+0x98>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	f3bf 8f6f 	isb	sy
    }
 80041ec:	e001      	b.n	80041f2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80041ee:	f7ff fa35 	bl	800365c <xTaskResumeAll>
    }
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000280 	.word	0x20000280
 8004200:	20000284 	.word	0x20000284
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004210:	4b0e      	ldr	r3, [pc, #56]	; (800424c <prvGetNextExpireTime+0x44>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <prvGetNextExpireTime+0x16>
 800421a:	2201      	movs	r2, #1
 800421c:	e000      	b.n	8004220 <prvGetNextExpireTime+0x18>
 800421e:	2200      	movs	r2, #0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <prvGetNextExpireTime+0x44>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	e001      	b.n	800423c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800423c:	68fb      	ldr	r3, [r7, #12]
    }
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000027c 	.word	0x2000027c

08004250 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004258:	f7ff fa9c 	bl	8003794 <xTaskGetTickCount>
 800425c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <prvSampleTimeNow+0x3c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d205      	bcs.n	8004274 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004268:	f000 f91a 	bl	80044a0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e002      	b.n	800427a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800427a:	4a04      	ldr	r2, [pc, #16]	; (800428c <prvSampleTimeNow+0x3c>)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004280:	68fb      	ldr	r3, [r7, #12]
    }
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	2000028c 	.word	0x2000028c

08004290 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d812      	bhi.n	80042dc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80042c4:	2301      	movs	r3, #1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e01b      	b.n	8004302 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <prvInsertTimerInActiveList+0x7c>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f7fe faa4 	bl	8002822 <vListInsert>
 80042da:	e012      	b.n	8004302 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d206      	bcs.n	80042f2 <prvInsertTimerInActiveList+0x62>
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e007      	b.n	8004302 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <prvInsertTimerInActiveList+0x80>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f7fe fa90 	bl	8002822 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004302:	697b      	ldr	r3, [r7, #20]
    }
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000280 	.word	0x20000280
 8004310:	2000027c 	.word	0x2000027c

08004314 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	; 0x30
 8004318:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800431a:	e0ae      	b.n	800447a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f2c0 80aa 	blt.w	8004478 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	3304      	adds	r3, #4
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe faad 	bl	8002894 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ff87 	bl	8004250 <prvSampleTimeNow>
 8004342:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b09      	cmp	r3, #9
 8004348:	f200 8097 	bhi.w	800447a <prvProcessReceivedCommands+0x166>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <prvProcessReceivedCommands+0x40>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	0800437d 	.word	0x0800437d
 8004358:	0800437d 	.word	0x0800437d
 800435c:	0800437d 	.word	0x0800437d
 8004360:	080043f1 	.word	0x080043f1
 8004364:	08004405 	.word	0x08004405
 8004368:	0800444f 	.word	0x0800444f
 800436c:	0800437d 	.word	0x0800437d
 8004370:	0800437d 	.word	0x0800437d
 8004374:	080043f1 	.word	0x080043f1
 8004378:	08004405 	.word	0x08004405
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	18d1      	adds	r1, r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800439c:	f7ff ff78 	bl	8004290 <prvInsertTimerInActiveList>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d069      	beq.n	800447a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ac:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05e      	beq.n	800447a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	441a      	add	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	2100      	movs	r1, #0
 80043cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ce:	f7ff fe21 	bl	8004014 <xTimerGenericCommand>
 80043d2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d14f      	bne.n	800447a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	61bb      	str	r3, [r7, #24]
    }
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004402:	e03a      	b.n	800447a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	b2da      	uxtb	r2, r3
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	617b      	str	r3, [r7, #20]
    }
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	18d1      	adds	r1, r2, r3
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004448:	f7ff ff22 	bl	8004290 <prvInsertTimerInActiveList>
                        break;
 800444c:	e015      	b.n	800447a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800445c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800445e:	f000 fbed 	bl	8004c3c <vPortFree>
 8004462:	e00a      	b.n	800447a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	b2da      	uxtb	r2, r3
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004476:	e000      	b.n	800447a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004478:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <prvProcessReceivedCommands+0x188>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f107 0108 	add.w	r1, r7, #8
 8004482:	2200      	movs	r2, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe fcc1 	bl	8002e0c <xQueueReceive>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	f47f af45 	bne.w	800431c <prvProcessReceivedCommands+0x8>
        }
    }
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	3728      	adds	r7, #40	; 0x28
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000284 	.word	0x20000284

080044a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044a6:	e048      	b.n	800453a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044a8:	4b2d      	ldr	r3, [pc, #180]	; (8004560 <prvSwitchTimerLists+0xc0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b2:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <prvSwitchTimerLists+0xc0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3304      	adds	r3, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe f9e7 	bl	8002894 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02e      	beq.n	800453a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4413      	add	r3, r2
 80044e4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d90e      	bls.n	800450c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044fa:	4b19      	ldr	r3, [pc, #100]	; (8004560 <prvSwitchTimerLists+0xc0>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3304      	adds	r3, #4
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f7fe f98c 	bl	8002822 <vListInsert>
 800450a:	e016      	b.n	800453a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800450c:	2300      	movs	r3, #0
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2300      	movs	r3, #0
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	2100      	movs	r1, #0
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7ff fd7c 	bl	8004014 <xTimerGenericCommand>
 800451c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	603b      	str	r3, [r7, #0]
    }
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <prvSwitchTimerLists+0xc0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1b1      	bne.n	80044a8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <prvSwitchTimerLists+0xc0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <prvSwitchTimerLists+0xc4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a04      	ldr	r2, [pc, #16]	; (8004560 <prvSwitchTimerLists+0xc0>)
 8004550:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004552:	4a04      	ldr	r2, [pc, #16]	; (8004564 <prvSwitchTimerLists+0xc4>)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	6013      	str	r3, [r2, #0]
    }
 8004558:	bf00      	nop
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	2000027c 	.word	0x2000027c
 8004564:	20000280 	.word	0x20000280

08004568 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800456c:	f000 f964 	bl	8004838 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004570:	4b12      	ldr	r3, [pc, #72]	; (80045bc <prvCheckForValidListAndQueue+0x54>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d11d      	bne.n	80045b4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004578:	4811      	ldr	r0, [pc, #68]	; (80045c0 <prvCheckForValidListAndQueue+0x58>)
 800457a:	f7fe f901 	bl	8002780 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800457e:	4811      	ldr	r0, [pc, #68]	; (80045c4 <prvCheckForValidListAndQueue+0x5c>)
 8004580:	f7fe f8fe 	bl	8002780 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004584:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <prvCheckForValidListAndQueue+0x60>)
 8004586:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <prvCheckForValidListAndQueue+0x58>)
 8004588:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800458a:	4b10      	ldr	r3, [pc, #64]	; (80045cc <prvCheckForValidListAndQueue+0x64>)
 800458c:	4a0d      	ldr	r2, [pc, #52]	; (80045c4 <prvCheckForValidListAndQueue+0x5c>)
 800458e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004590:	2200      	movs	r2, #0
 8004592:	210c      	movs	r1, #12
 8004594:	200a      	movs	r0, #10
 8004596:	f7fe fa0f 	bl	80029b8 <xQueueGenericCreate>
 800459a:	4603      	mov	r3, r0
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <prvCheckForValidListAndQueue+0x54>)
 800459e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <prvCheckForValidListAndQueue+0x54>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <prvCheckForValidListAndQueue+0x54>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4908      	ldr	r1, [pc, #32]	; (80045d0 <prvCheckForValidListAndQueue+0x68>)
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fe1c 	bl	80031ec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80045b4:	f000 f970 	bl	8004898 <vPortExitCritical>
    }
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000284 	.word	0x20000284
 80045c0:	20000254 	.word	0x20000254
 80045c4:	20000268 	.word	0x20000268
 80045c8:	2000027c 	.word	0x2000027c
 80045cc:	20000280 	.word	0x20000280
 80045d0:	08005fcc 	.word	0x08005fcc

080045d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3b04      	subs	r3, #4
 80045e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3b04      	subs	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f023 0201 	bic.w	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3b04      	subs	r3, #4
 8004602:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004604:	4a0c      	ldr	r2, [pc, #48]	; (8004638 <pxPortInitialiseStack+0x64>)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3b14      	subs	r3, #20
 800460e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3b04      	subs	r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f06f 0202 	mvn.w	r2, #2
 8004622:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3b20      	subs	r3, #32
 8004628:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	0800463d 	.word	0x0800463d

0800463c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <prvTaskExitError+0x54>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d00a      	beq.n	8004666 <prvTaskExitError+0x2a>
        __asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	60fb      	str	r3, [r7, #12]
    }
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <prvTaskExitError+0x28>
        __asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60bb      	str	r3, [r7, #8]
    }
 8004678:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800467a:	bf00      	nop
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0fc      	beq.n	800467c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000010 	.word	0x20000010
	...

080046a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <pxCurrentTCBConst2>)
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6808      	ldr	r0, [r1, #0]
 80046a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	f380 8809 	msr	PSP, r0
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8811 	msr	BASEPRI, r0
 80046ba:	4770      	bx	lr
 80046bc:	f3af 8000 	nop.w

080046c0 <pxCurrentTCBConst2>:
 80046c0:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80046c8:	4808      	ldr	r0, [pc, #32]	; (80046ec <prvPortStartFirstTask+0x24>)
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	6800      	ldr	r0, [r0, #0]
 80046ce:	f380 8808 	msr	MSP, r0
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f380 8814 	msr	CONTROL, r0
 80046da:	b662      	cpsie	i
 80046dc:	b661      	cpsie	f
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	df00      	svc	0
 80046e8:	bf00      	nop
 80046ea:	0000      	.short	0x0000
 80046ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop

080046f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046fa:	4b46      	ldr	r3, [pc, #280]	; (8004814 <xPortStartScheduler+0x120>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a46      	ldr	r2, [pc, #280]	; (8004818 <xPortStartScheduler+0x124>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d10a      	bne.n	800471a <xPortStartScheduler+0x26>
        __asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	613b      	str	r3, [r7, #16]
    }
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800471a:	4b3e      	ldr	r3, [pc, #248]	; (8004814 <xPortStartScheduler+0x120>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a3f      	ldr	r2, [pc, #252]	; (800481c <xPortStartScheduler+0x128>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d10a      	bne.n	800473a <xPortStartScheduler+0x46>
        __asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60fb      	str	r3, [r7, #12]
    }
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <xPortStartScheduler+0x12c>)
 800473c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	22ff      	movs	r2, #255	; 0xff
 800474a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800475c:	b2da      	uxtb	r2, r3
 800475e:	4b31      	ldr	r3, [pc, #196]	; (8004824 <xPortStartScheduler+0x130>)
 8004760:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004762:	4b31      	ldr	r3, [pc, #196]	; (8004828 <xPortStartScheduler+0x134>)
 8004764:	2207      	movs	r2, #7
 8004766:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004768:	e009      	b.n	800477e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800476a:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <xPortStartScheduler+0x134>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3b01      	subs	r3, #1
 8004770:	4a2d      	ldr	r2, [pc, #180]	; (8004828 <xPortStartScheduler+0x134>)
 8004772:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	b2db      	uxtb	r3, r3
 800477c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d0ef      	beq.n	800476a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800478a:	4b27      	ldr	r3, [pc, #156]	; (8004828 <xPortStartScheduler+0x134>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1c3 0307 	rsb	r3, r3, #7
 8004792:	2b04      	cmp	r3, #4
 8004794:	d00a      	beq.n	80047ac <xPortStartScheduler+0xb8>
        __asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60bb      	str	r3, [r7, #8]
    }
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <xPortStartScheduler+0x134>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <xPortStartScheduler+0x134>)
 80047b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047b6:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <xPortStartScheduler+0x134>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047be:	4a1a      	ldr	r2, [pc, #104]	; (8004828 <xPortStartScheduler+0x134>)
 80047c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80047ca:	4b18      	ldr	r3, [pc, #96]	; (800482c <xPortStartScheduler+0x138>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a17      	ldr	r2, [pc, #92]	; (800482c <xPortStartScheduler+0x138>)
 80047d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <xPortStartScheduler+0x138>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a14      	ldr	r2, [pc, #80]	; (800482c <xPortStartScheduler+0x138>)
 80047dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80047e2:	f000 f8db 	bl	800499c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <xPortStartScheduler+0x13c>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80047ec:	f000 f8fa 	bl	80049e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047f0:	4b10      	ldr	r3, [pc, #64]	; (8004834 <xPortStartScheduler+0x140>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a0f      	ldr	r2, [pc, #60]	; (8004834 <xPortStartScheduler+0x140>)
 80047f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80047fc:	f7ff ff64 	bl	80046c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004800:	f7ff f890 	bl	8003924 <vTaskSwitchContext>
    prvTaskExitError();
 8004804:	f7ff ff1a 	bl	800463c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000ed00 	.word	0xe000ed00
 8004818:	410fc271 	.word	0x410fc271
 800481c:	410fc270 	.word	0x410fc270
 8004820:	e000e400 	.word	0xe000e400
 8004824:	20000290 	.word	0x20000290
 8004828:	20000294 	.word	0x20000294
 800482c:	e000ed20 	.word	0xe000ed20
 8004830:	20000010 	.word	0x20000010
 8004834:	e000ef34 	.word	0xe000ef34

08004838 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
        __asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	607b      	str	r3, [r7, #4]
    }
 8004850:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <vPortEnterCritical+0x58>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3301      	adds	r3, #1
 8004858:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <vPortEnterCritical+0x58>)
 800485a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <vPortEnterCritical+0x58>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10f      	bne.n	8004884 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <vPortEnterCritical+0x5c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <vPortEnterCritical+0x4c>
        __asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	603b      	str	r3, [r7, #0]
    }
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <vPortEnterCritical+0x4a>
    }
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	20000010 	.word	0x20000010
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800489e:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <vPortExitCritical+0x50>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <vPortExitCritical+0x24>
        __asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	607b      	str	r3, [r7, #4]
    }
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <vPortExitCritical+0x50>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <vPortExitCritical+0x50>)
 80048c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <vPortExitCritical+0x50>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <vPortExitCritical+0x42>
 80048ce:	2300      	movs	r3, #0
 80048d0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f383 8811 	msr	BASEPRI, r3
    }
 80048d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000010 	.word	0x20000010
 80048ec:	00000000 	.word	0x00000000

080048f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80048f0:	f3ef 8009 	mrs	r0, PSP
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	4b15      	ldr	r3, [pc, #84]	; (8004950 <pxCurrentTCBConst>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	f01e 0f10 	tst.w	lr, #16
 8004900:	bf08      	it	eq
 8004902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	6010      	str	r0, [r2, #0]
 800490c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004914:	f380 8811 	msr	BASEPRI, r0
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f7ff f800 	bl	8003924 <vTaskSwitchContext>
 8004924:	f04f 0000 	mov.w	r0, #0
 8004928:	f380 8811 	msr	BASEPRI, r0
 800492c:	bc09      	pop	{r0, r3}
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	6808      	ldr	r0, [r1, #0]
 8004932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004936:	f01e 0f10 	tst.w	lr, #16
 800493a:	bf08      	it	eq
 800493c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004940:	f380 8809 	msr	PSP, r0
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	f3af 8000 	nop.w

08004950 <pxCurrentTCBConst>:
 8004950:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop

08004958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
        __asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	607b      	str	r3, [r7, #4]
    }
 8004970:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004972:	f7fe ff1f 	bl	80037b4 <xTaskIncrementTick>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <SysTick_Handler+0x40>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	2300      	movs	r3, #0
 8004986:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f383 8811 	msr	BASEPRI, r3
    }
 800498e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <vPortSetupTimerInterrupt+0x34>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <vPortSetupTimerInterrupt+0x38>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <vPortSetupTimerInterrupt+0x3c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <vPortSetupTimerInterrupt+0x40>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	099b      	lsrs	r3, r3, #6
 80049b8:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <vPortSetupTimerInterrupt+0x44>)
 80049ba:	3b01      	subs	r3, #1
 80049bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <vPortSetupTimerInterrupt+0x34>)
 80049c0:	2207      	movs	r2, #7
 80049c2:	601a      	str	r2, [r3, #0]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000e010 	.word	0xe000e010
 80049d4:	e000e018 	.word	0xe000e018
 80049d8:	20000000 	.word	0x20000000
 80049dc:	10624dd3 	.word	0x10624dd3
 80049e0:	e000e014 	.word	0xe000e014

080049e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80049e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049f4 <vPortEnableVFP+0x10>
 80049e8:	6801      	ldr	r1, [r0, #0]
 80049ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ee:	6001      	str	r1, [r0, #0]
 80049f0:	4770      	bx	lr
 80049f2:	0000      	.short	0x0000
 80049f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop

080049fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a02:	f3ef 8305 	mrs	r3, IPSR
 8004a06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b0f      	cmp	r3, #15
 8004a0c:	d914      	bls.n	8004a38 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <vPortValidateInterruptPriority+0x70>)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <vPortValidateInterruptPriority+0x74>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	7afa      	ldrb	r2, [r7, #11]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d20a      	bcs.n	8004a38 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	607b      	str	r3, [r7, #4]
    }
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <vPortValidateInterruptPriority+0x78>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <vPortValidateInterruptPriority+0x7c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d90a      	bls.n	8004a5e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	603b      	str	r3, [r7, #0]
    }
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <vPortValidateInterruptPriority+0x60>
    }
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	e000e3f0 	.word	0xe000e3f0
 8004a70:	20000290 	.word	0x20000290
 8004a74:	e000ed0c 	.word	0xe000ed0c
 8004a78:	20000294 	.word	0x20000294

08004a7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004a88:	f7fe fdda 	bl	8003640 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a8c:	4b65      	ldr	r3, [pc, #404]	; (8004c24 <pvPortMalloc+0x1a8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a94:	f000 f934 	bl	8004d00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a98:	4b63      	ldr	r3, [pc, #396]	; (8004c28 <pvPortMalloc+0x1ac>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 80a7 	bne.w	8004bf4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02d      	beq.n	8004b08 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004aac:	2208      	movs	r2, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d227      	bcs.n	8004b08 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004ab8:	2208      	movs	r2, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d021      	beq.n	8004b0e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f023 0307 	bic.w	r3, r3, #7
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d214      	bcs.n	8004b02 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	3308      	adds	r3, #8
 8004ae0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d010      	beq.n	8004b0e <pvPortMalloc+0x92>
        __asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	617b      	str	r3, [r7, #20]
    }
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b06:	e002      	b.n	8004b0e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	607b      	str	r3, [r7, #4]
 8004b0c:	e000      	b.n	8004b10 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b0e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d06e      	beq.n	8004bf4 <pvPortMalloc+0x178>
 8004b16:	4b45      	ldr	r3, [pc, #276]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d869      	bhi.n	8004bf4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b20:	4b43      	ldr	r3, [pc, #268]	; (8004c30 <pvPortMalloc+0x1b4>)
 8004b22:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b24:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <pvPortMalloc+0x1b4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b2a:	e004      	b.n	8004b36 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d903      	bls.n	8004b48 <pvPortMalloc+0xcc>
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f1      	bne.n	8004b2c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b48:	4b36      	ldr	r3, [pc, #216]	; (8004c24 <pvPortMalloc+0x1a8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d050      	beq.n	8004bf4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2208      	movs	r2, #8
 8004b58:	4413      	add	r3, r2
 8004b5a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	1ad2      	subs	r2, r2, r3
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d91f      	bls.n	8004bb4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <pvPortMalloc+0x120>
        __asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	613b      	str	r3, [r7, #16]
    }
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	1ad2      	subs	r2, r2, r3
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bae:	69b8      	ldr	r0, [r7, #24]
 8004bb0:	f000 f908 	bl	8004dc4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004bc0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <pvPortMalloc+0x1b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d203      	bcs.n	8004bd6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <pvPortMalloc+0x1b0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <pvPortMalloc+0x1b8>)
 8004bd4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <pvPortMalloc+0x1ac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <pvPortMalloc+0x1bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	4a11      	ldr	r2, [pc, #68]	; (8004c38 <pvPortMalloc+0x1bc>)
 8004bf2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004bf4:	f7fe fd32 	bl	800365c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <pvPortMalloc+0x19c>
        __asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60fb      	str	r3, [r7, #12]
    }
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <pvPortMalloc+0x19a>
    return pvReturn;
 8004c18:	69fb      	ldr	r3, [r7, #28]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3728      	adds	r7, #40	; 0x28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200016a0 	.word	0x200016a0
 8004c28:	200016b4 	.word	0x200016b4
 8004c2c:	200016a4 	.word	0x200016a4
 8004c30:	20001698 	.word	0x20001698
 8004c34:	200016a8 	.word	0x200016a8
 8004c38:	200016ac 	.word	0x200016ac

08004c3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d04d      	beq.n	8004cea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c4e:	2308      	movs	r3, #8
 8004c50:	425b      	negs	r3, r3
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4413      	add	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <vPortFree+0xb8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <vPortFree+0x44>
        __asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60fb      	str	r3, [r7, #12]
    }
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <vPortFree+0x62>
        __asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	60bb      	str	r3, [r7, #8]
    }
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <vPortFree+0xb8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01e      	beq.n	8004cea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11a      	bne.n	8004cea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <vPortFree+0xb8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004cc4:	f7fe fcbc 	bl	8003640 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <vPortFree+0xbc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <vPortFree+0xbc>)
 8004cd4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cd6:	6938      	ldr	r0, [r7, #16]
 8004cd8:	f000 f874 	bl	8004dc4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <vPortFree+0xc0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	4a06      	ldr	r2, [pc, #24]	; (8004cfc <vPortFree+0xc0>)
 8004ce4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ce6:	f7fe fcb9 	bl	800365c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200016b4 	.word	0x200016b4
 8004cf8:	200016a4 	.word	0x200016a4
 8004cfc:	200016b0 	.word	0x200016b0

08004d00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004d0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004d0c:	4b27      	ldr	r3, [pc, #156]	; (8004dac <prvHeapInit+0xac>)
 8004d0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00c      	beq.n	8004d34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3307      	adds	r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0307 	bic.w	r3, r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <prvHeapInit+0xac>)
 8004d30:	4413      	add	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d38:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <prvHeapInit+0xb0>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <prvHeapInit+0xb0>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	4413      	add	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0307 	bic.w	r3, r3, #7
 8004d5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <prvHeapInit+0xb4>)
 8004d60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <prvHeapInit+0xb4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2200      	movs	r2, #0
 8004d68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <prvHeapInit+0xb4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	1ad2      	subs	r2, r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <prvHeapInit+0xb4>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <prvHeapInit+0xb8>)
 8004d8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <prvHeapInit+0xbc>)
 8004d96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <prvHeapInit+0xc0>)
 8004d9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d9e:	601a      	str	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20000298 	.word	0x20000298
 8004db0:	20001698 	.word	0x20001698
 8004db4:	200016a0 	.word	0x200016a0
 8004db8:	200016a8 	.word	0x200016a8
 8004dbc:	200016a4 	.word	0x200016a4
 8004dc0:	200016b4 	.word	0x200016b4

08004dc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <prvInsertBlockIntoFreeList+0xac>)
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e002      	b.n	8004dd8 <prvInsertBlockIntoFreeList+0x14>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d8f7      	bhi.n	8004dd2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	4413      	add	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d108      	bne.n	8004e06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	441a      	add	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	441a      	add	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d118      	bne.n	8004e4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <prvInsertBlockIntoFreeList+0xb0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d00d      	beq.n	8004e42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	441a      	add	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e008      	b.n	8004e54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <prvInsertBlockIntoFreeList+0xb0>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e003      	b.n	8004e54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d002      	beq.n	8004e62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20001698 	.word	0x20001698
 8004e74:	200016a0 	.word	0x200016a0

08004e78 <__libc_init_array>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	4d0d      	ldr	r5, [pc, #52]	; (8004eb0 <__libc_init_array+0x38>)
 8004e7c:	4c0d      	ldr	r4, [pc, #52]	; (8004eb4 <__libc_init_array+0x3c>)
 8004e7e:	1b64      	subs	r4, r4, r5
 8004e80:	10a4      	asrs	r4, r4, #2
 8004e82:	2600      	movs	r6, #0
 8004e84:	42a6      	cmp	r6, r4
 8004e86:	d109      	bne.n	8004e9c <__libc_init_array+0x24>
 8004e88:	4d0b      	ldr	r5, [pc, #44]	; (8004eb8 <__libc_init_array+0x40>)
 8004e8a:	4c0c      	ldr	r4, [pc, #48]	; (8004ebc <__libc_init_array+0x44>)
 8004e8c:	f001 f840 	bl	8005f10 <_init>
 8004e90:	1b64      	subs	r4, r4, r5
 8004e92:	10a4      	asrs	r4, r4, #2
 8004e94:	2600      	movs	r6, #0
 8004e96:	42a6      	cmp	r6, r4
 8004e98:	d105      	bne.n	8004ea6 <__libc_init_array+0x2e>
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea0:	4798      	blx	r3
 8004ea2:	3601      	adds	r6, #1
 8004ea4:	e7ee      	b.n	8004e84 <__libc_init_array+0xc>
 8004ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eaa:	4798      	blx	r3
 8004eac:	3601      	adds	r6, #1
 8004eae:	e7f2      	b.n	8004e96 <__libc_init_array+0x1e>
 8004eb0:	080060a4 	.word	0x080060a4
 8004eb4:	080060a4 	.word	0x080060a4
 8004eb8:	080060a4 	.word	0x080060a4
 8004ebc:	080060a8 	.word	0x080060a8

08004ec0 <memcpy>:
 8004ec0:	440a      	add	r2, r1
 8004ec2:	4291      	cmp	r1, r2
 8004ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec8:	d100      	bne.n	8004ecc <memcpy+0xc>
 8004eca:	4770      	bx	lr
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ed6:	4291      	cmp	r1, r2
 8004ed8:	d1f9      	bne.n	8004ece <memcpy+0xe>
 8004eda:	bd10      	pop	{r4, pc}

08004edc <memset>:
 8004edc:	4402      	add	r2, r0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <memset+0xa>
 8004ee4:	4770      	bx	lr
 8004ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eea:	e7f9      	b.n	8004ee0 <memset+0x4>

08004eec <iprintf>:
 8004eec:	b40f      	push	{r0, r1, r2, r3}
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <iprintf+0x2c>)
 8004ef0:	b513      	push	{r0, r1, r4, lr}
 8004ef2:	681c      	ldr	r4, [r3, #0]
 8004ef4:	b124      	cbz	r4, 8004f00 <iprintf+0x14>
 8004ef6:	69a3      	ldr	r3, [r4, #24]
 8004ef8:	b913      	cbnz	r3, 8004f00 <iprintf+0x14>
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 fa5e 	bl	80053bc <__sinit>
 8004f00:	ab05      	add	r3, sp, #20
 8004f02:	9a04      	ldr	r2, [sp, #16]
 8004f04:	68a1      	ldr	r1, [r4, #8]
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 fc67 	bl	80057dc <_vfiprintf_r>
 8004f0e:	b002      	add	sp, #8
 8004f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f14:	b004      	add	sp, #16
 8004f16:	4770      	bx	lr
 8004f18:	20000014 	.word	0x20000014

08004f1c <_puts_r>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	460e      	mov	r6, r1
 8004f20:	4605      	mov	r5, r0
 8004f22:	b118      	cbz	r0, 8004f2c <_puts_r+0x10>
 8004f24:	6983      	ldr	r3, [r0, #24]
 8004f26:	b90b      	cbnz	r3, 8004f2c <_puts_r+0x10>
 8004f28:	f000 fa48 	bl	80053bc <__sinit>
 8004f2c:	69ab      	ldr	r3, [r5, #24]
 8004f2e:	68ac      	ldr	r4, [r5, #8]
 8004f30:	b913      	cbnz	r3, 8004f38 <_puts_r+0x1c>
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 fa42 	bl	80053bc <__sinit>
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <_puts_r+0xd0>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d120      	bne.n	8004f80 <_puts_r+0x64>
 8004f3e:	686c      	ldr	r4, [r5, #4]
 8004f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f42:	07db      	lsls	r3, r3, #31
 8004f44:	d405      	bmi.n	8004f52 <_puts_r+0x36>
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	0598      	lsls	r0, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <_puts_r+0x36>
 8004f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f4e:	f000 fad3 	bl	80054f8 <__retarget_lock_acquire_recursive>
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	0719      	lsls	r1, r3, #28
 8004f56:	d51d      	bpl.n	8004f94 <_puts_r+0x78>
 8004f58:	6923      	ldr	r3, [r4, #16]
 8004f5a:	b1db      	cbz	r3, 8004f94 <_puts_r+0x78>
 8004f5c:	3e01      	subs	r6, #1
 8004f5e:	68a3      	ldr	r3, [r4, #8]
 8004f60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f64:	3b01      	subs	r3, #1
 8004f66:	60a3      	str	r3, [r4, #8]
 8004f68:	bb39      	cbnz	r1, 8004fba <_puts_r+0x9e>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da38      	bge.n	8004fe0 <_puts_r+0xc4>
 8004f6e:	4622      	mov	r2, r4
 8004f70:	210a      	movs	r1, #10
 8004f72:	4628      	mov	r0, r5
 8004f74:	f000 f848 	bl	8005008 <__swbuf_r>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d011      	beq.n	8004fa0 <_puts_r+0x84>
 8004f7c:	250a      	movs	r5, #10
 8004f7e:	e011      	b.n	8004fa4 <_puts_r+0x88>
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <_puts_r+0xd4>)
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d101      	bne.n	8004f8a <_puts_r+0x6e>
 8004f86:	68ac      	ldr	r4, [r5, #8]
 8004f88:	e7da      	b.n	8004f40 <_puts_r+0x24>
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <_puts_r+0xd8>)
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	bf08      	it	eq
 8004f90:	68ec      	ldreq	r4, [r5, #12]
 8004f92:	e7d5      	b.n	8004f40 <_puts_r+0x24>
 8004f94:	4621      	mov	r1, r4
 8004f96:	4628      	mov	r0, r5
 8004f98:	f000 f888 	bl	80050ac <__swsetup_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d0dd      	beq.n	8004f5c <_puts_r+0x40>
 8004fa0:	f04f 35ff 	mov.w	r5, #4294967295
 8004fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fa6:	07da      	lsls	r2, r3, #31
 8004fa8:	d405      	bmi.n	8004fb6 <_puts_r+0x9a>
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	059b      	lsls	r3, r3, #22
 8004fae:	d402      	bmi.n	8004fb6 <_puts_r+0x9a>
 8004fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb2:	f000 faa2 	bl	80054fa <__retarget_lock_release_recursive>
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da04      	bge.n	8004fc8 <_puts_r+0xac>
 8004fbe:	69a2      	ldr	r2, [r4, #24]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	dc06      	bgt.n	8004fd2 <_puts_r+0xb6>
 8004fc4:	290a      	cmp	r1, #10
 8004fc6:	d004      	beq.n	8004fd2 <_puts_r+0xb6>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	6022      	str	r2, [r4, #0]
 8004fce:	7019      	strb	r1, [r3, #0]
 8004fd0:	e7c5      	b.n	8004f5e <_puts_r+0x42>
 8004fd2:	4622      	mov	r2, r4
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f000 f817 	bl	8005008 <__swbuf_r>
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d1bf      	bne.n	8004f5e <_puts_r+0x42>
 8004fde:	e7df      	b.n	8004fa0 <_puts_r+0x84>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	250a      	movs	r5, #10
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	701d      	strb	r5, [r3, #0]
 8004fea:	e7db      	b.n	8004fa4 <_puts_r+0x88>
 8004fec:	08006030 	.word	0x08006030
 8004ff0:	08006050 	.word	0x08006050
 8004ff4:	08006010 	.word	0x08006010

08004ff8 <puts>:
 8004ff8:	4b02      	ldr	r3, [pc, #8]	; (8005004 <puts+0xc>)
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	f7ff bf8d 	b.w	8004f1c <_puts_r>
 8005002:	bf00      	nop
 8005004:	20000014 	.word	0x20000014

08005008 <__swbuf_r>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	460e      	mov	r6, r1
 800500c:	4614      	mov	r4, r2
 800500e:	4605      	mov	r5, r0
 8005010:	b118      	cbz	r0, 800501a <__swbuf_r+0x12>
 8005012:	6983      	ldr	r3, [r0, #24]
 8005014:	b90b      	cbnz	r3, 800501a <__swbuf_r+0x12>
 8005016:	f000 f9d1 	bl	80053bc <__sinit>
 800501a:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <__swbuf_r+0x98>)
 800501c:	429c      	cmp	r4, r3
 800501e:	d12b      	bne.n	8005078 <__swbuf_r+0x70>
 8005020:	686c      	ldr	r4, [r5, #4]
 8005022:	69a3      	ldr	r3, [r4, #24]
 8005024:	60a3      	str	r3, [r4, #8]
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	071a      	lsls	r2, r3, #28
 800502a:	d52f      	bpl.n	800508c <__swbuf_r+0x84>
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	b36b      	cbz	r3, 800508c <__swbuf_r+0x84>
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	6820      	ldr	r0, [r4, #0]
 8005034:	1ac0      	subs	r0, r0, r3
 8005036:	6963      	ldr	r3, [r4, #20]
 8005038:	b2f6      	uxtb	r6, r6
 800503a:	4283      	cmp	r3, r0
 800503c:	4637      	mov	r7, r6
 800503e:	dc04      	bgt.n	800504a <__swbuf_r+0x42>
 8005040:	4621      	mov	r1, r4
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f926 	bl	8005294 <_fflush_r>
 8005048:	bb30      	cbnz	r0, 8005098 <__swbuf_r+0x90>
 800504a:	68a3      	ldr	r3, [r4, #8]
 800504c:	3b01      	subs	r3, #1
 800504e:	60a3      	str	r3, [r4, #8]
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	6022      	str	r2, [r4, #0]
 8005056:	701e      	strb	r6, [r3, #0]
 8005058:	6963      	ldr	r3, [r4, #20]
 800505a:	3001      	adds	r0, #1
 800505c:	4283      	cmp	r3, r0
 800505e:	d004      	beq.n	800506a <__swbuf_r+0x62>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	07db      	lsls	r3, r3, #31
 8005064:	d506      	bpl.n	8005074 <__swbuf_r+0x6c>
 8005066:	2e0a      	cmp	r6, #10
 8005068:	d104      	bne.n	8005074 <__swbuf_r+0x6c>
 800506a:	4621      	mov	r1, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f911 	bl	8005294 <_fflush_r>
 8005072:	b988      	cbnz	r0, 8005098 <__swbuf_r+0x90>
 8005074:	4638      	mov	r0, r7
 8005076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005078:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <__swbuf_r+0x9c>)
 800507a:	429c      	cmp	r4, r3
 800507c:	d101      	bne.n	8005082 <__swbuf_r+0x7a>
 800507e:	68ac      	ldr	r4, [r5, #8]
 8005080:	e7cf      	b.n	8005022 <__swbuf_r+0x1a>
 8005082:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <__swbuf_r+0xa0>)
 8005084:	429c      	cmp	r4, r3
 8005086:	bf08      	it	eq
 8005088:	68ec      	ldreq	r4, [r5, #12]
 800508a:	e7ca      	b.n	8005022 <__swbuf_r+0x1a>
 800508c:	4621      	mov	r1, r4
 800508e:	4628      	mov	r0, r5
 8005090:	f000 f80c 	bl	80050ac <__swsetup_r>
 8005094:	2800      	cmp	r0, #0
 8005096:	d0cb      	beq.n	8005030 <__swbuf_r+0x28>
 8005098:	f04f 37ff 	mov.w	r7, #4294967295
 800509c:	e7ea      	b.n	8005074 <__swbuf_r+0x6c>
 800509e:	bf00      	nop
 80050a0:	08006030 	.word	0x08006030
 80050a4:	08006050 	.word	0x08006050
 80050a8:	08006010 	.word	0x08006010

080050ac <__swsetup_r>:
 80050ac:	4b32      	ldr	r3, [pc, #200]	; (8005178 <__swsetup_r+0xcc>)
 80050ae:	b570      	push	{r4, r5, r6, lr}
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	4606      	mov	r6, r0
 80050b4:	460c      	mov	r4, r1
 80050b6:	b125      	cbz	r5, 80050c2 <__swsetup_r+0x16>
 80050b8:	69ab      	ldr	r3, [r5, #24]
 80050ba:	b913      	cbnz	r3, 80050c2 <__swsetup_r+0x16>
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 f97d 	bl	80053bc <__sinit>
 80050c2:	4b2e      	ldr	r3, [pc, #184]	; (800517c <__swsetup_r+0xd0>)
 80050c4:	429c      	cmp	r4, r3
 80050c6:	d10f      	bne.n	80050e8 <__swsetup_r+0x3c>
 80050c8:	686c      	ldr	r4, [r5, #4]
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050d0:	0719      	lsls	r1, r3, #28
 80050d2:	d42c      	bmi.n	800512e <__swsetup_r+0x82>
 80050d4:	06dd      	lsls	r5, r3, #27
 80050d6:	d411      	bmi.n	80050fc <__swsetup_r+0x50>
 80050d8:	2309      	movs	r3, #9
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	f04f 30ff 	mov.w	r0, #4294967295
 80050e6:	e03e      	b.n	8005166 <__swsetup_r+0xba>
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <__swsetup_r+0xd4>)
 80050ea:	429c      	cmp	r4, r3
 80050ec:	d101      	bne.n	80050f2 <__swsetup_r+0x46>
 80050ee:	68ac      	ldr	r4, [r5, #8]
 80050f0:	e7eb      	b.n	80050ca <__swsetup_r+0x1e>
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <__swsetup_r+0xd8>)
 80050f4:	429c      	cmp	r4, r3
 80050f6:	bf08      	it	eq
 80050f8:	68ec      	ldreq	r4, [r5, #12]
 80050fa:	e7e6      	b.n	80050ca <__swsetup_r+0x1e>
 80050fc:	0758      	lsls	r0, r3, #29
 80050fe:	d512      	bpl.n	8005126 <__swsetup_r+0x7a>
 8005100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005102:	b141      	cbz	r1, 8005116 <__swsetup_r+0x6a>
 8005104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005108:	4299      	cmp	r1, r3
 800510a:	d002      	beq.n	8005112 <__swsetup_r+0x66>
 800510c:	4630      	mov	r0, r6
 800510e:	f000 fa5b 	bl	80055c8 <_free_r>
 8005112:	2300      	movs	r3, #0
 8005114:	6363      	str	r3, [r4, #52]	; 0x34
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	2300      	movs	r3, #0
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	f043 0308 	orr.w	r3, r3, #8
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	b94b      	cbnz	r3, 8005146 <__swsetup_r+0x9a>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513c:	d003      	beq.n	8005146 <__swsetup_r+0x9a>
 800513e:	4621      	mov	r1, r4
 8005140:	4630      	mov	r0, r6
 8005142:	f000 fa01 	bl	8005548 <__smakebuf_r>
 8005146:	89a0      	ldrh	r0, [r4, #12]
 8005148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800514c:	f010 0301 	ands.w	r3, r0, #1
 8005150:	d00a      	beq.n	8005168 <__swsetup_r+0xbc>
 8005152:	2300      	movs	r3, #0
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6963      	ldr	r3, [r4, #20]
 8005158:	425b      	negs	r3, r3
 800515a:	61a3      	str	r3, [r4, #24]
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	b943      	cbnz	r3, 8005172 <__swsetup_r+0xc6>
 8005160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005164:	d1ba      	bne.n	80050dc <__swsetup_r+0x30>
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	0781      	lsls	r1, r0, #30
 800516a:	bf58      	it	pl
 800516c:	6963      	ldrpl	r3, [r4, #20]
 800516e:	60a3      	str	r3, [r4, #8]
 8005170:	e7f4      	b.n	800515c <__swsetup_r+0xb0>
 8005172:	2000      	movs	r0, #0
 8005174:	e7f7      	b.n	8005166 <__swsetup_r+0xba>
 8005176:	bf00      	nop
 8005178:	20000014 	.word	0x20000014
 800517c:	08006030 	.word	0x08006030
 8005180:	08006050 	.word	0x08006050
 8005184:	08006010 	.word	0x08006010

08005188 <__sflush_r>:
 8005188:	898a      	ldrh	r2, [r1, #12]
 800518a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518e:	4605      	mov	r5, r0
 8005190:	0710      	lsls	r0, r2, #28
 8005192:	460c      	mov	r4, r1
 8005194:	d458      	bmi.n	8005248 <__sflush_r+0xc0>
 8005196:	684b      	ldr	r3, [r1, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dc05      	bgt.n	80051a8 <__sflush_r+0x20>
 800519c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	dc02      	bgt.n	80051a8 <__sflush_r+0x20>
 80051a2:	2000      	movs	r0, #0
 80051a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d0f9      	beq.n	80051a2 <__sflush_r+0x1a>
 80051ae:	2300      	movs	r3, #0
 80051b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051b4:	682f      	ldr	r7, [r5, #0]
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	d032      	beq.n	8005220 <__sflush_r+0x98>
 80051ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	075a      	lsls	r2, r3, #29
 80051c0:	d505      	bpl.n	80051ce <__sflush_r+0x46>
 80051c2:	6863      	ldr	r3, [r4, #4]
 80051c4:	1ac0      	subs	r0, r0, r3
 80051c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051c8:	b10b      	cbz	r3, 80051ce <__sflush_r+0x46>
 80051ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051cc:	1ac0      	subs	r0, r0, r3
 80051ce:	2300      	movs	r3, #0
 80051d0:	4602      	mov	r2, r0
 80051d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051d4:	6a21      	ldr	r1, [r4, #32]
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b0      	blx	r6
 80051da:	1c43      	adds	r3, r0, #1
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	d106      	bne.n	80051ee <__sflush_r+0x66>
 80051e0:	6829      	ldr	r1, [r5, #0]
 80051e2:	291d      	cmp	r1, #29
 80051e4:	d82c      	bhi.n	8005240 <__sflush_r+0xb8>
 80051e6:	4a2a      	ldr	r2, [pc, #168]	; (8005290 <__sflush_r+0x108>)
 80051e8:	40ca      	lsrs	r2, r1
 80051ea:	07d6      	lsls	r6, r2, #31
 80051ec:	d528      	bpl.n	8005240 <__sflush_r+0xb8>
 80051ee:	2200      	movs	r2, #0
 80051f0:	6062      	str	r2, [r4, #4]
 80051f2:	04d9      	lsls	r1, r3, #19
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	6022      	str	r2, [r4, #0]
 80051f8:	d504      	bpl.n	8005204 <__sflush_r+0x7c>
 80051fa:	1c42      	adds	r2, r0, #1
 80051fc:	d101      	bne.n	8005202 <__sflush_r+0x7a>
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	b903      	cbnz	r3, 8005204 <__sflush_r+0x7c>
 8005202:	6560      	str	r0, [r4, #84]	; 0x54
 8005204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005206:	602f      	str	r7, [r5, #0]
 8005208:	2900      	cmp	r1, #0
 800520a:	d0ca      	beq.n	80051a2 <__sflush_r+0x1a>
 800520c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005210:	4299      	cmp	r1, r3
 8005212:	d002      	beq.n	800521a <__sflush_r+0x92>
 8005214:	4628      	mov	r0, r5
 8005216:	f000 f9d7 	bl	80055c8 <_free_r>
 800521a:	2000      	movs	r0, #0
 800521c:	6360      	str	r0, [r4, #52]	; 0x34
 800521e:	e7c1      	b.n	80051a4 <__sflush_r+0x1c>
 8005220:	6a21      	ldr	r1, [r4, #32]
 8005222:	2301      	movs	r3, #1
 8005224:	4628      	mov	r0, r5
 8005226:	47b0      	blx	r6
 8005228:	1c41      	adds	r1, r0, #1
 800522a:	d1c7      	bne.n	80051bc <__sflush_r+0x34>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0c4      	beq.n	80051bc <__sflush_r+0x34>
 8005232:	2b1d      	cmp	r3, #29
 8005234:	d001      	beq.n	800523a <__sflush_r+0xb2>
 8005236:	2b16      	cmp	r3, #22
 8005238:	d101      	bne.n	800523e <__sflush_r+0xb6>
 800523a:	602f      	str	r7, [r5, #0]
 800523c:	e7b1      	b.n	80051a2 <__sflush_r+0x1a>
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	e7ad      	b.n	80051a4 <__sflush_r+0x1c>
 8005248:	690f      	ldr	r7, [r1, #16]
 800524a:	2f00      	cmp	r7, #0
 800524c:	d0a9      	beq.n	80051a2 <__sflush_r+0x1a>
 800524e:	0793      	lsls	r3, r2, #30
 8005250:	680e      	ldr	r6, [r1, #0]
 8005252:	bf08      	it	eq
 8005254:	694b      	ldreq	r3, [r1, #20]
 8005256:	600f      	str	r7, [r1, #0]
 8005258:	bf18      	it	ne
 800525a:	2300      	movne	r3, #0
 800525c:	eba6 0807 	sub.w	r8, r6, r7
 8005260:	608b      	str	r3, [r1, #8]
 8005262:	f1b8 0f00 	cmp.w	r8, #0
 8005266:	dd9c      	ble.n	80051a2 <__sflush_r+0x1a>
 8005268:	6a21      	ldr	r1, [r4, #32]
 800526a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800526c:	4643      	mov	r3, r8
 800526e:	463a      	mov	r2, r7
 8005270:	4628      	mov	r0, r5
 8005272:	47b0      	blx	r6
 8005274:	2800      	cmp	r0, #0
 8005276:	dc06      	bgt.n	8005286 <__sflush_r+0xfe>
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	e78e      	b.n	80051a4 <__sflush_r+0x1c>
 8005286:	4407      	add	r7, r0
 8005288:	eba8 0800 	sub.w	r8, r8, r0
 800528c:	e7e9      	b.n	8005262 <__sflush_r+0xda>
 800528e:	bf00      	nop
 8005290:	20400001 	.word	0x20400001

08005294 <_fflush_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	690b      	ldr	r3, [r1, #16]
 8005298:	4605      	mov	r5, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b913      	cbnz	r3, 80052a4 <_fflush_r+0x10>
 800529e:	2500      	movs	r5, #0
 80052a0:	4628      	mov	r0, r5
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	b118      	cbz	r0, 80052ae <_fflush_r+0x1a>
 80052a6:	6983      	ldr	r3, [r0, #24]
 80052a8:	b90b      	cbnz	r3, 80052ae <_fflush_r+0x1a>
 80052aa:	f000 f887 	bl	80053bc <__sinit>
 80052ae:	4b14      	ldr	r3, [pc, #80]	; (8005300 <_fflush_r+0x6c>)
 80052b0:	429c      	cmp	r4, r3
 80052b2:	d11b      	bne.n	80052ec <_fflush_r+0x58>
 80052b4:	686c      	ldr	r4, [r5, #4]
 80052b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ef      	beq.n	800529e <_fflush_r+0xa>
 80052be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052c0:	07d0      	lsls	r0, r2, #31
 80052c2:	d404      	bmi.n	80052ce <_fflush_r+0x3a>
 80052c4:	0599      	lsls	r1, r3, #22
 80052c6:	d402      	bmi.n	80052ce <_fflush_r+0x3a>
 80052c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ca:	f000 f915 	bl	80054f8 <__retarget_lock_acquire_recursive>
 80052ce:	4628      	mov	r0, r5
 80052d0:	4621      	mov	r1, r4
 80052d2:	f7ff ff59 	bl	8005188 <__sflush_r>
 80052d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052d8:	07da      	lsls	r2, r3, #31
 80052da:	4605      	mov	r5, r0
 80052dc:	d4e0      	bmi.n	80052a0 <_fflush_r+0xc>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	059b      	lsls	r3, r3, #22
 80052e2:	d4dd      	bmi.n	80052a0 <_fflush_r+0xc>
 80052e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e6:	f000 f908 	bl	80054fa <__retarget_lock_release_recursive>
 80052ea:	e7d9      	b.n	80052a0 <_fflush_r+0xc>
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <_fflush_r+0x70>)
 80052ee:	429c      	cmp	r4, r3
 80052f0:	d101      	bne.n	80052f6 <_fflush_r+0x62>
 80052f2:	68ac      	ldr	r4, [r5, #8]
 80052f4:	e7df      	b.n	80052b6 <_fflush_r+0x22>
 80052f6:	4b04      	ldr	r3, [pc, #16]	; (8005308 <_fflush_r+0x74>)
 80052f8:	429c      	cmp	r4, r3
 80052fa:	bf08      	it	eq
 80052fc:	68ec      	ldreq	r4, [r5, #12]
 80052fe:	e7da      	b.n	80052b6 <_fflush_r+0x22>
 8005300:	08006030 	.word	0x08006030
 8005304:	08006050 	.word	0x08006050
 8005308:	08006010 	.word	0x08006010

0800530c <std>:
 800530c:	2300      	movs	r3, #0
 800530e:	b510      	push	{r4, lr}
 8005310:	4604      	mov	r4, r0
 8005312:	e9c0 3300 	strd	r3, r3, [r0]
 8005316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800531a:	6083      	str	r3, [r0, #8]
 800531c:	8181      	strh	r1, [r0, #12]
 800531e:	6643      	str	r3, [r0, #100]	; 0x64
 8005320:	81c2      	strh	r2, [r0, #14]
 8005322:	6183      	str	r3, [r0, #24]
 8005324:	4619      	mov	r1, r3
 8005326:	2208      	movs	r2, #8
 8005328:	305c      	adds	r0, #92	; 0x5c
 800532a:	f7ff fdd7 	bl	8004edc <memset>
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <std+0x38>)
 8005330:	6263      	str	r3, [r4, #36]	; 0x24
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <std+0x3c>)
 8005334:	62a3      	str	r3, [r4, #40]	; 0x28
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <std+0x40>)
 8005338:	62e3      	str	r3, [r4, #44]	; 0x2c
 800533a:	4b05      	ldr	r3, [pc, #20]	; (8005350 <std+0x44>)
 800533c:	6224      	str	r4, [r4, #32]
 800533e:	6323      	str	r3, [r4, #48]	; 0x30
 8005340:	bd10      	pop	{r4, pc}
 8005342:	bf00      	nop
 8005344:	08005d85 	.word	0x08005d85
 8005348:	08005da7 	.word	0x08005da7
 800534c:	08005ddf 	.word	0x08005ddf
 8005350:	08005e03 	.word	0x08005e03

08005354 <_cleanup_r>:
 8005354:	4901      	ldr	r1, [pc, #4]	; (800535c <_cleanup_r+0x8>)
 8005356:	f000 b8af 	b.w	80054b8 <_fwalk_reent>
 800535a:	bf00      	nop
 800535c:	08005295 	.word	0x08005295

08005360 <__sfmoreglue>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	2268      	movs	r2, #104	; 0x68
 8005364:	1e4d      	subs	r5, r1, #1
 8005366:	4355      	muls	r5, r2
 8005368:	460e      	mov	r6, r1
 800536a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800536e:	f000 f997 	bl	80056a0 <_malloc_r>
 8005372:	4604      	mov	r4, r0
 8005374:	b140      	cbz	r0, 8005388 <__sfmoreglue+0x28>
 8005376:	2100      	movs	r1, #0
 8005378:	e9c0 1600 	strd	r1, r6, [r0]
 800537c:	300c      	adds	r0, #12
 800537e:	60a0      	str	r0, [r4, #8]
 8005380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005384:	f7ff fdaa 	bl	8004edc <memset>
 8005388:	4620      	mov	r0, r4
 800538a:	bd70      	pop	{r4, r5, r6, pc}

0800538c <__sfp_lock_acquire>:
 800538c:	4801      	ldr	r0, [pc, #4]	; (8005394 <__sfp_lock_acquire+0x8>)
 800538e:	f000 b8b3 	b.w	80054f8 <__retarget_lock_acquire_recursive>
 8005392:	bf00      	nop
 8005394:	200016b9 	.word	0x200016b9

08005398 <__sfp_lock_release>:
 8005398:	4801      	ldr	r0, [pc, #4]	; (80053a0 <__sfp_lock_release+0x8>)
 800539a:	f000 b8ae 	b.w	80054fa <__retarget_lock_release_recursive>
 800539e:	bf00      	nop
 80053a0:	200016b9 	.word	0x200016b9

080053a4 <__sinit_lock_acquire>:
 80053a4:	4801      	ldr	r0, [pc, #4]	; (80053ac <__sinit_lock_acquire+0x8>)
 80053a6:	f000 b8a7 	b.w	80054f8 <__retarget_lock_acquire_recursive>
 80053aa:	bf00      	nop
 80053ac:	200016ba 	.word	0x200016ba

080053b0 <__sinit_lock_release>:
 80053b0:	4801      	ldr	r0, [pc, #4]	; (80053b8 <__sinit_lock_release+0x8>)
 80053b2:	f000 b8a2 	b.w	80054fa <__retarget_lock_release_recursive>
 80053b6:	bf00      	nop
 80053b8:	200016ba 	.word	0x200016ba

080053bc <__sinit>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4604      	mov	r4, r0
 80053c0:	f7ff fff0 	bl	80053a4 <__sinit_lock_acquire>
 80053c4:	69a3      	ldr	r3, [r4, #24]
 80053c6:	b11b      	cbz	r3, 80053d0 <__sinit+0x14>
 80053c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053cc:	f7ff bff0 	b.w	80053b0 <__sinit_lock_release>
 80053d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053d4:	6523      	str	r3, [r4, #80]	; 0x50
 80053d6:	4b13      	ldr	r3, [pc, #76]	; (8005424 <__sinit+0x68>)
 80053d8:	4a13      	ldr	r2, [pc, #76]	; (8005428 <__sinit+0x6c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80053de:	42a3      	cmp	r3, r4
 80053e0:	bf04      	itt	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	61a3      	streq	r3, [r4, #24]
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 f820 	bl	800542c <__sfp>
 80053ec:	6060      	str	r0, [r4, #4]
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 f81c 	bl	800542c <__sfp>
 80053f4:	60a0      	str	r0, [r4, #8]
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 f818 	bl	800542c <__sfp>
 80053fc:	2200      	movs	r2, #0
 80053fe:	60e0      	str	r0, [r4, #12]
 8005400:	2104      	movs	r1, #4
 8005402:	6860      	ldr	r0, [r4, #4]
 8005404:	f7ff ff82 	bl	800530c <std>
 8005408:	68a0      	ldr	r0, [r4, #8]
 800540a:	2201      	movs	r2, #1
 800540c:	2109      	movs	r1, #9
 800540e:	f7ff ff7d 	bl	800530c <std>
 8005412:	68e0      	ldr	r0, [r4, #12]
 8005414:	2202      	movs	r2, #2
 8005416:	2112      	movs	r1, #18
 8005418:	f7ff ff78 	bl	800530c <std>
 800541c:	2301      	movs	r3, #1
 800541e:	61a3      	str	r3, [r4, #24]
 8005420:	e7d2      	b.n	80053c8 <__sinit+0xc>
 8005422:	bf00      	nop
 8005424:	0800600c 	.word	0x0800600c
 8005428:	08005355 	.word	0x08005355

0800542c <__sfp>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	4607      	mov	r7, r0
 8005430:	f7ff ffac 	bl	800538c <__sfp_lock_acquire>
 8005434:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <__sfp+0x84>)
 8005436:	681e      	ldr	r6, [r3, #0]
 8005438:	69b3      	ldr	r3, [r6, #24]
 800543a:	b913      	cbnz	r3, 8005442 <__sfp+0x16>
 800543c:	4630      	mov	r0, r6
 800543e:	f7ff ffbd 	bl	80053bc <__sinit>
 8005442:	3648      	adds	r6, #72	; 0x48
 8005444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005448:	3b01      	subs	r3, #1
 800544a:	d503      	bpl.n	8005454 <__sfp+0x28>
 800544c:	6833      	ldr	r3, [r6, #0]
 800544e:	b30b      	cbz	r3, 8005494 <__sfp+0x68>
 8005450:	6836      	ldr	r6, [r6, #0]
 8005452:	e7f7      	b.n	8005444 <__sfp+0x18>
 8005454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005458:	b9d5      	cbnz	r5, 8005490 <__sfp+0x64>
 800545a:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <__sfp+0x88>)
 800545c:	60e3      	str	r3, [r4, #12]
 800545e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005462:	6665      	str	r5, [r4, #100]	; 0x64
 8005464:	f000 f847 	bl	80054f6 <__retarget_lock_init_recursive>
 8005468:	f7ff ff96 	bl	8005398 <__sfp_lock_release>
 800546c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005474:	6025      	str	r5, [r4, #0]
 8005476:	61a5      	str	r5, [r4, #24]
 8005478:	2208      	movs	r2, #8
 800547a:	4629      	mov	r1, r5
 800547c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005480:	f7ff fd2c 	bl	8004edc <memset>
 8005484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800548c:	4620      	mov	r0, r4
 800548e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005490:	3468      	adds	r4, #104	; 0x68
 8005492:	e7d9      	b.n	8005448 <__sfp+0x1c>
 8005494:	2104      	movs	r1, #4
 8005496:	4638      	mov	r0, r7
 8005498:	f7ff ff62 	bl	8005360 <__sfmoreglue>
 800549c:	4604      	mov	r4, r0
 800549e:	6030      	str	r0, [r6, #0]
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d1d5      	bne.n	8005450 <__sfp+0x24>
 80054a4:	f7ff ff78 	bl	8005398 <__sfp_lock_release>
 80054a8:	230c      	movs	r3, #12
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	e7ee      	b.n	800548c <__sfp+0x60>
 80054ae:	bf00      	nop
 80054b0:	0800600c 	.word	0x0800600c
 80054b4:	ffff0001 	.word	0xffff0001

080054b8 <_fwalk_reent>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	4606      	mov	r6, r0
 80054be:	4688      	mov	r8, r1
 80054c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054c4:	2700      	movs	r7, #0
 80054c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054ca:	f1b9 0901 	subs.w	r9, r9, #1
 80054ce:	d505      	bpl.n	80054dc <_fwalk_reent+0x24>
 80054d0:	6824      	ldr	r4, [r4, #0]
 80054d2:	2c00      	cmp	r4, #0
 80054d4:	d1f7      	bne.n	80054c6 <_fwalk_reent+0xe>
 80054d6:	4638      	mov	r0, r7
 80054d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054dc:	89ab      	ldrh	r3, [r5, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d907      	bls.n	80054f2 <_fwalk_reent+0x3a>
 80054e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054e6:	3301      	adds	r3, #1
 80054e8:	d003      	beq.n	80054f2 <_fwalk_reent+0x3a>
 80054ea:	4629      	mov	r1, r5
 80054ec:	4630      	mov	r0, r6
 80054ee:	47c0      	blx	r8
 80054f0:	4307      	orrs	r7, r0
 80054f2:	3568      	adds	r5, #104	; 0x68
 80054f4:	e7e9      	b.n	80054ca <_fwalk_reent+0x12>

080054f6 <__retarget_lock_init_recursive>:
 80054f6:	4770      	bx	lr

080054f8 <__retarget_lock_acquire_recursive>:
 80054f8:	4770      	bx	lr

080054fa <__retarget_lock_release_recursive>:
 80054fa:	4770      	bx	lr

080054fc <__swhatbuf_r>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	460e      	mov	r6, r1
 8005500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005504:	2900      	cmp	r1, #0
 8005506:	b096      	sub	sp, #88	; 0x58
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	da08      	bge.n	8005520 <__swhatbuf_r+0x24>
 800550e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	602a      	str	r2, [r5, #0]
 8005516:	061a      	lsls	r2, r3, #24
 8005518:	d410      	bmi.n	800553c <__swhatbuf_r+0x40>
 800551a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551e:	e00e      	b.n	800553e <__swhatbuf_r+0x42>
 8005520:	466a      	mov	r2, sp
 8005522:	f000 fc95 	bl	8005e50 <_fstat_r>
 8005526:	2800      	cmp	r0, #0
 8005528:	dbf1      	blt.n	800550e <__swhatbuf_r+0x12>
 800552a:	9a01      	ldr	r2, [sp, #4]
 800552c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005530:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005534:	425a      	negs	r2, r3
 8005536:	415a      	adcs	r2, r3
 8005538:	602a      	str	r2, [r5, #0]
 800553a:	e7ee      	b.n	800551a <__swhatbuf_r+0x1e>
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	2000      	movs	r0, #0
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	b016      	add	sp, #88	; 0x58
 8005544:	bd70      	pop	{r4, r5, r6, pc}
	...

08005548 <__smakebuf_r>:
 8005548:	898b      	ldrh	r3, [r1, #12]
 800554a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800554c:	079d      	lsls	r5, r3, #30
 800554e:	4606      	mov	r6, r0
 8005550:	460c      	mov	r4, r1
 8005552:	d507      	bpl.n	8005564 <__smakebuf_r+0x1c>
 8005554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	6123      	str	r3, [r4, #16]
 800555c:	2301      	movs	r3, #1
 800555e:	6163      	str	r3, [r4, #20]
 8005560:	b002      	add	sp, #8
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	ab01      	add	r3, sp, #4
 8005566:	466a      	mov	r2, sp
 8005568:	f7ff ffc8 	bl	80054fc <__swhatbuf_r>
 800556c:	9900      	ldr	r1, [sp, #0]
 800556e:	4605      	mov	r5, r0
 8005570:	4630      	mov	r0, r6
 8005572:	f000 f895 	bl	80056a0 <_malloc_r>
 8005576:	b948      	cbnz	r0, 800558c <__smakebuf_r+0x44>
 8005578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800557c:	059a      	lsls	r2, r3, #22
 800557e:	d4ef      	bmi.n	8005560 <__smakebuf_r+0x18>
 8005580:	f023 0303 	bic.w	r3, r3, #3
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	e7e3      	b.n	8005554 <__smakebuf_r+0xc>
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <__smakebuf_r+0x7c>)
 800558e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	6020      	str	r0, [r4, #0]
 8005594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	9b00      	ldr	r3, [sp, #0]
 800559c:	6163      	str	r3, [r4, #20]
 800559e:	9b01      	ldr	r3, [sp, #4]
 80055a0:	6120      	str	r0, [r4, #16]
 80055a2:	b15b      	cbz	r3, 80055bc <__smakebuf_r+0x74>
 80055a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055a8:	4630      	mov	r0, r6
 80055aa:	f000 fc63 	bl	8005e74 <_isatty_r>
 80055ae:	b128      	cbz	r0, 80055bc <__smakebuf_r+0x74>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	81a3      	strh	r3, [r4, #12]
 80055bc:	89a0      	ldrh	r0, [r4, #12]
 80055be:	4305      	orrs	r5, r0
 80055c0:	81a5      	strh	r5, [r4, #12]
 80055c2:	e7cd      	b.n	8005560 <__smakebuf_r+0x18>
 80055c4:	08005355 	.word	0x08005355

080055c8 <_free_r>:
 80055c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ca:	2900      	cmp	r1, #0
 80055cc:	d044      	beq.n	8005658 <_free_r+0x90>
 80055ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d2:	9001      	str	r0, [sp, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f1a1 0404 	sub.w	r4, r1, #4
 80055da:	bfb8      	it	lt
 80055dc:	18e4      	addlt	r4, r4, r3
 80055de:	f000 fc6b 	bl	8005eb8 <__malloc_lock>
 80055e2:	4a1e      	ldr	r2, [pc, #120]	; (800565c <_free_r+0x94>)
 80055e4:	9801      	ldr	r0, [sp, #4]
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	b933      	cbnz	r3, 80055f8 <_free_r+0x30>
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	6014      	str	r4, [r2, #0]
 80055ee:	b003      	add	sp, #12
 80055f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055f4:	f000 bc66 	b.w	8005ec4 <__malloc_unlock>
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d908      	bls.n	800560e <_free_r+0x46>
 80055fc:	6825      	ldr	r5, [r4, #0]
 80055fe:	1961      	adds	r1, r4, r5
 8005600:	428b      	cmp	r3, r1
 8005602:	bf01      	itttt	eq
 8005604:	6819      	ldreq	r1, [r3, #0]
 8005606:	685b      	ldreq	r3, [r3, #4]
 8005608:	1949      	addeq	r1, r1, r5
 800560a:	6021      	streq	r1, [r4, #0]
 800560c:	e7ed      	b.n	80055ea <_free_r+0x22>
 800560e:	461a      	mov	r2, r3
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b10b      	cbz	r3, 8005618 <_free_r+0x50>
 8005614:	42a3      	cmp	r3, r4
 8005616:	d9fa      	bls.n	800560e <_free_r+0x46>
 8005618:	6811      	ldr	r1, [r2, #0]
 800561a:	1855      	adds	r5, r2, r1
 800561c:	42a5      	cmp	r5, r4
 800561e:	d10b      	bne.n	8005638 <_free_r+0x70>
 8005620:	6824      	ldr	r4, [r4, #0]
 8005622:	4421      	add	r1, r4
 8005624:	1854      	adds	r4, r2, r1
 8005626:	42a3      	cmp	r3, r4
 8005628:	6011      	str	r1, [r2, #0]
 800562a:	d1e0      	bne.n	80055ee <_free_r+0x26>
 800562c:	681c      	ldr	r4, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	6053      	str	r3, [r2, #4]
 8005632:	4421      	add	r1, r4
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	e7da      	b.n	80055ee <_free_r+0x26>
 8005638:	d902      	bls.n	8005640 <_free_r+0x78>
 800563a:	230c      	movs	r3, #12
 800563c:	6003      	str	r3, [r0, #0]
 800563e:	e7d6      	b.n	80055ee <_free_r+0x26>
 8005640:	6825      	ldr	r5, [r4, #0]
 8005642:	1961      	adds	r1, r4, r5
 8005644:	428b      	cmp	r3, r1
 8005646:	bf04      	itt	eq
 8005648:	6819      	ldreq	r1, [r3, #0]
 800564a:	685b      	ldreq	r3, [r3, #4]
 800564c:	6063      	str	r3, [r4, #4]
 800564e:	bf04      	itt	eq
 8005650:	1949      	addeq	r1, r1, r5
 8005652:	6021      	streq	r1, [r4, #0]
 8005654:	6054      	str	r4, [r2, #4]
 8005656:	e7ca      	b.n	80055ee <_free_r+0x26>
 8005658:	b003      	add	sp, #12
 800565a:	bd30      	pop	{r4, r5, pc}
 800565c:	200016bc 	.word	0x200016bc

08005660 <sbrk_aligned>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4e0e      	ldr	r6, [pc, #56]	; (800569c <sbrk_aligned+0x3c>)
 8005664:	460c      	mov	r4, r1
 8005666:	6831      	ldr	r1, [r6, #0]
 8005668:	4605      	mov	r5, r0
 800566a:	b911      	cbnz	r1, 8005672 <sbrk_aligned+0x12>
 800566c:	f000 fb7a 	bl	8005d64 <_sbrk_r>
 8005670:	6030      	str	r0, [r6, #0]
 8005672:	4621      	mov	r1, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f000 fb75 	bl	8005d64 <_sbrk_r>
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	d00a      	beq.n	8005694 <sbrk_aligned+0x34>
 800567e:	1cc4      	adds	r4, r0, #3
 8005680:	f024 0403 	bic.w	r4, r4, #3
 8005684:	42a0      	cmp	r0, r4
 8005686:	d007      	beq.n	8005698 <sbrk_aligned+0x38>
 8005688:	1a21      	subs	r1, r4, r0
 800568a:	4628      	mov	r0, r5
 800568c:	f000 fb6a 	bl	8005d64 <_sbrk_r>
 8005690:	3001      	adds	r0, #1
 8005692:	d101      	bne.n	8005698 <sbrk_aligned+0x38>
 8005694:	f04f 34ff 	mov.w	r4, #4294967295
 8005698:	4620      	mov	r0, r4
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	200016c0 	.word	0x200016c0

080056a0 <_malloc_r>:
 80056a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a4:	1ccd      	adds	r5, r1, #3
 80056a6:	f025 0503 	bic.w	r5, r5, #3
 80056aa:	3508      	adds	r5, #8
 80056ac:	2d0c      	cmp	r5, #12
 80056ae:	bf38      	it	cc
 80056b0:	250c      	movcc	r5, #12
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	4607      	mov	r7, r0
 80056b6:	db01      	blt.n	80056bc <_malloc_r+0x1c>
 80056b8:	42a9      	cmp	r1, r5
 80056ba:	d905      	bls.n	80056c8 <_malloc_r+0x28>
 80056bc:	230c      	movs	r3, #12
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	2600      	movs	r6, #0
 80056c2:	4630      	mov	r0, r6
 80056c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c8:	4e2e      	ldr	r6, [pc, #184]	; (8005784 <_malloc_r+0xe4>)
 80056ca:	f000 fbf5 	bl	8005eb8 <__malloc_lock>
 80056ce:	6833      	ldr	r3, [r6, #0]
 80056d0:	461c      	mov	r4, r3
 80056d2:	bb34      	cbnz	r4, 8005722 <_malloc_r+0x82>
 80056d4:	4629      	mov	r1, r5
 80056d6:	4638      	mov	r0, r7
 80056d8:	f7ff ffc2 	bl	8005660 <sbrk_aligned>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	4604      	mov	r4, r0
 80056e0:	d14d      	bne.n	800577e <_malloc_r+0xde>
 80056e2:	6834      	ldr	r4, [r6, #0]
 80056e4:	4626      	mov	r6, r4
 80056e6:	2e00      	cmp	r6, #0
 80056e8:	d140      	bne.n	800576c <_malloc_r+0xcc>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	4631      	mov	r1, r6
 80056ee:	4638      	mov	r0, r7
 80056f0:	eb04 0803 	add.w	r8, r4, r3
 80056f4:	f000 fb36 	bl	8005d64 <_sbrk_r>
 80056f8:	4580      	cmp	r8, r0
 80056fa:	d13a      	bne.n	8005772 <_malloc_r+0xd2>
 80056fc:	6821      	ldr	r1, [r4, #0]
 80056fe:	3503      	adds	r5, #3
 8005700:	1a6d      	subs	r5, r5, r1
 8005702:	f025 0503 	bic.w	r5, r5, #3
 8005706:	3508      	adds	r5, #8
 8005708:	2d0c      	cmp	r5, #12
 800570a:	bf38      	it	cc
 800570c:	250c      	movcc	r5, #12
 800570e:	4629      	mov	r1, r5
 8005710:	4638      	mov	r0, r7
 8005712:	f7ff ffa5 	bl	8005660 <sbrk_aligned>
 8005716:	3001      	adds	r0, #1
 8005718:	d02b      	beq.n	8005772 <_malloc_r+0xd2>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	442b      	add	r3, r5
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	e00e      	b.n	8005740 <_malloc_r+0xa0>
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	1b52      	subs	r2, r2, r5
 8005726:	d41e      	bmi.n	8005766 <_malloc_r+0xc6>
 8005728:	2a0b      	cmp	r2, #11
 800572a:	d916      	bls.n	800575a <_malloc_r+0xba>
 800572c:	1961      	adds	r1, r4, r5
 800572e:	42a3      	cmp	r3, r4
 8005730:	6025      	str	r5, [r4, #0]
 8005732:	bf18      	it	ne
 8005734:	6059      	strne	r1, [r3, #4]
 8005736:	6863      	ldr	r3, [r4, #4]
 8005738:	bf08      	it	eq
 800573a:	6031      	streq	r1, [r6, #0]
 800573c:	5162      	str	r2, [r4, r5]
 800573e:	604b      	str	r3, [r1, #4]
 8005740:	4638      	mov	r0, r7
 8005742:	f104 060b 	add.w	r6, r4, #11
 8005746:	f000 fbbd 	bl	8005ec4 <__malloc_unlock>
 800574a:	f026 0607 	bic.w	r6, r6, #7
 800574e:	1d23      	adds	r3, r4, #4
 8005750:	1af2      	subs	r2, r6, r3
 8005752:	d0b6      	beq.n	80056c2 <_malloc_r+0x22>
 8005754:	1b9b      	subs	r3, r3, r6
 8005756:	50a3      	str	r3, [r4, r2]
 8005758:	e7b3      	b.n	80056c2 <_malloc_r+0x22>
 800575a:	6862      	ldr	r2, [r4, #4]
 800575c:	42a3      	cmp	r3, r4
 800575e:	bf0c      	ite	eq
 8005760:	6032      	streq	r2, [r6, #0]
 8005762:	605a      	strne	r2, [r3, #4]
 8005764:	e7ec      	b.n	8005740 <_malloc_r+0xa0>
 8005766:	4623      	mov	r3, r4
 8005768:	6864      	ldr	r4, [r4, #4]
 800576a:	e7b2      	b.n	80056d2 <_malloc_r+0x32>
 800576c:	4634      	mov	r4, r6
 800576e:	6876      	ldr	r6, [r6, #4]
 8005770:	e7b9      	b.n	80056e6 <_malloc_r+0x46>
 8005772:	230c      	movs	r3, #12
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4638      	mov	r0, r7
 8005778:	f000 fba4 	bl	8005ec4 <__malloc_unlock>
 800577c:	e7a1      	b.n	80056c2 <_malloc_r+0x22>
 800577e:	6025      	str	r5, [r4, #0]
 8005780:	e7de      	b.n	8005740 <_malloc_r+0xa0>
 8005782:	bf00      	nop
 8005784:	200016bc 	.word	0x200016bc

08005788 <__sfputc_r>:
 8005788:	6893      	ldr	r3, [r2, #8]
 800578a:	3b01      	subs	r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	b410      	push	{r4}
 8005790:	6093      	str	r3, [r2, #8]
 8005792:	da08      	bge.n	80057a6 <__sfputc_r+0x1e>
 8005794:	6994      	ldr	r4, [r2, #24]
 8005796:	42a3      	cmp	r3, r4
 8005798:	db01      	blt.n	800579e <__sfputc_r+0x16>
 800579a:	290a      	cmp	r1, #10
 800579c:	d103      	bne.n	80057a6 <__sfputc_r+0x1e>
 800579e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057a2:	f7ff bc31 	b.w	8005008 <__swbuf_r>
 80057a6:	6813      	ldr	r3, [r2, #0]
 80057a8:	1c58      	adds	r0, r3, #1
 80057aa:	6010      	str	r0, [r2, #0]
 80057ac:	7019      	strb	r1, [r3, #0]
 80057ae:	4608      	mov	r0, r1
 80057b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <__sfputs_r>:
 80057b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b8:	4606      	mov	r6, r0
 80057ba:	460f      	mov	r7, r1
 80057bc:	4614      	mov	r4, r2
 80057be:	18d5      	adds	r5, r2, r3
 80057c0:	42ac      	cmp	r4, r5
 80057c2:	d101      	bne.n	80057c8 <__sfputs_r+0x12>
 80057c4:	2000      	movs	r0, #0
 80057c6:	e007      	b.n	80057d8 <__sfputs_r+0x22>
 80057c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057cc:	463a      	mov	r2, r7
 80057ce:	4630      	mov	r0, r6
 80057d0:	f7ff ffda 	bl	8005788 <__sfputc_r>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d1f3      	bne.n	80057c0 <__sfputs_r+0xa>
 80057d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057dc <_vfiprintf_r>:
 80057dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e0:	460d      	mov	r5, r1
 80057e2:	b09d      	sub	sp, #116	; 0x74
 80057e4:	4614      	mov	r4, r2
 80057e6:	4698      	mov	r8, r3
 80057e8:	4606      	mov	r6, r0
 80057ea:	b118      	cbz	r0, 80057f4 <_vfiprintf_r+0x18>
 80057ec:	6983      	ldr	r3, [r0, #24]
 80057ee:	b90b      	cbnz	r3, 80057f4 <_vfiprintf_r+0x18>
 80057f0:	f7ff fde4 	bl	80053bc <__sinit>
 80057f4:	4b89      	ldr	r3, [pc, #548]	; (8005a1c <_vfiprintf_r+0x240>)
 80057f6:	429d      	cmp	r5, r3
 80057f8:	d11b      	bne.n	8005832 <_vfiprintf_r+0x56>
 80057fa:	6875      	ldr	r5, [r6, #4]
 80057fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057fe:	07d9      	lsls	r1, r3, #31
 8005800:	d405      	bmi.n	800580e <_vfiprintf_r+0x32>
 8005802:	89ab      	ldrh	r3, [r5, #12]
 8005804:	059a      	lsls	r2, r3, #22
 8005806:	d402      	bmi.n	800580e <_vfiprintf_r+0x32>
 8005808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800580a:	f7ff fe75 	bl	80054f8 <__retarget_lock_acquire_recursive>
 800580e:	89ab      	ldrh	r3, [r5, #12]
 8005810:	071b      	lsls	r3, r3, #28
 8005812:	d501      	bpl.n	8005818 <_vfiprintf_r+0x3c>
 8005814:	692b      	ldr	r3, [r5, #16]
 8005816:	b9eb      	cbnz	r3, 8005854 <_vfiprintf_r+0x78>
 8005818:	4629      	mov	r1, r5
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff fc46 	bl	80050ac <__swsetup_r>
 8005820:	b1c0      	cbz	r0, 8005854 <_vfiprintf_r+0x78>
 8005822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005824:	07dc      	lsls	r4, r3, #31
 8005826:	d50e      	bpl.n	8005846 <_vfiprintf_r+0x6a>
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	b01d      	add	sp, #116	; 0x74
 800582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005832:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <_vfiprintf_r+0x244>)
 8005834:	429d      	cmp	r5, r3
 8005836:	d101      	bne.n	800583c <_vfiprintf_r+0x60>
 8005838:	68b5      	ldr	r5, [r6, #8]
 800583a:	e7df      	b.n	80057fc <_vfiprintf_r+0x20>
 800583c:	4b79      	ldr	r3, [pc, #484]	; (8005a24 <_vfiprintf_r+0x248>)
 800583e:	429d      	cmp	r5, r3
 8005840:	bf08      	it	eq
 8005842:	68f5      	ldreq	r5, [r6, #12]
 8005844:	e7da      	b.n	80057fc <_vfiprintf_r+0x20>
 8005846:	89ab      	ldrh	r3, [r5, #12]
 8005848:	0598      	lsls	r0, r3, #22
 800584a:	d4ed      	bmi.n	8005828 <_vfiprintf_r+0x4c>
 800584c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800584e:	f7ff fe54 	bl	80054fa <__retarget_lock_release_recursive>
 8005852:	e7e9      	b.n	8005828 <_vfiprintf_r+0x4c>
 8005854:	2300      	movs	r3, #0
 8005856:	9309      	str	r3, [sp, #36]	; 0x24
 8005858:	2320      	movs	r3, #32
 800585a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800585e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005862:	2330      	movs	r3, #48	; 0x30
 8005864:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a28 <_vfiprintf_r+0x24c>
 8005868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800586c:	f04f 0901 	mov.w	r9, #1
 8005870:	4623      	mov	r3, r4
 8005872:	469a      	mov	sl, r3
 8005874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005878:	b10a      	cbz	r2, 800587e <_vfiprintf_r+0xa2>
 800587a:	2a25      	cmp	r2, #37	; 0x25
 800587c:	d1f9      	bne.n	8005872 <_vfiprintf_r+0x96>
 800587e:	ebba 0b04 	subs.w	fp, sl, r4
 8005882:	d00b      	beq.n	800589c <_vfiprintf_r+0xc0>
 8005884:	465b      	mov	r3, fp
 8005886:	4622      	mov	r2, r4
 8005888:	4629      	mov	r1, r5
 800588a:	4630      	mov	r0, r6
 800588c:	f7ff ff93 	bl	80057b6 <__sfputs_r>
 8005890:	3001      	adds	r0, #1
 8005892:	f000 80aa 	beq.w	80059ea <_vfiprintf_r+0x20e>
 8005896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005898:	445a      	add	r2, fp
 800589a:	9209      	str	r2, [sp, #36]	; 0x24
 800589c:	f89a 3000 	ldrb.w	r3, [sl]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80a2 	beq.w	80059ea <_vfiprintf_r+0x20e>
 80058a6:	2300      	movs	r3, #0
 80058a8:	f04f 32ff 	mov.w	r2, #4294967295
 80058ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058b0:	f10a 0a01 	add.w	sl, sl, #1
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	9307      	str	r3, [sp, #28]
 80058b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058bc:	931a      	str	r3, [sp, #104]	; 0x68
 80058be:	4654      	mov	r4, sl
 80058c0:	2205      	movs	r2, #5
 80058c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c6:	4858      	ldr	r0, [pc, #352]	; (8005a28 <_vfiprintf_r+0x24c>)
 80058c8:	f7fa fc82 	bl	80001d0 <memchr>
 80058cc:	9a04      	ldr	r2, [sp, #16]
 80058ce:	b9d8      	cbnz	r0, 8005908 <_vfiprintf_r+0x12c>
 80058d0:	06d1      	lsls	r1, r2, #27
 80058d2:	bf44      	itt	mi
 80058d4:	2320      	movmi	r3, #32
 80058d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058da:	0713      	lsls	r3, r2, #28
 80058dc:	bf44      	itt	mi
 80058de:	232b      	movmi	r3, #43	; 0x2b
 80058e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e4:	f89a 3000 	ldrb.w	r3, [sl]
 80058e8:	2b2a      	cmp	r3, #42	; 0x2a
 80058ea:	d015      	beq.n	8005918 <_vfiprintf_r+0x13c>
 80058ec:	9a07      	ldr	r2, [sp, #28]
 80058ee:	4654      	mov	r4, sl
 80058f0:	2000      	movs	r0, #0
 80058f2:	f04f 0c0a 	mov.w	ip, #10
 80058f6:	4621      	mov	r1, r4
 80058f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058fc:	3b30      	subs	r3, #48	; 0x30
 80058fe:	2b09      	cmp	r3, #9
 8005900:	d94e      	bls.n	80059a0 <_vfiprintf_r+0x1c4>
 8005902:	b1b0      	cbz	r0, 8005932 <_vfiprintf_r+0x156>
 8005904:	9207      	str	r2, [sp, #28]
 8005906:	e014      	b.n	8005932 <_vfiprintf_r+0x156>
 8005908:	eba0 0308 	sub.w	r3, r0, r8
 800590c:	fa09 f303 	lsl.w	r3, r9, r3
 8005910:	4313      	orrs	r3, r2
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	46a2      	mov	sl, r4
 8005916:	e7d2      	b.n	80058be <_vfiprintf_r+0xe2>
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	1d19      	adds	r1, r3, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	9103      	str	r1, [sp, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	bfbb      	ittet	lt
 8005924:	425b      	neglt	r3, r3
 8005926:	f042 0202 	orrlt.w	r2, r2, #2
 800592a:	9307      	strge	r3, [sp, #28]
 800592c:	9307      	strlt	r3, [sp, #28]
 800592e:	bfb8      	it	lt
 8005930:	9204      	strlt	r2, [sp, #16]
 8005932:	7823      	ldrb	r3, [r4, #0]
 8005934:	2b2e      	cmp	r3, #46	; 0x2e
 8005936:	d10c      	bne.n	8005952 <_vfiprintf_r+0x176>
 8005938:	7863      	ldrb	r3, [r4, #1]
 800593a:	2b2a      	cmp	r3, #42	; 0x2a
 800593c:	d135      	bne.n	80059aa <_vfiprintf_r+0x1ce>
 800593e:	9b03      	ldr	r3, [sp, #12]
 8005940:	1d1a      	adds	r2, r3, #4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	9203      	str	r2, [sp, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	bfb8      	it	lt
 800594a:	f04f 33ff 	movlt.w	r3, #4294967295
 800594e:	3402      	adds	r4, #2
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a38 <_vfiprintf_r+0x25c>
 8005956:	7821      	ldrb	r1, [r4, #0]
 8005958:	2203      	movs	r2, #3
 800595a:	4650      	mov	r0, sl
 800595c:	f7fa fc38 	bl	80001d0 <memchr>
 8005960:	b140      	cbz	r0, 8005974 <_vfiprintf_r+0x198>
 8005962:	2340      	movs	r3, #64	; 0x40
 8005964:	eba0 000a 	sub.w	r0, r0, sl
 8005968:	fa03 f000 	lsl.w	r0, r3, r0
 800596c:	9b04      	ldr	r3, [sp, #16]
 800596e:	4303      	orrs	r3, r0
 8005970:	3401      	adds	r4, #1
 8005972:	9304      	str	r3, [sp, #16]
 8005974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005978:	482c      	ldr	r0, [pc, #176]	; (8005a2c <_vfiprintf_r+0x250>)
 800597a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800597e:	2206      	movs	r2, #6
 8005980:	f7fa fc26 	bl	80001d0 <memchr>
 8005984:	2800      	cmp	r0, #0
 8005986:	d03f      	beq.n	8005a08 <_vfiprintf_r+0x22c>
 8005988:	4b29      	ldr	r3, [pc, #164]	; (8005a30 <_vfiprintf_r+0x254>)
 800598a:	bb1b      	cbnz	r3, 80059d4 <_vfiprintf_r+0x1f8>
 800598c:	9b03      	ldr	r3, [sp, #12]
 800598e:	3307      	adds	r3, #7
 8005990:	f023 0307 	bic.w	r3, r3, #7
 8005994:	3308      	adds	r3, #8
 8005996:	9303      	str	r3, [sp, #12]
 8005998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599a:	443b      	add	r3, r7
 800599c:	9309      	str	r3, [sp, #36]	; 0x24
 800599e:	e767      	b.n	8005870 <_vfiprintf_r+0x94>
 80059a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80059a4:	460c      	mov	r4, r1
 80059a6:	2001      	movs	r0, #1
 80059a8:	e7a5      	b.n	80058f6 <_vfiprintf_r+0x11a>
 80059aa:	2300      	movs	r3, #0
 80059ac:	3401      	adds	r4, #1
 80059ae:	9305      	str	r3, [sp, #20]
 80059b0:	4619      	mov	r1, r3
 80059b2:	f04f 0c0a 	mov.w	ip, #10
 80059b6:	4620      	mov	r0, r4
 80059b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059bc:	3a30      	subs	r2, #48	; 0x30
 80059be:	2a09      	cmp	r2, #9
 80059c0:	d903      	bls.n	80059ca <_vfiprintf_r+0x1ee>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0c5      	beq.n	8005952 <_vfiprintf_r+0x176>
 80059c6:	9105      	str	r1, [sp, #20]
 80059c8:	e7c3      	b.n	8005952 <_vfiprintf_r+0x176>
 80059ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80059ce:	4604      	mov	r4, r0
 80059d0:	2301      	movs	r3, #1
 80059d2:	e7f0      	b.n	80059b6 <_vfiprintf_r+0x1da>
 80059d4:	ab03      	add	r3, sp, #12
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	462a      	mov	r2, r5
 80059da:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <_vfiprintf_r+0x258>)
 80059dc:	a904      	add	r1, sp, #16
 80059de:	4630      	mov	r0, r6
 80059e0:	f3af 8000 	nop.w
 80059e4:	4607      	mov	r7, r0
 80059e6:	1c78      	adds	r0, r7, #1
 80059e8:	d1d6      	bne.n	8005998 <_vfiprintf_r+0x1bc>
 80059ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059ec:	07d9      	lsls	r1, r3, #31
 80059ee:	d405      	bmi.n	80059fc <_vfiprintf_r+0x220>
 80059f0:	89ab      	ldrh	r3, [r5, #12]
 80059f2:	059a      	lsls	r2, r3, #22
 80059f4:	d402      	bmi.n	80059fc <_vfiprintf_r+0x220>
 80059f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059f8:	f7ff fd7f 	bl	80054fa <__retarget_lock_release_recursive>
 80059fc:	89ab      	ldrh	r3, [r5, #12]
 80059fe:	065b      	lsls	r3, r3, #25
 8005a00:	f53f af12 	bmi.w	8005828 <_vfiprintf_r+0x4c>
 8005a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a06:	e711      	b.n	800582c <_vfiprintf_r+0x50>
 8005a08:	ab03      	add	r3, sp, #12
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <_vfiprintf_r+0x258>)
 8005a10:	a904      	add	r1, sp, #16
 8005a12:	4630      	mov	r0, r6
 8005a14:	f000 f880 	bl	8005b18 <_printf_i>
 8005a18:	e7e4      	b.n	80059e4 <_vfiprintf_r+0x208>
 8005a1a:	bf00      	nop
 8005a1c:	08006030 	.word	0x08006030
 8005a20:	08006050 	.word	0x08006050
 8005a24:	08006010 	.word	0x08006010
 8005a28:	08006070 	.word	0x08006070
 8005a2c:	0800607a 	.word	0x0800607a
 8005a30:	00000000 	.word	0x00000000
 8005a34:	080057b7 	.word	0x080057b7
 8005a38:	08006076 	.word	0x08006076

08005a3c <_printf_common>:
 8005a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	4616      	mov	r6, r2
 8005a42:	4699      	mov	r9, r3
 8005a44:	688a      	ldr	r2, [r1, #8]
 8005a46:	690b      	ldr	r3, [r1, #16]
 8005a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	bfb8      	it	lt
 8005a50:	4613      	movlt	r3, r2
 8005a52:	6033      	str	r3, [r6, #0]
 8005a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a58:	4607      	mov	r7, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	b10a      	cbz	r2, 8005a62 <_printf_common+0x26>
 8005a5e:	3301      	adds	r3, #1
 8005a60:	6033      	str	r3, [r6, #0]
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	0699      	lsls	r1, r3, #26
 8005a66:	bf42      	ittt	mi
 8005a68:	6833      	ldrmi	r3, [r6, #0]
 8005a6a:	3302      	addmi	r3, #2
 8005a6c:	6033      	strmi	r3, [r6, #0]
 8005a6e:	6825      	ldr	r5, [r4, #0]
 8005a70:	f015 0506 	ands.w	r5, r5, #6
 8005a74:	d106      	bne.n	8005a84 <_printf_common+0x48>
 8005a76:	f104 0a19 	add.w	sl, r4, #25
 8005a7a:	68e3      	ldr	r3, [r4, #12]
 8005a7c:	6832      	ldr	r2, [r6, #0]
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	dc26      	bgt.n	8005ad2 <_printf_common+0x96>
 8005a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a88:	1e13      	subs	r3, r2, #0
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	bf18      	it	ne
 8005a8e:	2301      	movne	r3, #1
 8005a90:	0692      	lsls	r2, r2, #26
 8005a92:	d42b      	bmi.n	8005aec <_printf_common+0xb0>
 8005a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a98:	4649      	mov	r1, r9
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	47c0      	blx	r8
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d01e      	beq.n	8005ae0 <_printf_common+0xa4>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	68e5      	ldr	r5, [r4, #12]
 8005aa6:	6832      	ldr	r2, [r6, #0]
 8005aa8:	f003 0306 	and.w	r3, r3, #6
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	bf08      	it	eq
 8005ab0:	1aad      	subeq	r5, r5, r2
 8005ab2:	68a3      	ldr	r3, [r4, #8]
 8005ab4:	6922      	ldr	r2, [r4, #16]
 8005ab6:	bf0c      	ite	eq
 8005ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005abc:	2500      	movne	r5, #0
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	bfc4      	itt	gt
 8005ac2:	1a9b      	subgt	r3, r3, r2
 8005ac4:	18ed      	addgt	r5, r5, r3
 8005ac6:	2600      	movs	r6, #0
 8005ac8:	341a      	adds	r4, #26
 8005aca:	42b5      	cmp	r5, r6
 8005acc:	d11a      	bne.n	8005b04 <_printf_common+0xc8>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e008      	b.n	8005ae4 <_printf_common+0xa8>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4652      	mov	r2, sl
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	4638      	mov	r0, r7
 8005ada:	47c0      	blx	r8
 8005adc:	3001      	adds	r0, #1
 8005ade:	d103      	bne.n	8005ae8 <_printf_common+0xac>
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae8:	3501      	adds	r5, #1
 8005aea:	e7c6      	b.n	8005a7a <_printf_common+0x3e>
 8005aec:	18e1      	adds	r1, r4, r3
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	2030      	movs	r0, #48	; 0x30
 8005af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005af6:	4422      	add	r2, r4
 8005af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b00:	3302      	adds	r3, #2
 8005b02:	e7c7      	b.n	8005a94 <_printf_common+0x58>
 8005b04:	2301      	movs	r3, #1
 8005b06:	4622      	mov	r2, r4
 8005b08:	4649      	mov	r1, r9
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	47c0      	blx	r8
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d0e6      	beq.n	8005ae0 <_printf_common+0xa4>
 8005b12:	3601      	adds	r6, #1
 8005b14:	e7d9      	b.n	8005aca <_printf_common+0x8e>
	...

08005b18 <_printf_i>:
 8005b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	7e0f      	ldrb	r7, [r1, #24]
 8005b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b20:	2f78      	cmp	r7, #120	; 0x78
 8005b22:	4691      	mov	r9, r2
 8005b24:	4680      	mov	r8, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	469a      	mov	sl, r3
 8005b2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b2e:	d807      	bhi.n	8005b40 <_printf_i+0x28>
 8005b30:	2f62      	cmp	r7, #98	; 0x62
 8005b32:	d80a      	bhi.n	8005b4a <_printf_i+0x32>
 8005b34:	2f00      	cmp	r7, #0
 8005b36:	f000 80d8 	beq.w	8005cea <_printf_i+0x1d2>
 8005b3a:	2f58      	cmp	r7, #88	; 0x58
 8005b3c:	f000 80a3 	beq.w	8005c86 <_printf_i+0x16e>
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b48:	e03a      	b.n	8005bc0 <_printf_i+0xa8>
 8005b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b4e:	2b15      	cmp	r3, #21
 8005b50:	d8f6      	bhi.n	8005b40 <_printf_i+0x28>
 8005b52:	a101      	add	r1, pc, #4	; (adr r1, 8005b58 <_printf_i+0x40>)
 8005b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b58:	08005bb1 	.word	0x08005bb1
 8005b5c:	08005bc5 	.word	0x08005bc5
 8005b60:	08005b41 	.word	0x08005b41
 8005b64:	08005b41 	.word	0x08005b41
 8005b68:	08005b41 	.word	0x08005b41
 8005b6c:	08005b41 	.word	0x08005b41
 8005b70:	08005bc5 	.word	0x08005bc5
 8005b74:	08005b41 	.word	0x08005b41
 8005b78:	08005b41 	.word	0x08005b41
 8005b7c:	08005b41 	.word	0x08005b41
 8005b80:	08005b41 	.word	0x08005b41
 8005b84:	08005cd1 	.word	0x08005cd1
 8005b88:	08005bf5 	.word	0x08005bf5
 8005b8c:	08005cb3 	.word	0x08005cb3
 8005b90:	08005b41 	.word	0x08005b41
 8005b94:	08005b41 	.word	0x08005b41
 8005b98:	08005cf3 	.word	0x08005cf3
 8005b9c:	08005b41 	.word	0x08005b41
 8005ba0:	08005bf5 	.word	0x08005bf5
 8005ba4:	08005b41 	.word	0x08005b41
 8005ba8:	08005b41 	.word	0x08005b41
 8005bac:	08005cbb 	.word	0x08005cbb
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	1d1a      	adds	r2, r3, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	602a      	str	r2, [r5, #0]
 8005bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0a3      	b.n	8005d0c <_printf_i+0x1f4>
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	6829      	ldr	r1, [r5, #0]
 8005bc8:	0606      	lsls	r6, r0, #24
 8005bca:	f101 0304 	add.w	r3, r1, #4
 8005bce:	d50a      	bpl.n	8005be6 <_printf_i+0xce>
 8005bd0:	680e      	ldr	r6, [r1, #0]
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	2e00      	cmp	r6, #0
 8005bd6:	da03      	bge.n	8005be0 <_printf_i+0xc8>
 8005bd8:	232d      	movs	r3, #45	; 0x2d
 8005bda:	4276      	negs	r6, r6
 8005bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005be0:	485e      	ldr	r0, [pc, #376]	; (8005d5c <_printf_i+0x244>)
 8005be2:	230a      	movs	r3, #10
 8005be4:	e019      	b.n	8005c1a <_printf_i+0x102>
 8005be6:	680e      	ldr	r6, [r1, #0]
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bee:	bf18      	it	ne
 8005bf0:	b236      	sxthne	r6, r6
 8005bf2:	e7ef      	b.n	8005bd4 <_printf_i+0xbc>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	6820      	ldr	r0, [r4, #0]
 8005bf8:	1d19      	adds	r1, r3, #4
 8005bfa:	6029      	str	r1, [r5, #0]
 8005bfc:	0601      	lsls	r1, r0, #24
 8005bfe:	d501      	bpl.n	8005c04 <_printf_i+0xec>
 8005c00:	681e      	ldr	r6, [r3, #0]
 8005c02:	e002      	b.n	8005c0a <_printf_i+0xf2>
 8005c04:	0646      	lsls	r6, r0, #25
 8005c06:	d5fb      	bpl.n	8005c00 <_printf_i+0xe8>
 8005c08:	881e      	ldrh	r6, [r3, #0]
 8005c0a:	4854      	ldr	r0, [pc, #336]	; (8005d5c <_printf_i+0x244>)
 8005c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c0e:	bf0c      	ite	eq
 8005c10:	2308      	moveq	r3, #8
 8005c12:	230a      	movne	r3, #10
 8005c14:	2100      	movs	r1, #0
 8005c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c1a:	6865      	ldr	r5, [r4, #4]
 8005c1c:	60a5      	str	r5, [r4, #8]
 8005c1e:	2d00      	cmp	r5, #0
 8005c20:	bfa2      	ittt	ge
 8005c22:	6821      	ldrge	r1, [r4, #0]
 8005c24:	f021 0104 	bicge.w	r1, r1, #4
 8005c28:	6021      	strge	r1, [r4, #0]
 8005c2a:	b90e      	cbnz	r6, 8005c30 <_printf_i+0x118>
 8005c2c:	2d00      	cmp	r5, #0
 8005c2e:	d04d      	beq.n	8005ccc <_printf_i+0x1b4>
 8005c30:	4615      	mov	r5, r2
 8005c32:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c36:	fb03 6711 	mls	r7, r3, r1, r6
 8005c3a:	5dc7      	ldrb	r7, [r0, r7]
 8005c3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c40:	4637      	mov	r7, r6
 8005c42:	42bb      	cmp	r3, r7
 8005c44:	460e      	mov	r6, r1
 8005c46:	d9f4      	bls.n	8005c32 <_printf_i+0x11a>
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d10b      	bne.n	8005c64 <_printf_i+0x14c>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	07de      	lsls	r6, r3, #31
 8005c50:	d508      	bpl.n	8005c64 <_printf_i+0x14c>
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	6861      	ldr	r1, [r4, #4]
 8005c56:	4299      	cmp	r1, r3
 8005c58:	bfde      	ittt	le
 8005c5a:	2330      	movle	r3, #48	; 0x30
 8005c5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c64:	1b52      	subs	r2, r2, r5
 8005c66:	6122      	str	r2, [r4, #16]
 8005c68:	f8cd a000 	str.w	sl, [sp]
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	aa03      	add	r2, sp, #12
 8005c70:	4621      	mov	r1, r4
 8005c72:	4640      	mov	r0, r8
 8005c74:	f7ff fee2 	bl	8005a3c <_printf_common>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d14c      	bne.n	8005d16 <_printf_i+0x1fe>
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	b004      	add	sp, #16
 8005c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c86:	4835      	ldr	r0, [pc, #212]	; (8005d5c <_printf_i+0x244>)
 8005c88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c8c:	6829      	ldr	r1, [r5, #0]
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c94:	6029      	str	r1, [r5, #0]
 8005c96:	061d      	lsls	r5, r3, #24
 8005c98:	d514      	bpl.n	8005cc4 <_printf_i+0x1ac>
 8005c9a:	07df      	lsls	r7, r3, #31
 8005c9c:	bf44      	itt	mi
 8005c9e:	f043 0320 	orrmi.w	r3, r3, #32
 8005ca2:	6023      	strmi	r3, [r4, #0]
 8005ca4:	b91e      	cbnz	r6, 8005cae <_printf_i+0x196>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	f023 0320 	bic.w	r3, r3, #32
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	2310      	movs	r3, #16
 8005cb0:	e7b0      	b.n	8005c14 <_printf_i+0xfc>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	f043 0320 	orr.w	r3, r3, #32
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	2378      	movs	r3, #120	; 0x78
 8005cbc:	4828      	ldr	r0, [pc, #160]	; (8005d60 <_printf_i+0x248>)
 8005cbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cc2:	e7e3      	b.n	8005c8c <_printf_i+0x174>
 8005cc4:	0659      	lsls	r1, r3, #25
 8005cc6:	bf48      	it	mi
 8005cc8:	b2b6      	uxthmi	r6, r6
 8005cca:	e7e6      	b.n	8005c9a <_printf_i+0x182>
 8005ccc:	4615      	mov	r5, r2
 8005cce:	e7bb      	b.n	8005c48 <_printf_i+0x130>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	6826      	ldr	r6, [r4, #0]
 8005cd4:	6961      	ldr	r1, [r4, #20]
 8005cd6:	1d18      	adds	r0, r3, #4
 8005cd8:	6028      	str	r0, [r5, #0]
 8005cda:	0635      	lsls	r5, r6, #24
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	d501      	bpl.n	8005ce4 <_printf_i+0x1cc>
 8005ce0:	6019      	str	r1, [r3, #0]
 8005ce2:	e002      	b.n	8005cea <_printf_i+0x1d2>
 8005ce4:	0670      	lsls	r0, r6, #25
 8005ce6:	d5fb      	bpl.n	8005ce0 <_printf_i+0x1c8>
 8005ce8:	8019      	strh	r1, [r3, #0]
 8005cea:	2300      	movs	r3, #0
 8005cec:	6123      	str	r3, [r4, #16]
 8005cee:	4615      	mov	r5, r2
 8005cf0:	e7ba      	b.n	8005c68 <_printf_i+0x150>
 8005cf2:	682b      	ldr	r3, [r5, #0]
 8005cf4:	1d1a      	adds	r2, r3, #4
 8005cf6:	602a      	str	r2, [r5, #0]
 8005cf8:	681d      	ldr	r5, [r3, #0]
 8005cfa:	6862      	ldr	r2, [r4, #4]
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f7fa fa66 	bl	80001d0 <memchr>
 8005d04:	b108      	cbz	r0, 8005d0a <_printf_i+0x1f2>
 8005d06:	1b40      	subs	r0, r0, r5
 8005d08:	6060      	str	r0, [r4, #4]
 8005d0a:	6863      	ldr	r3, [r4, #4]
 8005d0c:	6123      	str	r3, [r4, #16]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d14:	e7a8      	b.n	8005c68 <_printf_i+0x150>
 8005d16:	6923      	ldr	r3, [r4, #16]
 8005d18:	462a      	mov	r2, r5
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	47d0      	blx	sl
 8005d20:	3001      	adds	r0, #1
 8005d22:	d0ab      	beq.n	8005c7c <_printf_i+0x164>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	079b      	lsls	r3, r3, #30
 8005d28:	d413      	bmi.n	8005d52 <_printf_i+0x23a>
 8005d2a:	68e0      	ldr	r0, [r4, #12]
 8005d2c:	9b03      	ldr	r3, [sp, #12]
 8005d2e:	4298      	cmp	r0, r3
 8005d30:	bfb8      	it	lt
 8005d32:	4618      	movlt	r0, r3
 8005d34:	e7a4      	b.n	8005c80 <_printf_i+0x168>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4632      	mov	r2, r6
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	47d0      	blx	sl
 8005d40:	3001      	adds	r0, #1
 8005d42:	d09b      	beq.n	8005c7c <_printf_i+0x164>
 8005d44:	3501      	adds	r5, #1
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	9903      	ldr	r1, [sp, #12]
 8005d4a:	1a5b      	subs	r3, r3, r1
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	dcf2      	bgt.n	8005d36 <_printf_i+0x21e>
 8005d50:	e7eb      	b.n	8005d2a <_printf_i+0x212>
 8005d52:	2500      	movs	r5, #0
 8005d54:	f104 0619 	add.w	r6, r4, #25
 8005d58:	e7f5      	b.n	8005d46 <_printf_i+0x22e>
 8005d5a:	bf00      	nop
 8005d5c:	08006081 	.word	0x08006081
 8005d60:	08006092 	.word	0x08006092

08005d64 <_sbrk_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4d06      	ldr	r5, [pc, #24]	; (8005d80 <_sbrk_r+0x1c>)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	602b      	str	r3, [r5, #0]
 8005d70:	f000 f8c0 	bl	8005ef4 <_sbrk>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_sbrk_r+0x1a>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_sbrk_r+0x1a>
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	200016c4 	.word	0x200016c4

08005d84 <__sread>:
 8005d84:	b510      	push	{r4, lr}
 8005d86:	460c      	mov	r4, r1
 8005d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8c:	f000 f8a0 	bl	8005ed0 <_read_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	bfab      	itete	ge
 8005d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d96:	89a3      	ldrhlt	r3, [r4, #12]
 8005d98:	181b      	addge	r3, r3, r0
 8005d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d9e:	bfac      	ite	ge
 8005da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005da2:	81a3      	strhlt	r3, [r4, #12]
 8005da4:	bd10      	pop	{r4, pc}

08005da6 <__swrite>:
 8005da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005daa:	461f      	mov	r7, r3
 8005dac:	898b      	ldrh	r3, [r1, #12]
 8005dae:	05db      	lsls	r3, r3, #23
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	4616      	mov	r6, r2
 8005db6:	d505      	bpl.n	8005dc4 <__swrite+0x1e>
 8005db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f000 f868 	bl	8005e94 <_lseek_r>
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dce:	81a3      	strh	r3, [r4, #12]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dda:	f000 b817 	b.w	8005e0c <_write_r>

08005dde <__sseek>:
 8005dde:	b510      	push	{r4, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de6:	f000 f855 	bl	8005e94 <_lseek_r>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	bf15      	itete	ne
 8005df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dfa:	81a3      	strheq	r3, [r4, #12]
 8005dfc:	bf18      	it	ne
 8005dfe:	81a3      	strhne	r3, [r4, #12]
 8005e00:	bd10      	pop	{r4, pc}

08005e02 <__sclose>:
 8005e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e06:	f000 b813 	b.w	8005e30 <_close_r>
	...

08005e0c <_write_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	; (8005e2c <_write_r+0x20>)
 8005e10:	4604      	mov	r4, r0
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	602a      	str	r2, [r5, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f7fa fc61 	bl	80006e2 <_write>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_write_r+0x1e>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_write_r+0x1e>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	200016c4 	.word	0x200016c4

08005e30 <_close_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d06      	ldr	r5, [pc, #24]	; (8005e4c <_close_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	f7fa fc6d 	bl	800071a <_close>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_close_r+0x1a>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_close_r+0x1a>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	200016c4 	.word	0x200016c4

08005e50 <_fstat_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d07      	ldr	r5, [pc, #28]	; (8005e70 <_fstat_r+0x20>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	f7fa fc68 	bl	8000732 <_fstat>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d102      	bne.n	8005e6c <_fstat_r+0x1c>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	b103      	cbz	r3, 8005e6c <_fstat_r+0x1c>
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	200016c4 	.word	0x200016c4

08005e74 <_isatty_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d06      	ldr	r5, [pc, #24]	; (8005e90 <_isatty_r+0x1c>)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	f7fa fc67 	bl	8000752 <_isatty>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_isatty_r+0x1a>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_isatty_r+0x1a>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	200016c4 	.word	0x200016c4

08005e94 <_lseek_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d07      	ldr	r5, [pc, #28]	; (8005eb4 <_lseek_r+0x20>)
 8005e98:	4604      	mov	r4, r0
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	602a      	str	r2, [r5, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f7fa fc60 	bl	8000768 <_lseek>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_lseek_r+0x1e>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_lseek_r+0x1e>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	200016c4 	.word	0x200016c4

08005eb8 <__malloc_lock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	; (8005ec0 <__malloc_lock+0x8>)
 8005eba:	f7ff bb1d 	b.w	80054f8 <__retarget_lock_acquire_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	200016b8 	.word	0x200016b8

08005ec4 <__malloc_unlock>:
 8005ec4:	4801      	ldr	r0, [pc, #4]	; (8005ecc <__malloc_unlock+0x8>)
 8005ec6:	f7ff bb18 	b.w	80054fa <__retarget_lock_release_recursive>
 8005eca:	bf00      	nop
 8005ecc:	200016b8 	.word	0x200016b8

08005ed0 <_read_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d07      	ldr	r5, [pc, #28]	; (8005ef0 <_read_r+0x20>)
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	4611      	mov	r1, r2
 8005eda:	2200      	movs	r2, #0
 8005edc:	602a      	str	r2, [r5, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f7fa fbe2 	bl	80006a8 <_read>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_read_r+0x1e>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_read_r+0x1e>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	200016c4 	.word	0x200016c4

08005ef4 <_sbrk>:
 8005ef4:	4a04      	ldr	r2, [pc, #16]	; (8005f08 <_sbrk+0x14>)
 8005ef6:	6811      	ldr	r1, [r2, #0]
 8005ef8:	4603      	mov	r3, r0
 8005efa:	b909      	cbnz	r1, 8005f00 <_sbrk+0xc>
 8005efc:	4903      	ldr	r1, [pc, #12]	; (8005f0c <_sbrk+0x18>)
 8005efe:	6011      	str	r1, [r2, #0]
 8005f00:	6810      	ldr	r0, [r2, #0]
 8005f02:	4403      	add	r3, r0
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	4770      	bx	lr
 8005f08:	200016c8 	.word	0x200016c8
 8005f0c:	200016d0 	.word	0x200016d0

08005f10 <_init>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr

08005f1c <_fini>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr
