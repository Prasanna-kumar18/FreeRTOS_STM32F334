
6.2_Counting_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e4c  08005e4c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005e4c  08005e4c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e4c  08005e4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001654  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200016cc  200016cc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4dd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002688  00000000  00000000  0002f585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00031c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  00032b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a5a  00000000  00000000  00033918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e46  00000000  00000000  00055372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8d80  00000000  00000000  000661b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ef38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044d8  00000000  00000000  0012ef88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d14 	.word	0x08005d14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005d14 	.word	0x08005d14

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 faaf 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f833 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f873 	bl	80002c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //vSemaphoreCreateBinary(BinSemaphore);
  CountSemaphore = xSemaphoreCreateCounting(5,0); //Creating a counting Semaphore
 80001e2:	2100      	movs	r1, #0
 80001e4:	2005      	movs	r0, #5
 80001e6:	f002 fc07 	bl	80029f8 <xQueueCreateCountingSemaphore>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a0f      	ldr	r2, [pc, #60]	; (800022c <main+0x5c>)
 80001ee:	6013      	str	r3, [r2, #0]

  if( CountSemaphore!= NULL)
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <main+0x5c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d002      	beq.n	80001fe <main+0x2e>
  {
	  printf("Counting Semaphore Created Succesfully\n");
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0x60>)
 80001fa:	f005 f8ed 	bl	80053d8 <puts>
  }

  xTaskCreate(firsttask,"TokenSender",150,NULL,2,NULL);
 80001fe:	2300      	movs	r3, #0
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	2302      	movs	r3, #2
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2300      	movs	r3, #0
 8000208:	2296      	movs	r2, #150	; 0x96
 800020a:	490a      	ldr	r1, [pc, #40]	; (8000234 <main+0x64>)
 800020c:	480a      	ldr	r0, [pc, #40]	; (8000238 <main+0x68>)
 800020e:	f003 f941 	bl	8003494 <xTaskCreate>
  xTaskCreate(secondtask,"Reciever",150,NULL,1,NULL);
 8000212:	2300      	movs	r3, #0
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	2301      	movs	r3, #1
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2300      	movs	r3, #0
 800021c:	2296      	movs	r2, #150	; 0x96
 800021e:	4907      	ldr	r1, [pc, #28]	; (800023c <main+0x6c>)
 8000220:	4807      	ldr	r0, [pc, #28]	; (8000240 <main+0x70>)
 8000222:	f003 f937 	bl	8003494 <xTaskCreate>


  vTaskStartScheduler();
 8000226:	f003 faaf 	bl	8003788 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022a:	e7fe      	b.n	800022a <main+0x5a>
 800022c:	20000094 	.word	0x20000094
 8000230:	08005d2c 	.word	0x08005d2c
 8000234:	08005d54 	.word	0x08005d54
 8000238:	080003b9 	.word	0x080003b9
 800023c:	08005d60 	.word	0x08005d60
 8000240:	08000405 	.word	0x08000405

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f005 f84a 	bl	80052ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fcf9 	bl	8000c7c <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000290:	f000 f8de 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fd22 	bl	8001cf8 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ba:	f000 f8c9 	bl	8000450 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002de:	4b34      	ldr	r3, [pc, #208]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a33      	ldr	r2, [pc, #204]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b31      	ldr	r3, [pc, #196]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002f6:	4b2e      	ldr	r3, [pc, #184]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a2d      	ldr	r2, [pc, #180]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b2b      	ldr	r3, [pc, #172]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a27      	ldr	r2, [pc, #156]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <MX_GPIO_Init+0xe8>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a21      	ldr	r2, [pc, #132]	; (80003b0 <MX_GPIO_Init+0xe8>)
 800032c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2120      	movs	r1, #32
 8000342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000346:	f000 fc81 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800034a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800034e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000350:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	4619      	mov	r1, r3
 8000360:	4814      	ldr	r0, [pc, #80]	; (80003b4 <MX_GPIO_Init+0xec>)
 8000362:	f000 fb01 	bl	8000968 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000366:	230c      	movs	r3, #12
 8000368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036a:	2302      	movs	r3, #2
 800036c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000372:	2303      	movs	r3, #3
 8000374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000376:	2307      	movs	r3, #7
 8000378:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	4619      	mov	r1, r3
 8000380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000384:	f000 faf0 	bl	8000968 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000388:	2320      	movs	r3, #32
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038c:	2301      	movs	r3, #1
 800038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	2300      	movs	r3, #0
 8000396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	4619      	mov	r1, r3
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f000 fae1 	bl	8000968 <HAL_GPIO_Init>

}
 80003a6:	bf00      	nop
 80003a8:	3728      	adds	r7, #40	; 0x28
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	48000800 	.word	0x48000800

080003b8 <firsttask>:

/* USER CODE BEGIN 4 */
void firsttask (void *p)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

	while(1)
	{
		 xSemaphoreGive(CountSemaphore);
 80003c0:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <firsttask+0x44>)
 80003c2:	6818      	ldr	r0, [r3, #0]
 80003c4:	2300      	movs	r3, #0
 80003c6:	2200      	movs	r2, #0
 80003c8:	2100      	movs	r1, #0
 80003ca:	f002 fb49 	bl	8002a60 <xQueueGenericSend>
		 xSemaphoreGive(CountSemaphore);
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <firsttask+0x44>)
 80003d0:	6818      	ldr	r0, [r3, #0]
 80003d2:	2300      	movs	r3, #0
 80003d4:	2200      	movs	r2, #0
 80003d6:	2100      	movs	r1, #0
 80003d8:	f002 fb42 	bl	8002a60 <xQueueGenericSend>
		 xSemaphoreGive(CountSemaphore);
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <firsttask+0x44>)
 80003de:	6818      	ldr	r0, [r3, #0]
 80003e0:	2300      	movs	r3, #0
 80003e2:	2200      	movs	r2, #0
 80003e4:	2100      	movs	r1, #0
 80003e6:	f002 fb3b 	bl	8002a60 <xQueueGenericSend>



		vTaskDelay(pdMS_TO_TICKS(2000));    //
 80003ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003ee:	f003 f997 	bl	8003720 <vTaskDelay>

		printf("Delay of Sender Expired\n\n");
 80003f2:	4803      	ldr	r0, [pc, #12]	; (8000400 <firsttask+0x48>)
 80003f4:	f004 fff0 	bl	80053d8 <puts>
		 xSemaphoreGive(CountSemaphore);
 80003f8:	e7e2      	b.n	80003c0 <firsttask+0x8>
 80003fa:	bf00      	nop
 80003fc:	20000094 	.word	0x20000094
 8000400:	08005d6c 	.word	0x08005d6c

08000404 <secondtask>:
	}
}


void secondtask (void *p)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(xSemaphoreTake(CountSemaphore,portMAX_DELAY));//this will be blocked for ever until it recieves semaphore
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <secondtask+0x20>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f04f 31ff 	mov.w	r1, #4294967295
 8000414:	4618      	mov	r0, r3
 8000416:	f002 fdab 	bl	8002f70 <xQueueSemaphoreTake>
		printf("Signal Recieved\n");
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <secondtask+0x24>)
 800041c:	f004 ffdc 	bl	80053d8 <puts>
		if(xSemaphoreTake(CountSemaphore,portMAX_DELAY));//this will be blocked for ever until it recieves semaphore
 8000420:	e7f4      	b.n	800040c <secondtask+0x8>
 8000422:	bf00      	nop
 8000424:	20000094 	.word	0x20000094
 8000428:	08005d88 	.word	0x08005d88

0800042c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d101      	bne.n	8000442 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800043e:	f000 f991 	bl	8000764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40001000 	.word	0x40001000

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <HAL_MspInit+0x44>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <HAL_MspInit+0x44>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	; 0x30
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority ,0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	6879      	ldr	r1, [r7, #4]
 80004b8:	2036      	movs	r0, #54	; 0x36
 80004ba:	f000 fa2b 	bl	8000914 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80004be:	2036      	movs	r0, #54	; 0x36
 80004c0:	f000 fa44 	bl	800094c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004c4:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <HAL_InitTick+0xa0>)
 80004c6:	69db      	ldr	r3, [r3, #28]
 80004c8:	4a1e      	ldr	r2, [pc, #120]	; (8000544 <HAL_InitTick+0xa0>)
 80004ca:	f043 0310 	orr.w	r3, r3, #16
 80004ce:	61d3      	str	r3, [r2, #28]
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <HAL_InitTick+0xa0>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	f003 0310 	and.w	r3, r3, #16
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004dc:	f107 0210 	add.w	r2, r7, #16
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	4611      	mov	r1, r2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 fe1a 	bl	8002120 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80004ec:	f001 fdf6 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 80004f0:	4603      	mov	r3, r0
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f8:	4a13      	ldr	r2, [pc, #76]	; (8000548 <HAL_InitTick+0xa4>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	0c9b      	lsrs	r3, r3, #18
 8000500:	3b01      	subs	r3, #1
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <HAL_InitTick+0xa8>)
 8000506:	4a12      	ldr	r2, [pc, #72]	; (8000550 <HAL_InitTick+0xac>)
 8000508:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <HAL_InitTick+0xa8>)
 800050c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000510:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_InitTick+0xa8>)
 8000514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000516:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_InitTick+0xa8>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <HAL_InitTick+0xa8>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <HAL_InitTick+0xa8>)
 8000526:	f001 fe2d 	bl	8002184 <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d104      	bne.n	800053a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000530:	4806      	ldr	r0, [pc, #24]	; (800054c <HAL_InitTick+0xa8>)
 8000532:	f001 fe89 	bl	8002248 <HAL_TIM_Base_Start_IT>
 8000536:	4603      	mov	r3, r0
 8000538:	e000      	b.n	800053c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	3730      	adds	r7, #48	; 0x30
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021000 	.word	0x40021000
 8000548:	431bde83 	.word	0x431bde83
 800054c:	20000098 	.word	0x20000098
 8000550:	40001000 	.word	0x40001000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <TIM6_DAC1_IRQHandler+0x10>)
 8000586:	f001 febb 	bl	8002300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000098 	.word	0x20000098

08000594 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <ITM_SendChar+0x48>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <ITM_SendChar+0x48>)
 80005a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005a8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <ITM_SendChar+0x4c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <ITM_SendChar+0x4c>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005b6:	bf00      	nop
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f8      	beq.n	80005b8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000edfc 	.word	0xe000edfc
 80005e0:	e0000e00 	.word	0xe0000e00

080005e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	e00a      	b.n	800060c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005f6:	f3af 8000 	nop.w
 80005fa:	4601      	mov	r1, r0
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	60ba      	str	r2, [r7, #8]
 8000602:	b2ca      	uxtb	r2, r1
 8000604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf0      	blt.n	80005f6 <_read+0x12>
	}

return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b086      	sub	sp, #24
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e009      	b.n	8000644 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffab 	bl	8000594 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbf1      	blt.n	8000630 <_write+0x12>
	}
	return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_close>:

int _close(int file)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	return -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800067e:	605a      	str	r2, [r3, #4]
	return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <_isatty>:

int _isatty(int file)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	return 1;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
	return 0;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SystemInit+0x20>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <SystemInit+0x20>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800071c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e8:	f7ff ffea 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	; (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000712:	f004 fdb9 	bl	8005288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000716:	f7ff fd5b 	bl	80001d0 <main>

0800071a <LoopForever>:

LoopForever:
    b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800071c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000728:	08005e54 	.word	0x08005e54
  ldr r2, =_sbss
 800072c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000730:	200016cc 	.word	0x200016cc

08000734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_2_IRQHandler>
	...

08000738 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_Init+0x28>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_Init+0x28>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f8d8 	bl	80008fe <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff fea8 	bl	80004a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000754:	f7ff fe82 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_IncTick+0x20>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x24>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4413      	add	r3, r2
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_IncTick+0x24>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000008 	.word	0x20000008
 8000788:	200000e4 	.word	0x200000e4

0800078c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <HAL_GetTick+0x14>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	200000e4 	.word	0x200000e4

080007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	db0b      	blt.n	8000832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 021f 	and.w	r2, r3, #31
 8000820:	4907      	ldr	r1, [pc, #28]	; (8000840 <__NVIC_EnableIRQ+0x38>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	095b      	lsrs	r3, r3, #5
 8000828:	2001      	movs	r0, #1
 800082a:	fa00 f202 	lsl.w	r2, r0, r2
 800082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000e100 	.word	0xe000e100

08000844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	db0a      	blt.n	800086e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	490c      	ldr	r1, [pc, #48]	; (8000890 <__NVIC_SetPriority+0x4c>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	440b      	add	r3, r1
 8000868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800086c:	e00a      	b.n	8000884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4908      	ldr	r1, [pc, #32]	; (8000894 <__NVIC_SetPriority+0x50>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	3b04      	subs	r3, #4
 800087c:	0112      	lsls	r2, r2, #4
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	440b      	add	r3, r1
 8000882:	761a      	strb	r2, [r3, #24]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f1c3 0307 	rsb	r3, r3, #7
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	bf28      	it	cs
 80008b6:	2304      	movcs	r3, #4
 80008b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3304      	adds	r3, #4
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d902      	bls.n	80008c8 <NVIC_EncodePriority+0x30>
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3b03      	subs	r3, #3
 80008c6:	e000      	b.n	80008ca <NVIC_EncodePriority+0x32>
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43da      	mvns	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	401a      	ands	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	43d9      	mvns	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	4313      	orrs	r3, r2
         );
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ff4c 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000926:	f7ff ff61 	bl	80007ec <__NVIC_GetPriorityGrouping>
 800092a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	68b9      	ldr	r1, [r7, #8]
 8000930:	6978      	ldr	r0, [r7, #20]
 8000932:	f7ff ffb1 	bl	8000898 <NVIC_EncodePriority>
 8000936:	4602      	mov	r2, r0
 8000938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff80 	bl	8000844 <__NVIC_SetPriority>
}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff54 	bl	8000808 <__NVIC_EnableIRQ>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e14e      	b.n	8000c16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 8140 	beq.w	8000c10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d005      	beq.n	80009a8 <HAL_GPIO_Init+0x40>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d130      	bne.n	8000a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009de:	2201      	movs	r2, #1
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	f003 0201 	and.w	r2, r3, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d017      	beq.n	8000a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d123      	bne.n	8000a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	6939      	ldr	r1, [r7, #16]
 8000a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 809a 	beq.w	8000c10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b55      	ldr	r3, [pc, #340]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a54      	ldr	r2, [pc, #336]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b52      	ldr	r3, [pc, #328]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af4:	4a50      	ldr	r2, [pc, #320]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b1e:	d013      	beq.n	8000b48 <HAL_GPIO_Init+0x1e0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <HAL_GPIO_Init+0x2d4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00d      	beq.n	8000b44 <HAL_GPIO_Init+0x1dc>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a45      	ldr	r2, [pc, #276]	; (8000c40 <HAL_GPIO_Init+0x2d8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d007      	beq.n	8000b40 <HAL_GPIO_Init+0x1d8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a44      	ldr	r2, [pc, #272]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_GPIO_Init+0x1d4>
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e006      	b.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b3c:	2305      	movs	r3, #5
 8000b3e:	e004      	b.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e002      	b.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	f002 0203 	and.w	r2, r2, #3
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	4093      	lsls	r3, r2
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b5a:	4937      	ldr	r1, [pc, #220]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3302      	adds	r3, #2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b8c:	4a2e      	ldr	r2, [pc, #184]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f47f aea9 	bne.w	8000978 <HAL_GPIO_Init+0x10>
  }
}
 8000c26:	bf00      	nop
 8000c28:	bf00      	nop
 8000c2a:	371c      	adds	r7, #28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c68:	e002      	b.n	8000c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f001 b823 	b.w	8001ce8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 817d 	beq.w	8000fb2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb8:	4bbc      	ldr	r3, [pc, #752]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 030c 	and.w	r3, r3, #12
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d00c      	beq.n	8000cde <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc4:	4bb9      	ldr	r3, [pc, #740]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 030c 	and.w	r3, r3, #12
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d15c      	bne.n	8000d8a <HAL_RCC_OscConfig+0x10e>
 8000cd0:	4bb6      	ldr	r3, [pc, #728]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cdc:	d155      	bne.n	8000d8a <HAL_RCC_OscConfig+0x10e>
 8000cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf6:	fab3 f383 	clz	r3, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	095b      	lsrs	r3, r3, #5
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d102      	bne.n	8000d10 <HAL_RCC_OscConfig+0x94>
 8000d0a:	4ba8      	ldr	r3, [pc, #672]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	e015      	b.n	8000d3c <HAL_RCC_OscConfig+0xc0>
 8000d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d14:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d28:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d30:	fa93 f3a3 	rbit	r3, r3
 8000d34:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d38:	4b9c      	ldr	r3, [pc, #624]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d40:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d48:	fa92 f2a2 	rbit	r2, r2
 8000d4c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d50:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	f042 0220 	orr.w	r2, r2, #32
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	f002 021f 	and.w	r2, r2, #31
 8000d64:	2101      	movs	r1, #1
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 811f 	beq.w	8000fb0 <HAL_RCC_OscConfig+0x334>
 8000d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8116 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f000 bfaf 	b.w	8001ce8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9a:	d106      	bne.n	8000daa <HAL_RCC_OscConfig+0x12e>
 8000d9c:	4b83      	ldr	r3, [pc, #524]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a82      	ldr	r2, [pc, #520]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e036      	b.n	8000e18 <HAL_RCC_OscConfig+0x19c>
 8000daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x158>
 8000dba:	4b7c      	ldr	r3, [pc, #496]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a7b      	ldr	r2, [pc, #492]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b79      	ldr	r3, [pc, #484]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a78      	ldr	r2, [pc, #480]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e021      	b.n	8000e18 <HAL_RCC_OscConfig+0x19c>
 8000dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x184>
 8000de6:	4b71      	ldr	r3, [pc, #452]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a70      	ldr	r2, [pc, #448]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b6e      	ldr	r3, [pc, #440]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a6d      	ldr	r2, [pc, #436]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e00b      	b.n	8000e18 <HAL_RCC_OscConfig+0x19c>
 8000e00:	4b6a      	ldr	r3, [pc, #424]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a69      	ldr	r2, [pc, #420]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b67      	ldr	r3, [pc, #412]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a66      	ldr	r2, [pc, #408]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e16:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e18:	4b64      	ldr	r3, [pc, #400]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	f023 020f 	bic.w	r2, r3, #15
 8000e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	495f      	ldr	r1, [pc, #380]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d059      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e42:	f7ff fca3 	bl	800078c <HAL_GetTick>
 8000e46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	e00a      	b.n	8000e62 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fc9e 	bl	800078c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b64      	cmp	r3, #100	; 0x64
 8000e5a:	d902      	bls.n	8000e62 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	f000 bf43 	b.w	8001ce8 <HAL_RCC_OscConfig+0x106c>
 8000e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e66:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e76:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7a:	fab3 f383 	clz	r3, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	095b      	lsrs	r3, r3, #5
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d102      	bne.n	8000e94 <HAL_RCC_OscConfig+0x218>
 8000e8e:	4b47      	ldr	r3, [pc, #284]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	e015      	b.n	8000ec0 <HAL_RCC_OscConfig+0x244>
 8000e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e98:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000eb0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000eb4:	fa93 f3a3 	rbit	r3, r3
 8000eb8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ec8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ecc:	fa92 f2a2 	rbit	r2, r2
 8000ed0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ed4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	f042 0220 	orr.w	r2, r2, #32
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	f002 021f 	and.w	r2, r2, #31
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0ab      	beq.n	8000e4c <HAL_RCC_OscConfig+0x1d0>
 8000ef4:	e05d      	b.n	8000fb2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fc49 	bl	800078c <HAL_GetTick>
 8000efa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efe:	e00a      	b.n	8000f16 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f00:	f7ff fc44 	bl	800078c <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b64      	cmp	r3, #100	; 0x64
 8000f0e:	d902      	bls.n	8000f16 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	f000 bee9 	b.w	8001ce8 <HAL_RCC_OscConfig+0x106c>
 8000f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	fab3 f383 	clz	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	095b      	lsrs	r3, r3, #5
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d102      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2cc>
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	e015      	b.n	8000f74 <HAL_RCC_OscConfig+0x2f8>
 8000f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f50:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f54:	fa93 f3a3 	rbit	r3, r3
 8000f58:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f60:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f78:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f7c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f80:	fa92 f2a2 	rbit	r2, r2
 8000f84:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f88:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f8c:	fab2 f282 	clz	r2, r2
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	f042 0220 	orr.w	r2, r2, #32
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	f002 021f 	and.w	r2, r2, #31
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ab      	bne.n	8000f00 <HAL_RCC_OscConfig+0x284>
 8000fa8:	e003      	b.n	8000fb2 <HAL_RCC_OscConfig+0x336>
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 817d 	beq.w	80012c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fc8:	4ba6      	ldr	r3, [pc, #664]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00b      	beq.n	8000fec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fd4:	4ba3      	ldr	r3, [pc, #652]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 030c 	and.w	r3, r3, #12
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d172      	bne.n	80010c6 <HAL_RCC_OscConfig+0x44a>
 8000fe0:	4ba0      	ldr	r3, [pc, #640]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d16c      	bne.n	80010c6 <HAL_RCC_OscConfig+0x44a>
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000ffe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	fab3 f383 	clz	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	095b      	lsrs	r3, r3, #5
 800100a:	b2db      	uxtb	r3, r3
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d102      	bne.n	800101c <HAL_RCC_OscConfig+0x3a0>
 8001016:	4b93      	ldr	r3, [pc, #588]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	e013      	b.n	8001044 <HAL_RCC_OscConfig+0x3c8>
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001034:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001040:	4b88      	ldr	r3, [pc, #544]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	2202      	movs	r2, #2
 8001046:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800104a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800104e:	fa92 f2a2 	rbit	r2, r2
 8001052:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001056:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800105a:	fab2 f282 	clz	r2, r2
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	f042 0220 	orr.w	r2, r2, #32
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	f002 021f 	and.w	r2, r2, #31
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	4013      	ands	r3, r2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00a      	beq.n	800108c <HAL_RCC_OscConfig+0x410>
 8001076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d002      	beq.n	800108c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	f000 be2e 	b.w	8001ce8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	4b75      	ldr	r3, [pc, #468]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	21f8      	movs	r1, #248	; 0xf8
 80010a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010aa:	fa91 f1a1 	rbit	r1, r1
 80010ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010b6:	fab1 f181 	clz	r1, r1
 80010ba:	b2c9      	uxtb	r1, r1
 80010bc:	408b      	lsls	r3, r1
 80010be:	4969      	ldr	r1, [pc, #420]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c4:	e0fd      	b.n	80012c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8088 	beq.w	80011e8 <HAL_RCC_OscConfig+0x56c>
 80010d8:	2301      	movs	r3, #1
 80010da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	461a      	mov	r2, r3
 8001100:	2301      	movs	r3, #1
 8001102:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fb42 	bl	800078c <HAL_GetTick>
 8001108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fb3d 	bl	800078c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d902      	bls.n	8001124 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	f000 bde2 	b.w	8001ce8 <HAL_RCC_OscConfig+0x106c>
 8001124:	2302      	movs	r3, #2
 8001126:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001136:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	095b      	lsrs	r3, r3, #5
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d102      	bne.n	8001154 <HAL_RCC_OscConfig+0x4d8>
 800114e:	4b45      	ldr	r3, [pc, #276]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	e013      	b.n	800117c <HAL_RCC_OscConfig+0x500>
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800116c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001178:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	2202      	movs	r2, #2
 800117e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001182:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001186:	fa92 f2a2 	rbit	r2, r2
 800118a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800118e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001192:	fab2 f282 	clz	r2, r2
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	f042 0220 	orr.w	r2, r2, #32
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	f002 021f 	and.w	r2, r2, #31
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0af      	beq.n	800110e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	21f8      	movs	r1, #248	; 0xf8
 80011c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011cc:	fa91 f1a1 	rbit	r1, r1
 80011d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011d8:	fab1 f181 	clz	r1, r1
 80011dc:	b2c9      	uxtb	r1, r1
 80011de:	408b      	lsls	r3, r1
 80011e0:	4920      	ldr	r1, [pc, #128]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
 80011e6:	e06c      	b.n	80012c2 <HAL_RCC_OscConfig+0x646>
 80011e8:	2301      	movs	r3, #1
 80011ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	461a      	mov	r2, r3
 8001210:	2300      	movs	r3, #0
 8001212:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff faba 	bl	800078c <HAL_GetTick>
 8001218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fab5 	bl	800078c <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d902      	bls.n	8001234 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	f000 bd5a 	b.w	8001ce8 <HAL_RCC_OscConfig+0x106c>
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d104      	bne.n	8001268 <HAL_RCC_OscConfig+0x5ec>
 800125e:	4b01      	ldr	r3, [pc, #4]	; (8001264 <HAL_RCC_OscConfig+0x5e8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	e015      	b.n	8001290 <HAL_RCC_OscConfig+0x614>
 8001264:	40021000 	.word	0x40021000
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001280:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800128c:	4bc8      	ldr	r3, [pc, #800]	; (80015b0 <HAL_RCC_OscConfig+0x934>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2202      	movs	r2, #2
 8001292:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001296:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800129a:	fa92 f2a2 	rbit	r2, r2
 800129e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012a6:	fab2 f282 	clz	r2, r2
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	f042 0220 	orr.w	r2, r2, #32
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	f002 021f 	and.w	r2, r2, #31
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ad      	bne.n	800121e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8110 	beq.w	80014f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d079      	beq.n	80013dc <HAL_RCC_OscConfig+0x760>
 80012e8:	2301      	movs	r3, #1
 80012ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4bab      	ldr	r3, [pc, #684]	; (80015b4 <HAL_RCC_OscConfig+0x938>)
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	461a      	mov	r2, r3
 800130e:	2301      	movs	r3, #1
 8001310:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fa3b 	bl	800078c <HAL_GetTick>
 8001316:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	e00a      	b.n	8001332 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff fa36 	bl	800078c <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d902      	bls.n	8001332 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	f000 bcdb 	b.w	8001ce8 <HAL_RCC_OscConfig+0x106c>
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001348:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800134c:	2202      	movs	r2, #2
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001354:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	fa93 f2a3 	rbit	r2, r3
 800135e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001370:	2202      	movs	r2, #2
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	fa93 f2a3 	rbit	r2, r3
 8001382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800138a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138c:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <HAL_RCC_OscConfig+0x934>)
 800138e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001394:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001398:	2102      	movs	r1, #2
 800139a:	6019      	str	r1, [r3, #0]
 800139c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	fa93 f1a3 	rbit	r1, r3
 80013aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013b2:	6019      	str	r1, [r3, #0]
  return result;
 80013b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	2101      	movs	r1, #1
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0a0      	beq.n	800131c <HAL_RCC_OscConfig+0x6a0>
 80013da:	e08d      	b.n	80014f8 <HAL_RCC_OscConfig+0x87c>
 80013dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fa93 f2a3 	rbit	r2, r3
 80013f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013fe:	601a      	str	r2, [r3, #0]
  return result;
 8001400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001404:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001408:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140a:	fab3 f383 	clz	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x938>)
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	461a      	mov	r2, r3
 800141a:	2300      	movs	r3, #0
 800141c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff f9b5 	bl	800078c <HAL_GetTick>
 8001422:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001426:	e00a      	b.n	800143e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff f9b0 	bl	800078c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d902      	bls.n	800143e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	f000 bc55 	b.w	8001ce8 <HAL_RCC_OscConfig+0x106c>
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001446:	2202      	movs	r2, #2
 8001448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fa93 f2a3 	rbit	r2, r3
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800146a:	2202      	movs	r2, #2
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001472:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fa93 f2a3 	rbit	r2, r3
 800147c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800148e:	2202      	movs	r2, #2
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fa93 f2a3 	rbit	r2, r3
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014aa:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <HAL_RCC_OscConfig+0x934>)
 80014ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014b6:	2102      	movs	r1, #2
 80014b8:	6019      	str	r1, [r3, #0]
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	fa93 f1a3 	rbit	r1, r3
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014d0:	6019      	str	r1, [r3, #0]
  return result;
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d197      	bne.n	8001428 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 81a1 	beq.w	8001850 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001514:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_RCC_OscConfig+0x934>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d116      	bne.n	800154e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_RCC_OscConfig+0x934>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <HAL_RCC_OscConfig+0x934>)
 8001526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152a:	61d3      	str	r3, [r2, #28]
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_RCC_OscConfig+0x934>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001546:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_RCC_OscConfig+0x93c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d11a      	bne.n	8001590 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_RCC_OscConfig+0x93c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <HAL_RCC_OscConfig+0x93c>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff f911 	bl	800078c <HAL_GetTick>
 800156a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	e009      	b.n	8001584 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001570:	f7ff f90c 	bl	800078c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b64      	cmp	r3, #100	; 0x64
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e3b1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_RCC_OscConfig+0x93c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ef      	beq.n	8001570 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10d      	bne.n	80015bc <HAL_RCC_OscConfig+0x940>
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_RCC_OscConfig+0x934>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4a02      	ldr	r2, [pc, #8]	; (80015b0 <HAL_RCC_OscConfig+0x934>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6213      	str	r3, [r2, #32]
 80015ac:	e03c      	b.n	8001628 <HAL_RCC_OscConfig+0x9ac>
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	10908120 	.word	0x10908120
 80015b8:	40007000 	.word	0x40007000
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x96a>
 80015cc:	4bc1      	ldr	r3, [pc, #772]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4ac0      	ldr	r2, [pc, #768]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	4bbe      	ldr	r3, [pc, #760]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4abd      	ldr	r2, [pc, #756]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	e020      	b.n	8001628 <HAL_RCC_OscConfig+0x9ac>
 80015e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x994>
 80015f6:	4bb7      	ldr	r3, [pc, #732]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4ab6      	ldr	r2, [pc, #728]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	4bb4      	ldr	r3, [pc, #720]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4ab3      	ldr	r2, [pc, #716]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6213      	str	r3, [r2, #32]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0x9ac>
 8001610:	4bb0      	ldr	r3, [pc, #704]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4aaf      	ldr	r2, [pc, #700]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	4bad      	ldr	r3, [pc, #692]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4aac      	ldr	r2, [pc, #688]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8081 	beq.w	800173c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff f8a7 	bl	800078c <HAL_GetTick>
 800163e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff f8a2 	bl	800078c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	; 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e345      	b.n	8001ce8 <HAL_RCC_OscConfig+0x106c>
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001664:	2202      	movs	r2, #2
 8001666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	fa93 f2a3 	rbit	r2, r3
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001684:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001688:	2202      	movs	r2, #2
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016a2:	601a      	str	r2, [r3, #0]
  return result;
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	095b      	lsrs	r3, r3, #5
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d102      	bne.n	80016c8 <HAL_RCC_OscConfig+0xa4c>
 80016c2:	4b84      	ldr	r3, [pc, #528]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	e013      	b.n	80016f0 <HAL_RCC_OscConfig+0xa74>
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016d0:	2202      	movs	r2, #2
 80016d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fa93 f2a3 	rbit	r2, r3
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	4b79      	ldr	r3, [pc, #484]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016f8:	2102      	movs	r1, #2
 80016fa:	6011      	str	r1, [r2, #0]
 80016fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001700:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	fa92 f1a2 	rbit	r1, r2
 800170a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800170e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001712:	6011      	str	r1, [r2, #0]
  return result;
 8001714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001718:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	fab2 f282 	clz	r2, r2
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	f002 021f 	and.w	r2, r2, #31
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f202 	lsl.w	r2, r1, r2
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d084      	beq.n	8001644 <HAL_RCC_OscConfig+0x9c8>
 800173a:	e07f      	b.n	800183c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff f826 	bl	800078c <HAL_GetTick>
 8001740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001744:	e00b      	b.n	800175e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff f821 	bl	800078c <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e2c4      	b.n	8001ce8 <HAL_RCC_OscConfig+0x106c>
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f2a3 	rbit	r2, r3
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800178a:	2202      	movs	r2, #2
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fa93 f2a3 	rbit	r2, r3
 800179c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017a4:	601a      	str	r2, [r3, #0]
  return result;
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0302 	orr.w	r3, r3, #2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d102      	bne.n	80017ca <HAL_RCC_OscConfig+0xb4e>
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	e013      	b.n	80017f2 <HAL_RCC_OscConfig+0xb76>
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017d2:	2202      	movs	r2, #2
 80017d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017fa:	2102      	movs	r1, #2
 80017fc:	6011      	str	r1, [r2, #0]
 80017fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001802:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	fa92 f1a2 	rbit	r1, r2
 800180c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001810:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001814:	6011      	str	r1, [r2, #0]
  return result;
 8001816:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800181a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	fab2 f282 	clz	r2, r2
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	f002 021f 	and.w	r2, r2, #31
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d184      	bne.n	8001746 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800183c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001840:	2b01      	cmp	r3, #1
 8001842:	d105      	bne.n	8001850 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 800184a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001854:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8242 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_RCC_OscConfig+0xc58>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b08      	cmp	r3, #8
 800186c:	f000 8213 	beq.w	8001c96 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b02      	cmp	r3, #2
 800187e:	f040 8162 	bne.w	8001b46 <HAL_RCC_OscConfig+0xeca>
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800188a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800188e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	fa93 f2a3 	rbit	r2, r3
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018a6:	601a      	str	r2, [r3, #0]
  return result;
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	461a      	mov	r2, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7fe ff60 	bl	800078c <HAL_GetTick>
 80018cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	e00c      	b.n	80018ec <HAL_RCC_OscConfig+0xc70>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7fe ff58 	bl	800078c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1fd      	b.n	8001ce8 <HAL_RCC_OscConfig+0x106c>
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001910:	601a      	str	r2, [r3, #0]
  return result;
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800191a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d102      	bne.n	8001936 <HAL_RCC_OscConfig+0xcba>
 8001930:	4bb0      	ldr	r3, [pc, #704]	; (8001bf4 <HAL_RCC_OscConfig+0xf78>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	e027      	b.n	8001986 <HAL_RCC_OscConfig+0xd0a>
 8001936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800193e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fa93 f2a3 	rbit	r2, r3
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001960:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	4b9c      	ldr	r3, [pc, #624]	; (8001bf4 <HAL_RCC_OscConfig+0xf78>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800198a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800198e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001992:	6011      	str	r1, [r2, #0]
 8001994:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001998:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	fa92 f1a2 	rbit	r1, r2
 80019a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019aa:	6011      	str	r1, [r2, #0]
  return result;
 80019ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	fab2 f282 	clz	r2, r2
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	f042 0220 	orr.w	r2, r2, #32
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f002 021f 	and.w	r2, r2, #31
 80019c6:	2101      	movs	r1, #1
 80019c8:	fa01 f202 	lsl.w	r2, r1, r2
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d182      	bne.n	80018d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d2:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0xf78>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	430b      	orrs	r3, r1
 80019f4:	497f      	ldr	r1, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0xf78>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a1e:	601a      	str	r2, [r3, #0]
  return result;
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a28:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7fe fea4 	bl	800078c <HAL_GetTick>
 8001a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7fe fe9f 	bl	800078c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e144      	b.n	8001ce8 <HAL_RCC_OscConfig+0x106c>
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	fa93 f2a3 	rbit	r2, r3
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a82:	601a      	str	r2, [r3, #0]
  return result;
 8001a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	095b      	lsrs	r3, r3, #5
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xe2c>
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_RCC_OscConfig+0xf78>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e027      	b.n	8001af8 <HAL_RCC_OscConfig+0xe7c>
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ab0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	fa93 f2a3 	rbit	r2, r3
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ad6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <HAL_RCC_OscConfig+0xf78>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001afc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b04:	6011      	str	r1, [r2, #0]
 8001b06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	fa92 f1a2 	rbit	r1, r2
 8001b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b1c:	6011      	str	r1, [r2, #0]
  return result;
 8001b1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b22:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f042 0220 	orr.w	r2, r2, #32
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f002 021f 	and.w	r2, r2, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d082      	beq.n	8001a4a <HAL_RCC_OscConfig+0xdce>
 8001b44:	e0cf      	b.n	8001ce6 <HAL_RCC_OscConfig+0x106a>
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b6a:	601a      	str	r2, [r3, #0]
  return result;
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	461a      	mov	r2, r3
 8001b88:	2300      	movs	r3, #0
 8001b8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe fdfe 	bl	800078c <HAL_GetTick>
 8001b90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b96:	f7fe fdf9 	bl	800078c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e09e      	b.n	8001ce8 <HAL_RCC_OscConfig+0x106c>
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	fa93 f2a3 	rbit	r2, r3
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bce:	601a      	str	r2, [r3, #0]
  return result;
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d104      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xf7c>
 8001bee:	4b01      	ldr	r3, [pc, #4]	; (8001bf4 <HAL_RCC_OscConfig+0xf78>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	e029      	b.n	8001c48 <HAL_RCC_OscConfig+0xfcc>
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fa93 f2a3 	rbit	r2, r3
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <HAL_RCC_OscConfig+0x1078>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c4c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c54:	6011      	str	r1, [r2, #0]
 8001c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	fa92 f1a2 	rbit	r1, r2
 8001c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c6c:	6011      	str	r1, [r2, #0]
  return result;
 8001c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c72:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f002 021f 	and.w	r2, r2, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d180      	bne.n	8001b96 <HAL_RCC_OscConfig+0xf1a>
 8001c94:	e027      	b.n	8001ce6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e01e      	b.n	8001ce8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_RCC_OscConfig+0x1078>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b09e      	sub	sp, #120	; 0x78
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e162      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b90      	ldr	r3, [pc, #576]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d910      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b8d      	ldr	r3, [pc, #564]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	498b      	ldr	r1, [pc, #556]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e14a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b82      	ldr	r3, [pc, #520]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	497f      	ldr	r1, [pc, #508]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80dc 	beq.w	8001f24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d13c      	bne.n	8001dee <HAL_RCC_ClockConfig+0xf6>
 8001d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xa6>
 8001d98:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	e00f      	b.n	8001dbe <HAL_RCC_ClockConfig+0xc6>
 8001d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	667b      	str	r3, [r7, #100]	; 0x64
 8001dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db0:	663b      	str	r3, [r7, #96]	; 0x60
 8001db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dc6:	fa92 f2a2 	rbit	r2, r2
 8001dca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d17b      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0f3      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d13c      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x178>
 8001df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x128>
 8001e1a:	4b4f      	ldr	r3, [pc, #316]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e00f      	b.n	8001e40 <HAL_RCC_ClockConfig+0x148>
 8001e20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e32:	643b      	str	r3, [r7, #64]	; 0x40
 8001e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e3c:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e44:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e48:	fa92 f2a2 	rbit	r2, r2
 8001e4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e50:	fab2 f282 	clz	r2, r2
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	f042 0220 	orr.w	r2, r2, #32
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f002 021f 	and.w	r2, r2, #31
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f202 	lsl.w	r2, r1, r2
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d13a      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b2      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
 8001e70:	2302      	movs	r3, #2
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x1a0>
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e00d      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1bc>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	61ba      	str	r2, [r7, #24]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	617a      	str	r2, [r7, #20]
  return result;
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f042 0220 	orr.w	r2, r2, #32
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f002 021f 	and.w	r2, r2, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e079      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	491a      	ldr	r1, [pc, #104]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fc4a 	bl	800078c <HAL_GetTick>
 8001ef8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7fe fc46 	bl	800078c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e061      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d214      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 0207 	bic.w	r2, r3, #7
 8001f3a:	4906      	ldr	r1, [pc, #24]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e040      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x2de>
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	491a      	ldr	r1, [pc, #104]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4912      	ldr	r1, [pc, #72]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f9a:	f000 f829 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa8:	22f0      	movs	r2, #240	; 0xf0
 8001faa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	60fa      	str	r2, [r7, #12]
  return result;
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	40d3      	lsrs	r3, r2
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x2ec>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_RCC_ClockConfig+0x2f0>)
 8001fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_RCC_ClockConfig+0x2f4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fa68 	bl	80004a4 <HAL_InitTick>
  
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3778      	adds	r7, #120	; 0x78
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08005db0 	.word	0x08005db0
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x30>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x36>
 800201e:	e03c      	b.n	800209a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002022:	623b      	str	r3, [r7, #32]
      break;
 8002024:	e03c      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800202c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002030:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	607a      	str	r2, [r7, #4]
  return result;
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	40d3      	lsrs	r3, r2
 8002044:	4a1c      	ldr	r2, [pc, #112]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800204a:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	220f      	movs	r2, #15
 8002054:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	fa92 f2a2 	rbit	r2, r2
 800205c:	60fa      	str	r2, [r7, #12]
  return result;
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	fab2 f282 	clz	r2, r2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	40d3      	lsrs	r3, r2
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002078:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
 8002088:	e004      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	623b      	str	r3, [r7, #32]
      break;
 8002098:	e002      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800209c:	623b      	str	r3, [r7, #32]
      break;
 800209e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a0:	6a3b      	ldr	r3, [r7, #32]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	372c      	adds	r7, #44	; 0x2c
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	007a1200 	.word	0x007a1200
 80020b8:	08005dc8 	.word	0x08005dc8
 80020bc:	08005dd8 	.word	0x08005dd8
 80020c0:	003d0900 	.word	0x003d0900

080020c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000

080020dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020e2:	f7ff ffef 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e6:	4601      	mov	r1, r0
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	fa92 f2a2 	rbit	r2, r2
 80020fc:	603a      	str	r2, [r7, #0]
  return result;
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	40d3      	lsrs	r3, r2
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_RCC_GetPCLK1Freq+0x40>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	08005dc0 	.word	0x08005dc0

08002120 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	220f      	movs	r2, #15
 800212e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_GetClockConfig+0x5c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_RCC_GetClockConfig+0x60>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0207 	and.w	r2, r3, #7
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	601a      	str	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e049      	b.n	800222a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f841 	bl	8002232 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f000 f9e4 	bl	8002590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d001      	beq.n	8002260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e040      	b.n	80022e2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_TIM_Base_Start_IT+0xa8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00e      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x58>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d009      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x58>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_TIM_Base_Start_IT+0xac>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d004      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x58>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d115      	bne.n	80022cc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_TIM_Base_Start_IT+0xb4>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d015      	beq.n	80022de <HAL_TIM_Base_Start_IT+0x96>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d011      	beq.n	80022de <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ca:	e008      	b.n	80022de <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e000      	b.n	80022e0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40014000 	.word	0x40014000
 80022fc:	00010007 	.word	0x00010007

08002300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d122      	bne.n	800235c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b02      	cmp	r3, #2
 8002322:	d11b      	bne.n	800235c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0202 	mvn.w	r2, #2
 800232c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f905 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f8f7 	bl	800253e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f908 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b04      	cmp	r3, #4
 8002368:	d122      	bne.n	80023b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b04      	cmp	r3, #4
 8002376:	d11b      	bne.n	80023b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0204 	mvn.w	r2, #4
 8002380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8db 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 800239c:	e005      	b.n	80023aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8cd 	bl	800253e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f8de 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d122      	bne.n	8002404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d11b      	bne.n	8002404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0208 	mvn.w	r2, #8
 80023d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2204      	movs	r2, #4
 80023da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f8b1 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 80023f0:	e005      	b.n	80023fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f8a3 	bl	800253e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f8b4 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b10      	cmp	r3, #16
 8002410:	d122      	bne.n	8002458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b10      	cmp	r3, #16
 800241e:	d11b      	bne.n	8002458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0210 	mvn.w	r2, #16
 8002428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2208      	movs	r2, #8
 800242e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f887 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f879 	bl	800253e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f88a 	bl	8002566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10e      	bne.n	8002484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0201 	mvn.w	r2, #1
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fd ffd4 	bl	800042c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	2b80      	cmp	r3, #128	; 0x80
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	2b80      	cmp	r3, #128	; 0x80
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8f2 	bl	8002694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024be:	d10e      	bne.n	80024de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b80      	cmp	r3, #128	; 0x80
 80024cc:	d107      	bne.n	80024de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f8e5 	bl	80026a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d10e      	bne.n	800250a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d107      	bne.n	800250a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f838 	bl	800257a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b20      	cmp	r3, #32
 8002516:	d10e      	bne.n	8002536 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b20      	cmp	r3, #32
 8002524:	d107      	bne.n	8002536 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f06f 0220 	mvn.w	r2, #32
 800252e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8a5 	bl	8002680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a32      	ldr	r2, [pc, #200]	; (800266c <TIM_Base_SetConfig+0xdc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d007      	beq.n	80025b8 <TIM_Base_SetConfig+0x28>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ae:	d003      	beq.n	80025b8 <TIM_Base_SetConfig+0x28>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a2f      	ldr	r2, [pc, #188]	; (8002670 <TIM_Base_SetConfig+0xe0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d108      	bne.n	80025ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a27      	ldr	r2, [pc, #156]	; (800266c <TIM_Base_SetConfig+0xdc>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <TIM_Base_SetConfig+0x6a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d8:	d00f      	beq.n	80025fa <TIM_Base_SetConfig+0x6a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a24      	ldr	r2, [pc, #144]	; (8002670 <TIM_Base_SetConfig+0xe0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00b      	beq.n	80025fa <TIM_Base_SetConfig+0x6a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <TIM_Base_SetConfig+0xe4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <TIM_Base_SetConfig+0x6a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <TIM_Base_SetConfig+0xe8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d003      	beq.n	80025fa <TIM_Base_SetConfig+0x6a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a21      	ldr	r2, [pc, #132]	; (800267c <TIM_Base_SetConfig+0xec>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d108      	bne.n	800260c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <TIM_Base_SetConfig+0xdc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00b      	beq.n	8002650 <TIM_Base_SetConfig+0xc0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <TIM_Base_SetConfig+0xe4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <TIM_Base_SetConfig+0xc0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <TIM_Base_SetConfig+0xe8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d003      	beq.n	8002650 <TIM_Base_SetConfig+0xc0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <TIM_Base_SetConfig+0xec>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d103      	bne.n	8002658 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	615a      	str	r2, [r3, #20]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40000400 	.word	0x40000400
 8002674:	40014000 	.word	0x40014000
 8002678:	40014400 	.word	0x40014400
 800267c:	40014800 	.word	0x40014800

08002680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 0208 	add.w	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f103 0208 	add.w	r2, r3, #8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f103 0208 	add.w	r2, r3, #8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	601a      	str	r2, [r3, #0]
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d103      	bne.n	800277e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e00c      	b.n	8002798 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3308      	adds	r3, #8
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e002      	b.n	800278c <vListInsert+0x2e>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	429a      	cmp	r2, r3
 8002796:	d2f6      	bcs.n	8002786 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	601a      	str	r2, [r3, #0]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6892      	ldr	r2, [r2, #8]
 80027e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6852      	ldr	r2, [r2, #4]
 80027f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d103      	bne.n	8002804 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	1e5a      	subs	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800284a:	bf00      	nop
 800284c:	e7fe      	b.n	800284c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800284e:	f002 f9fb 	bl	8004c48 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	441a      	add	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	3b01      	subs	r3, #1
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	441a      	add	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	22ff      	movs	r2, #255	; 0xff
 8002892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	22ff      	movs	r2, #255	; 0xff
 800289a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d114      	bne.n	80028ce <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01a      	beq.n	80028e2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3310      	adds	r3, #16
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 f9d9 	bl	8003c68 <xTaskRemoveFromEventList>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <xQueueGenericReset+0xcc>)
 80028be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	e009      	b.n	80028e2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3310      	adds	r3, #16
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fef2 	bl	80026bc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3324      	adds	r3, #36	; 0x24
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff feed 	bl	80026bc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80028e2:	f002 f9e1 	bl	8004ca8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	e000ed04 	.word	0xe000ed04

080028f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	4613      	mov	r3, r2
 8002900:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <xQueueGenericCreate+0x2a>
        __asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	61bb      	str	r3, [r7, #24]
    }
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <xQueueGenericCreate+0x48>
 800292e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	429a      	cmp	r2, r3
 800293a:	d101      	bne.n	8002940 <xQueueGenericCreate+0x4c>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <xQueueGenericCreate+0x4e>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <xQueueGenericCreate+0x68>
        __asm volatile
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	617b      	str	r3, [r7, #20]
    }
 8002958:	bf00      	nop
 800295a:	e7fe      	b.n	800295a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002962:	d90a      	bls.n	800297a <xQueueGenericCreate+0x86>
        __asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	613b      	str	r3, [r7, #16]
    }
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	3350      	adds	r3, #80	; 0x50
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fa84 	bl	8004e8c <pvPortMalloc>
 8002984:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3350      	adds	r3, #80	; 0x50
 8002994:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002996:	79fa      	ldrb	r2, [r7, #7]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f805 	bl	80029b2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80029a8:	6a3b      	ldr	r3, [r7, #32]
    }
 80029aa:	4618      	mov	r0, r3
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e002      	b.n	80029d4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029e0:	2101      	movs	r1, #1
 80029e2:	69b8      	ldr	r0, [r7, #24]
 80029e4:	f7ff ff1e 	bl	8002824 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	613b      	str	r3, [r7, #16]
    }
 8002a1a:	bf00      	nop
 8002a1c:	e7fe      	b.n	8002a1c <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d90a      	bls.n	8002a3c <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	60fb      	str	r3, [r7, #12]
    }
 8002a38:	bf00      	nop
 8002a3a:	e7fe      	b.n	8002a3a <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	2100      	movs	r1, #0
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff57 	bl	80028f4 <xQueueGenericCreate>
 8002a46:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8002a54:	697b      	ldr	r3, [r7, #20]
    }
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08e      	sub	sp, #56	; 0x38
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericSend+0x32>
        __asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <xQueueGenericSend+0x40>
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <xQueueGenericSend+0x44>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <xQueueGenericSend+0x46>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <xQueueGenericSend+0x60>
        __asm volatile
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002abc:	bf00      	nop
 8002abe:	e7fe      	b.n	8002abe <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d103      	bne.n	8002ace <xQueueGenericSend+0x6e>
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <xQueueGenericSend+0x72>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <xQueueGenericSend+0x74>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericSend+0x8e>
        __asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	623b      	str	r3, [r7, #32]
    }
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aee:	f001 fa57 	bl	8003fa0 <xTaskGetSchedulerState>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <xQueueGenericSend+0x9e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <xQueueGenericSend+0xa2>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <xQueueGenericSend+0xa4>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericSend+0xbe>
        __asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	61fb      	str	r3, [r7, #28]
    }
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b1e:	f002 f893 	bl	8004c48 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <xQueueGenericSend+0xd4>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d129      	bne.n	8002b88 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b3a:	f000 fb3d 	bl	80031b8 <prvCopyDataToQueue>
 8002b3e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d010      	beq.n	8002b6a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	3324      	adds	r3, #36	; 0x24
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f88b 	bl	8003c68 <xTaskRemoveFromEventList>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002b58:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <xQueueGenericSend+0x1f8>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	e00a      	b.n	8002b80 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <xQueueGenericSend+0x1f8>)
 8002b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002b80:	f002 f892 	bl	8004ca8 <vPortExitCritical>
                return pdPASS;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e063      	b.n	8002c50 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b8e:	f002 f88b 	bl	8004ca8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e05c      	b.n	8002c50 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f8c3 	bl	8003d2c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002baa:	f002 f87d 	bl	8004ca8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bae:	f000 fe3d 	bl	800382c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bb2:	f002 f849 	bl	8004c48 <vPortEnterCritical>
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d103      	bne.n	8002bcc <xQueueGenericSend+0x16c>
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d103      	bne.n	8002be2 <xQueueGenericSend+0x182>
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be2:	f002 f861 	bl	8004ca8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002be6:	1d3a      	adds	r2, r7, #4
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f8b2 	bl	8003d58 <xTaskCheckForTimeOut>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d124      	bne.n	8002c44 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfc:	f000 fbd4 	bl	80033a8 <prvIsQueueFull>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d018      	beq.n	8002c38 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	3310      	adds	r3, #16
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 ffda 	bl	8003bc8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c16:	f000 fb5f 	bl	80032d8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002c1a:	f000 fe15 	bl	8003848 <xTaskResumeAll>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f47f af7c 	bne.w	8002b1e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <xQueueGenericSend+0x1f8>)
 8002c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	e772      	b.n	8002b1e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c3a:	f000 fb4d 	bl	80032d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c3e:	f000 fe03 	bl	8003848 <xTaskResumeAll>
 8002c42:	e76c      	b.n	8002b1e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c46:	f000 fb47 	bl	80032d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c4a:	f000 fdfd 	bl	8003848 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002c4e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3738      	adds	r7, #56	; 0x38
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	e000ed04 	.word	0xe000ed04

08002c5c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b090      	sub	sp, #64	; 0x40
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <xQueueGenericSendFromISR+0x3c>
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <xQueueGenericSendFromISR+0x40>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <xQueueGenericSendFromISR+0x42>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d103      	bne.n	8002cc6 <xQueueGenericSendFromISR+0x6a>
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <xQueueGenericSendFromISR+0x6e>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <xQueueGenericSendFromISR+0x70>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	623b      	str	r3, [r7, #32]
    }
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ce6:	f002 f891 	bl	8004e0c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002cea:	f3ef 8211 	mrs	r2, BASEPRI
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	61fa      	str	r2, [r7, #28]
 8002d00:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002d02:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d04:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <xQueueGenericSendFromISR+0xbc>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d13e      	bne.n	8002d96 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d2e:	f000 fa43 	bl	80031b8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002d32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d112      	bne.n	8002d62 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d025      	beq.n	8002d90 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	3324      	adds	r3, #36	; 0x24
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 ff8d 	bl	8003c68 <xTaskRemoveFromEventList>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01d      	beq.n	8002d90 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01a      	beq.n	8002d90 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e016      	b.n	8002d90 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002d62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d66:	2b7f      	cmp	r3, #127	; 0x7f
 8002d68:	d10a      	bne.n	8002d80 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	617b      	str	r3, [r7, #20]
    }
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d84:	3301      	adds	r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	b25a      	sxtb	r2, r3
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002d90:	2301      	movs	r3, #1
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002d94:	e001      	b.n	8002d9a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002da4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3740      	adds	r7, #64	; 0x40
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <xQueueReceive+0x30>
        __asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	623b      	str	r3, [r7, #32]
    }
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <xQueueReceive+0x3e>
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <xQueueReceive+0x42>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <xQueueReceive+0x44>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueReceive+0x5e>
        __asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	61fb      	str	r3, [r7, #28]
    }
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e0e:	f001 f8c7 	bl	8003fa0 <xTaskGetSchedulerState>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <xQueueReceive+0x6e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <xQueueReceive+0x72>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <xQueueReceive+0x74>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <xQueueReceive+0x8e>
        __asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	61bb      	str	r3, [r7, #24]
    }
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e3e:	f001 ff03 	bl	8004c48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01f      	beq.n	8002e8e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e52:	f000 fa1b 	bl	800328c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	1e5a      	subs	r2, r3, #1
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00f      	beq.n	8002e86 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	3310      	adds	r3, #16
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fefc 	bl	8003c68 <xTaskRemoveFromEventList>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <xQueueReceive+0x1bc>)
 8002e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002e86:	f001 ff0f 	bl	8004ca8 <vPortExitCritical>
                return pdPASS;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e069      	b.n	8002f62 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e94:	f001 ff08 	bl	8004ca8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e062      	b.n	8002f62 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ea2:	f107 0310 	add.w	r3, r7, #16
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 ff40 	bl	8003d2c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002eac:	2301      	movs	r3, #1
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002eb0:	f001 fefa 	bl	8004ca8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002eb4:	f000 fcba 	bl	800382c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002eb8:	f001 fec6 	bl	8004c48 <vPortEnterCritical>
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d103      	bne.n	8002ed2 <xQueueReceive+0x122>
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d103      	bne.n	8002ee8 <xQueueReceive+0x138>
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee8:	f001 fede 	bl	8004ca8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eec:	1d3a      	adds	r2, r7, #4
 8002eee:	f107 0310 	add.w	r3, r7, #16
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 ff2f 	bl	8003d58 <xTaskCheckForTimeOut>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d123      	bne.n	8002f48 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f02:	f000 fa3b 	bl	800337c <prvIsQueueEmpty>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	3324      	adds	r3, #36	; 0x24
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fe57 	bl	8003bc8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f1c:	f000 f9dc 	bl	80032d8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002f20:	f000 fc92 	bl	8003848 <xTaskResumeAll>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d189      	bne.n	8002e3e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <xQueueReceive+0x1bc>)
 8002f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	e780      	b.n	8002e3e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3e:	f000 f9cb 	bl	80032d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f42:	f000 fc81 	bl	8003848 <xTaskResumeAll>
 8002f46:	e77a      	b.n	8002e3e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f4a:	f000 f9c5 	bl	80032d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f4e:	f000 fc7b 	bl	8003848 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f54:	f000 fa12 	bl	800337c <prvIsQueueEmpty>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f43f af6f 	beq.w	8002e3e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002f60:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3730      	adds	r7, #48	; 0x30
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	e000ed04 	.word	0xe000ed04

08002f70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08e      	sub	sp, #56	; 0x38
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	623b      	str	r3, [r7, #32]
    }
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	61fb      	str	r3, [r7, #28]
    }
 8002fbc:	bf00      	nop
 8002fbe:	e7fe      	b.n	8002fbe <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fc0:	f000 ffee 	bl	8003fa0 <xTaskGetSchedulerState>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <xQueueSemaphoreTake+0x60>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <xQueueSemaphoreTake+0x64>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <xQueueSemaphoreTake+0x66>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	61bb      	str	r3, [r7, #24]
    }
 8002fec:	bf00      	nop
 8002fee:	e7fe      	b.n	8002fee <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ff0:	f001 fe2a 	bl	8004c48 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d024      	beq.n	800304a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	1e5a      	subs	r2, r3, #1
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003010:	f001 f962 	bl	80042d8 <pvTaskIncrementMutexHeldCount>
 8003014:	4602      	mov	r2, r0
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00f      	beq.n	8003042 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	3310      	adds	r3, #16
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fe1e 	bl	8003c68 <xTaskRemoveFromEventList>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003032:	4b54      	ldr	r3, [pc, #336]	; (8003184 <xQueueSemaphoreTake+0x214>)
 8003034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003042:	f001 fe31 	bl	8004ca8 <vPortExitCritical>
                return pdPASS;
 8003046:	2301      	movs	r3, #1
 8003048:	e097      	b.n	800317a <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	617b      	str	r3, [r7, #20]
    }
 8003068:	bf00      	nop
 800306a:	e7fe      	b.n	800306a <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800306c:	f001 fe1c 	bl	8004ca8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003070:	2300      	movs	r3, #0
 8003072:	e082      	b.n	800317a <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800307a:	f107 030c 	add.w	r3, r7, #12
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fe54 	bl	8003d2c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003084:	2301      	movs	r3, #1
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003088:	f001 fe0e 	bl	8004ca8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800308c:	f000 fbce 	bl	800382c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003090:	f001 fdda 	bl	8004c48 <vPortEnterCritical>
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800309a:	b25b      	sxtb	r3, r3
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d103      	bne.n	80030aa <xQueueSemaphoreTake+0x13a>
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d103      	bne.n	80030c0 <xQueueSemaphoreTake+0x150>
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c0:	f001 fdf2 	bl	8004ca8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030c4:	463a      	mov	r2, r7
 80030c6:	f107 030c 	add.w	r3, r7, #12
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fe43 	bl	8003d58 <xTaskCheckForTimeOut>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d132      	bne.n	800313e <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030da:	f000 f94f 	bl	800337c <prvIsQueueEmpty>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d026      	beq.n	8003132 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80030ec:	f001 fdac 	bl	8004c48 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 ff71 	bl	8003fdc <xTaskPriorityInherit>
 80030fa:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80030fc:	f001 fdd4 	bl	8004ca8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	3324      	adds	r3, #36	; 0x24
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fd5d 	bl	8003bc8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800310e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003110:	f000 f8e2 	bl	80032d8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003114:	f000 fb98 	bl	8003848 <xTaskResumeAll>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	f47f af68 	bne.w	8002ff0 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003120:	4b18      	ldr	r3, [pc, #96]	; (8003184 <xQueueSemaphoreTake+0x214>)
 8003122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	e75e      	b.n	8002ff0 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003134:	f000 f8d0 	bl	80032d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003138:	f000 fb86 	bl	8003848 <xTaskResumeAll>
 800313c:	e758      	b.n	8002ff0 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800313e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003140:	f000 f8ca 	bl	80032d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003144:	f000 fb80 	bl	8003848 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800314a:	f000 f917 	bl	800337c <prvIsQueueEmpty>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	f43f af4d 	beq.w	8002ff0 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00d      	beq.n	8003178 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 800315c:	f001 fd74 	bl	8004c48 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003162:	f000 f811 	bl	8003188 <prvGetDisinheritPriorityAfterTimeout>
 8003166:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800316e:	4618      	mov	r0, r3
 8003170:	f001 f824 	bl	80041bc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003174:	f001 fd98 	bl	8004ca8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003178:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800317a:	4618      	mov	r0, r3
 800317c:	3738      	adds	r7, #56	; 0x38
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d006      	beq.n	80031a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e001      	b.n	80031aa <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80031aa:	68fb      	ldr	r3, [r7, #12]
    }
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10d      	bne.n	80031f2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d14d      	bne.n	800327a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 ff70 	bl	80040c8 <xTaskPriorityDisinherit>
 80031e8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	e043      	b.n	800327a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d119      	bne.n	800322c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6858      	ldr	r0, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	461a      	mov	r2, r3
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	f002 f864 	bl	80052d0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	d32b      	bcc.n	800327a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	e026      	b.n	800327a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68d8      	ldr	r0, [r3, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	461a      	mov	r2, r3
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	f002 f84a 	bl	80052d0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	425b      	negs	r3, r3
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d207      	bcs.n	8003268 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	425b      	negs	r3, r3
 8003262:	441a      	add	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d105      	bne.n	800327a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3b01      	subs	r3, #1
 8003278:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003282:	697b      	ldr	r3, [r7, #20]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	441a      	add	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d303      	bcc.n	80032c0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68d9      	ldr	r1, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	461a      	mov	r2, r3
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	f002 f800 	bl	80052d0 <memcpy>
    }
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80032e0:	f001 fcb2 	bl	8004c48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ec:	e011      	b.n	8003312 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3324      	adds	r3, #36	; 0x24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fcb4 	bl	8003c68 <xTaskRemoveFromEventList>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003306:	f000 fd8d 	bl	8003e24 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	2b00      	cmp	r3, #0
 8003318:	dce9      	bgt.n	80032ee <prvUnlockQueue+0x16>
 800331a:	e000      	b.n	800331e <prvUnlockQueue+0x46>
                        break;
 800331c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	22ff      	movs	r2, #255	; 0xff
 8003322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003326:	f001 fcbf 	bl	8004ca8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800332a:	f001 fc8d 	bl	8004c48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003334:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003336:	e011      	b.n	800335c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3310      	adds	r3, #16
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fc8f 	bl	8003c68 <xTaskRemoveFromEventList>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003350:	f000 fd68 	bl	8003e24 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003354:	7bbb      	ldrb	r3, [r7, #14]
 8003356:	3b01      	subs	r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800335c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003360:	2b00      	cmp	r3, #0
 8003362:	dce9      	bgt.n	8003338 <prvUnlockQueue+0x60>
 8003364:	e000      	b.n	8003368 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003366:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	22ff      	movs	r2, #255	; 0xff
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003370:	f001 fc9a 	bl	8004ca8 <vPortExitCritical>
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003384:	f001 fc60 	bl	8004c48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003390:	2301      	movs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e001      	b.n	800339a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800339a:	f001 fc85 	bl	8004ca8 <vPortExitCritical>

    return xReturn;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80033b0:	f001 fc4a 	bl	8004c48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	429a      	cmp	r2, r3
 80033be:	d102      	bne.n	80033c6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80033c0:	2301      	movs	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e001      	b.n	80033ca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80033ca:	f001 fc6d 	bl	8004ca8 <vPortExitCritical>

    return xReturn;
 80033ce:	68fb      	ldr	r3, [r7, #12]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e014      	b.n	8003412 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033e8:	4a0f      	ldr	r2, [pc, #60]	; (8003428 <vQueueAddToRegistry+0x50>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <vQueueAddToRegistry+0x50>)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <vQueueAddToRegistry+0x50>)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800340a:	e006      	b.n	800341a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3301      	adds	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b07      	cmp	r3, #7
 8003416:	d9e7      	bls.n	80033e8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	200000e8 	.word	0x200000e8

0800342c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800343c:	f001 fc04 	bl	8004c48 <vPortEnterCritical>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003446:	b25b      	sxtb	r3, r3
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d103      	bne.n	8003456 <vQueueWaitForMessageRestricted+0x2a>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800345c:	b25b      	sxtb	r3, r3
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d103      	bne.n	800346c <vQueueWaitForMessageRestricted+0x40>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800346c:	f001 fc1c 	bl	8004ca8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3324      	adds	r3, #36	; 0x24
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fbc5 	bl	8003c10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f7ff ff26 	bl	80032d8 <prvUnlockQueue>
    }
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003494:	b580      	push	{r7, lr}
 8003496:	b08c      	sub	sp, #48	; 0x30
 8003498:	af04      	add	r7, sp, #16
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fcef 	bl	8004e8c <pvPortMalloc>
 80034ae:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00e      	beq.n	80034d4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034b6:	2058      	movs	r0, #88	; 0x58
 80034b8:	f001 fce8 	bl	8004e8c <pvPortMalloc>
 80034bc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
 80034ca:	e005      	b.n	80034d8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80034cc:	6978      	ldr	r0, [r7, #20]
 80034ce:	f001 fdbd 	bl	800504c <vPortFree>
 80034d2:	e001      	b.n	80034d8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d013      	beq.n	8003506 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	2300      	movs	r3, #0
 80034e2:	9303      	str	r3, [sp, #12]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f80e 	bl	8003516 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80034fa:	69f8      	ldr	r0, [r7, #28]
 80034fc:	f000 f8a2 	bl	8003644 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003500:	2301      	movs	r3, #1
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	e002      	b.n	800350c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800350c:	69bb      	ldr	r3, [r7, #24]
    }
 800350e:	4618      	mov	r0, r3
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b088      	sub	sp, #32
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	461a      	mov	r2, r3
 800352e:	21a5      	movs	r1, #165	; 0xa5
 8003530:	f001 fedc 	bl	80052ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800353e:	3b01      	subs	r3, #1
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f023 0307 	bic.w	r3, r3, #7
 800354c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <prvInitialiseNewTask+0x58>
        __asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	617b      	str	r3, [r7, #20]
    }
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01f      	beq.n	80035b4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	e012      	b.n	80035a0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	7819      	ldrb	r1, [r3, #0]
 8003582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	3334      	adds	r3, #52	; 0x34
 800358a:	460a      	mov	r2, r1
 800358c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d9e9      	bls.n	800357a <prvInitialiseNewTask+0x64>
 80035a6:	e000      	b.n	80035aa <prvInitialiseNewTask+0x94>
            {
                break;
 80035a8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035b2:	e003      	b.n	80035bc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d901      	bls.n	80035c6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035c2:	2306      	movs	r3, #6
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2200      	movs	r2, #0
 80035d6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	3304      	adds	r3, #4
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff f88d 	bl	80026fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	3318      	adds	r3, #24
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f888 	bl	80026fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	f1c3 0207 	rsb	r2, r3, #7
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	3350      	adds	r3, #80	; 0x50
 8003606:	2204      	movs	r2, #4
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f001 fe6e 	bl	80052ec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	3354      	adds	r3, #84	; 0x54
 8003614:	2201      	movs	r2, #1
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fe67 	bl	80052ec <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	68f9      	ldr	r1, [r7, #12]
 8003622:	69b8      	ldr	r0, [r7, #24]
 8003624:	f001 f9e4 	bl	80049f0 <pxPortInitialiseStack>
 8003628:	4602      	mov	r2, r0
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003638:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800363a:	bf00      	nop
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800364c:	f001 fafc 	bl	8004c48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <prvAddNewTaskToReadyList+0xc0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <prvAddNewTaskToReadyList+0xc0>)
 8003658:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800365a:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <prvAddNewTaskToReadyList+0xc4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <prvAddNewTaskToReadyList+0xc4>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003668:	4b26      	ldr	r3, [pc, #152]	; (8003704 <prvAddNewTaskToReadyList+0xc0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d110      	bne.n	8003692 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003670:	f000 fbfc 	bl	8003e6c <prvInitialiseTaskLists>
 8003674:	e00d      	b.n	8003692 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <prvAddNewTaskToReadyList+0xc8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800367e:	4b22      	ldr	r3, [pc, #136]	; (8003708 <prvAddNewTaskToReadyList+0xc4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	429a      	cmp	r2, r3
 800368a:	d802      	bhi.n	8003692 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800368c:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <prvAddNewTaskToReadyList+0xc4>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <prvAddNewTaskToReadyList+0xcc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <prvAddNewTaskToReadyList+0xcc>)
 800369a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800369c:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <prvAddNewTaskToReadyList+0xcc>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2201      	movs	r2, #1
 80036aa:	409a      	lsls	r2, r3
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <prvAddNewTaskToReadyList+0xd0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	4a18      	ldr	r2, [pc, #96]	; (8003714 <prvAddNewTaskToReadyList+0xd0>)
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <prvAddNewTaskToReadyList+0xd4>)
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7ff f822 	bl	8002716 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80036d2:	f001 fae9 	bl	8004ca8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <prvAddNewTaskToReadyList+0xc8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00e      	beq.n	80036fc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <prvAddNewTaskToReadyList+0xc4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d207      	bcs.n	80036fc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <prvAddNewTaskToReadyList+0xd8>)
 80036ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000228 	.word	0x20000228
 8003708:	20000128 	.word	0x20000128
 800370c:	20000234 	.word	0x20000234
 8003710:	20000244 	.word	0x20000244
 8003714:	20000230 	.word	0x20000230
 8003718:	2000012c 	.word	0x2000012c
 800371c:	e000ed04 	.word	0xe000ed04

08003720 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d017      	beq.n	8003762 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <vTaskDelay+0x60>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <vTaskDelay+0x30>
        __asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	60bb      	str	r3, [r7, #8]
    }
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003750:	f000 f86c 	bl	800382c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003754:	2100      	movs	r1, #0
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fdd2 	bl	8004300 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800375c:	f000 f874 	bl	8003848 <xTaskResumeAll>
 8003760:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <vTaskDelay+0x64>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000250 	.word	0x20000250
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <vTaskStartScheduler+0x88>)
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2300      	movs	r3, #0
 8003798:	2287      	movs	r2, #135	; 0x87
 800379a:	491e      	ldr	r1, [pc, #120]	; (8003814 <vTaskStartScheduler+0x8c>)
 800379c:	481e      	ldr	r0, [pc, #120]	; (8003818 <vTaskStartScheduler+0x90>)
 800379e:	f7ff fe79 	bl	8003494 <xTaskCreate>
 80037a2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d102      	bne.n	80037b0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80037aa:	f000 fe0f 	bl	80043cc <xTimerCreateTimerTask>
 80037ae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d116      	bne.n	80037e4 <vTaskStartScheduler+0x5c>
        __asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	60bb      	str	r3, [r7, #8]
    }
 80037c8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80037ca:	4b14      	ldr	r3, [pc, #80]	; (800381c <vTaskStartScheduler+0x94>)
 80037cc:	f04f 32ff 	mov.w	r2, #4294967295
 80037d0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <vTaskStartScheduler+0x98>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <vTaskStartScheduler+0x9c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80037de:	f001 f991 	bl	8004b04 <xPortStartScheduler>
 80037e2:	e00e      	b.n	8003802 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d10a      	bne.n	8003802 <vTaskStartScheduler+0x7a>
        __asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	607b      	str	r3, [r7, #4]
    }
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <vTaskStartScheduler+0xa0>)
 8003804:	681b      	ldr	r3, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	2000024c 	.word	0x2000024c
 8003814:	08005d98 	.word	0x08005d98
 8003818:	08003e3d 	.word	0x08003e3d
 800381c:	20000248 	.word	0x20000248
 8003820:	20000234 	.word	0x20000234
 8003824:	2000022c 	.word	0x2000022c
 8003828:	2000000c 	.word	0x2000000c

0800382c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <vTaskSuspendAll+0x18>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	4a03      	ldr	r2, [pc, #12]	; (8003844 <vTaskSuspendAll+0x18>)
 8003838:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800383a:	bf00      	nop
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	20000250 	.word	0x20000250

08003848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003856:	4b41      	ldr	r3, [pc, #260]	; (800395c <xTaskResumeAll+0x114>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <xTaskResumeAll+0x2c>
        __asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	603b      	str	r3, [r7, #0]
    }
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003874:	f001 f9e8 	bl	8004c48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003878:	4b38      	ldr	r3, [pc, #224]	; (800395c <xTaskResumeAll+0x114>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3b01      	subs	r3, #1
 800387e:	4a37      	ldr	r2, [pc, #220]	; (800395c <xTaskResumeAll+0x114>)
 8003880:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003882:	4b36      	ldr	r3, [pc, #216]	; (800395c <xTaskResumeAll+0x114>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d161      	bne.n	800394e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800388a:	4b35      	ldr	r3, [pc, #212]	; (8003960 <xTaskResumeAll+0x118>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d05d      	beq.n	800394e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003892:	e02e      	b.n	80038f2 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003894:	4b33      	ldr	r3, [pc, #204]	; (8003964 <xTaskResumeAll+0x11c>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3318      	adds	r3, #24
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe ff95 	bl	80027d0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe ff90 	bl	80027d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	2201      	movs	r2, #1
 80038b6:	409a      	lsls	r2, r3
 80038b8:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <xTaskResumeAll+0x120>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4313      	orrs	r3, r2
 80038be:	4a2a      	ldr	r2, [pc, #168]	; (8003968 <xTaskResumeAll+0x120>)
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4a27      	ldr	r2, [pc, #156]	; (800396c <xTaskResumeAll+0x124>)
 80038d0:	441a      	add	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f7fe ff1c 	bl	8002716 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <xTaskResumeAll+0x128>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80038ec:	4b21      	ldr	r3, [pc, #132]	; (8003974 <xTaskResumeAll+0x12c>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038f2:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <xTaskResumeAll+0x11c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1cc      	bne.n	8003894 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003900:	f000 fb32 	bl	8003f68 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <xTaskResumeAll+0x130>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d010      	beq.n	8003932 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003910:	f000 f846 	bl	80039a0 <xTaskIncrementTick>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <xTaskResumeAll+0x12c>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f1      	bne.n	8003910 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800392c:	4b12      	ldr	r3, [pc, #72]	; (8003978 <xTaskResumeAll+0x130>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <xTaskResumeAll+0x12c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800393a:	2301      	movs	r3, #1
 800393c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <xTaskResumeAll+0x134>)
 8003940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800394e:	f001 f9ab 	bl	8004ca8 <vPortExitCritical>

    return xAlreadyYielded;
 8003952:	68bb      	ldr	r3, [r7, #8]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000250 	.word	0x20000250
 8003960:	20000228 	.word	0x20000228
 8003964:	200001e8 	.word	0x200001e8
 8003968:	20000230 	.word	0x20000230
 800396c:	2000012c 	.word	0x2000012c
 8003970:	20000128 	.word	0x20000128
 8003974:	2000023c 	.word	0x2000023c
 8003978:	20000238 	.word	0x20000238
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <xTaskGetTickCount+0x1c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800398c:	687b      	ldr	r3, [r7, #4]
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	2000022c 	.word	0x2000022c

080039a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039aa:	4b4e      	ldr	r3, [pc, #312]	; (8003ae4 <xTaskIncrementTick+0x144>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 808e 	bne.w	8003ad0 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039b4:	4b4c      	ldr	r3, [pc, #304]	; (8003ae8 <xTaskIncrementTick+0x148>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80039bc:	4a4a      	ldr	r2, [pc, #296]	; (8003ae8 <xTaskIncrementTick+0x148>)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d120      	bne.n	8003a0a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80039c8:	4b48      	ldr	r3, [pc, #288]	; (8003aec <xTaskIncrementTick+0x14c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <xTaskIncrementTick+0x48>
        __asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	603b      	str	r3, [r7, #0]
    }
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <xTaskIncrementTick+0x46>
 80039e8:	4b40      	ldr	r3, [pc, #256]	; (8003aec <xTaskIncrementTick+0x14c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	4b40      	ldr	r3, [pc, #256]	; (8003af0 <xTaskIncrementTick+0x150>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a3e      	ldr	r2, [pc, #248]	; (8003aec <xTaskIncrementTick+0x14c>)
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4a3e      	ldr	r2, [pc, #248]	; (8003af0 <xTaskIncrementTick+0x150>)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <xTaskIncrementTick+0x154>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	4a3c      	ldr	r2, [pc, #240]	; (8003af4 <xTaskIncrementTick+0x154>)
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	f000 faaf 	bl	8003f68 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <xTaskIncrementTick+0x158>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d348      	bcc.n	8003aa6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a14:	4b35      	ldr	r3, [pc, #212]	; (8003aec <xTaskIncrementTick+0x14c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1e:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <xTaskIncrementTick+0x158>)
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	601a      	str	r2, [r3, #0]
                    break;
 8003a26:	e03e      	b.n	8003aa6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a28:	4b30      	ldr	r3, [pc, #192]	; (8003aec <xTaskIncrementTick+0x14c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d203      	bcs.n	8003a48 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003a40:	4a2d      	ldr	r2, [pc, #180]	; (8003af8 <xTaskIncrementTick+0x158>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a46:	e02e      	b.n	8003aa6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe febf 	bl	80027d0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe feb6 	bl	80027d0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	2201      	movs	r2, #1
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	4b23      	ldr	r3, [pc, #140]	; (8003afc <xTaskIncrementTick+0x15c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	4a22      	ldr	r2, [pc, #136]	; (8003afc <xTaskIncrementTick+0x15c>)
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <xTaskIncrementTick+0x160>)
 8003a84:	441a      	add	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	f7fe fe42 	bl	8002716 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a96:	4b1b      	ldr	r3, [pc, #108]	; (8003b04 <xTaskIncrementTick+0x164>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3b9      	bcc.n	8003a14 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa4:	e7b6      	b.n	8003a14 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <xTaskIncrementTick+0x164>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	4914      	ldr	r1, [pc, #80]	; (8003b00 <xTaskIncrementTick+0x160>)
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d901      	bls.n	8003ac2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <xTaskIncrementTick+0x168>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003aca:	2301      	movs	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e004      	b.n	8003ada <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <xTaskIncrementTick+0x16c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <xTaskIncrementTick+0x16c>)
 8003ad8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003ada:	697b      	ldr	r3, [r7, #20]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000250 	.word	0x20000250
 8003ae8:	2000022c 	.word	0x2000022c
 8003aec:	200001e0 	.word	0x200001e0
 8003af0:	200001e4 	.word	0x200001e4
 8003af4:	20000240 	.word	0x20000240
 8003af8:	20000248 	.word	0x20000248
 8003afc:	20000230 	.word	0x20000230
 8003b00:	2000012c 	.word	0x2000012c
 8003b04:	20000128 	.word	0x20000128
 8003b08:	2000023c 	.word	0x2000023c
 8003b0c:	20000238 	.word	0x20000238

08003b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b16:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <vTaskSwitchContext+0xa4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003b1e:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <vTaskSwitchContext+0xa8>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003b24:	e03f      	b.n	8003ba6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003b26:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <vTaskSwitchContext+0xa8>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2c:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <vTaskSwitchContext+0xac>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
 8003b3c:	f1c3 031f 	rsb	r3, r3, #31
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	491f      	ldr	r1, [pc, #124]	; (8003bc0 <vTaskSwitchContext+0xb0>)
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	607b      	str	r3, [r7, #4]
    }
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <vTaskSwitchContext+0x5a>
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <vTaskSwitchContext+0xb0>)
 8003b78:	4413      	add	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d104      	bne.n	8003b9c <vTaskSwitchContext+0x8c>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <vTaskSwitchContext+0xb4>)
 8003ba4:	6013      	str	r3, [r2, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000250 	.word	0x20000250
 8003bb8:	2000023c 	.word	0x2000023c
 8003bbc:	20000230 	.word	0x20000230
 8003bc0:	2000012c 	.word	0x2000012c
 8003bc4:	20000128 	.word	0x20000128

08003bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	60fb      	str	r3, [r7, #12]
    }
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <vTaskPlaceOnEventList+0x44>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fe fdb1 	bl	800275e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	6838      	ldr	r0, [r7, #0]
 8003c00:	f000 fb7e 	bl	8004300 <prvAddCurrentTaskToDelayedList>
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000128 	.word	0x20000128

08003c10 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	617b      	str	r3, [r7, #20]
    }
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	4619      	mov	r1, r3
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7fe fd68 	bl	8002716 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	68b8      	ldr	r0, [r7, #8]
 8003c56:	f000 fb53 	bl	8004300 <prvAddCurrentTaskToDelayedList>
    }
 8003c5a:	bf00      	nop
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000128 	.word	0x20000128

08003c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	60fb      	str	r3, [r7, #12]
    }
 8003c90:	bf00      	nop
 8003c92:	e7fe      	b.n	8003c92 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	3318      	adds	r3, #24
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe fd99 	bl	80027d0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <xTaskRemoveFromEventList+0xac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11c      	bne.n	8003ce0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fd90 	bl	80027d0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <xTaskRemoveFromEventList+0xb0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <xTaskRemoveFromEventList+0xb0>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <xTaskRemoveFromEventList+0xb4>)
 8003cd0:	441a      	add	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fe fd1c 	bl	8002716 <vListInsertEnd>
 8003cde:	e005      	b.n	8003cec <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	3318      	adds	r3, #24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	480e      	ldr	r0, [pc, #56]	; (8003d20 <xTaskRemoveFromEventList+0xb8>)
 8003ce8:	f7fe fd15 	bl	8002716 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <xTaskRemoveFromEventList+0xbc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d905      	bls.n	8003d06 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <xTaskRemoveFromEventList+0xc0>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e001      	b.n	8003d0a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003d0a:	697b      	ldr	r3, [r7, #20]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000250 	.word	0x20000250
 8003d18:	20000230 	.word	0x20000230
 8003d1c:	2000012c 	.word	0x2000012c
 8003d20:	200001e8 	.word	0x200001e8
 8003d24:	20000128 	.word	0x20000128
 8003d28:	2000023c 	.word	0x2000023c

08003d2c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <vTaskInternalSetTimeOutState+0x24>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <vTaskInternalSetTimeOutState+0x28>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	605a      	str	r2, [r3, #4]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	20000240 	.word	0x20000240
 8003d54:	2000022c 	.word	0x2000022c

08003d58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	613b      	str	r3, [r7, #16]
    }
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	60fb      	str	r3, [r7, #12]
    }
 8003d96:	bf00      	nop
 8003d98:	e7fe      	b.n	8003d98 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003d9a:	f000 ff55 	bl	8004c48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d9e:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <xTaskCheckForTimeOut+0xc4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d102      	bne.n	8003dbe <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	e026      	b.n	8003e0c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <xTaskCheckForTimeOut+0xc8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d00a      	beq.n	8003de0 <xTaskCheckForTimeOut+0x88>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d305      	bcc.n	8003de0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e015      	b.n	8003e0c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d20b      	bcs.n	8003e02 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	1ad2      	subs	r2, r2, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ff98 	bl	8003d2c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	e004      	b.n	8003e0c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e0c:	f000 ff4c 	bl	8004ca8 <vPortExitCritical>

    return xReturn;
 8003e10:	69fb      	ldr	r3, [r7, #28]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	2000022c 	.word	0x2000022c
 8003e20:	20000240 	.word	0x20000240

08003e24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <vTaskMissedYield+0x14>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	2000023c 	.word	0x2000023c

08003e3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e44:	f000 f852 	bl	8003eec <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <prvIdleTask+0x28>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d9f9      	bls.n	8003e44 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <prvIdleTask+0x2c>)
 8003e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003e60:	e7f0      	b.n	8003e44 <prvIdleTask+0x8>
 8003e62:	bf00      	nop
 8003e64:	2000012c 	.word	0x2000012c
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e72:	2300      	movs	r3, #0
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	e00c      	b.n	8003e92 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <prvInitialiseTaskLists+0x60>)
 8003e84:	4413      	add	r3, r2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe fc18 	bl	80026bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	607b      	str	r3, [r7, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	d9ef      	bls.n	8003e78 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e98:	480d      	ldr	r0, [pc, #52]	; (8003ed0 <prvInitialiseTaskLists+0x64>)
 8003e9a:	f7fe fc0f 	bl	80026bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e9e:	480d      	ldr	r0, [pc, #52]	; (8003ed4 <prvInitialiseTaskLists+0x68>)
 8003ea0:	f7fe fc0c 	bl	80026bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ea4:	480c      	ldr	r0, [pc, #48]	; (8003ed8 <prvInitialiseTaskLists+0x6c>)
 8003ea6:	f7fe fc09 	bl	80026bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003eaa:	480c      	ldr	r0, [pc, #48]	; (8003edc <prvInitialiseTaskLists+0x70>)
 8003eac:	f7fe fc06 	bl	80026bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003eb0:	480b      	ldr	r0, [pc, #44]	; (8003ee0 <prvInitialiseTaskLists+0x74>)
 8003eb2:	f7fe fc03 	bl	80026bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <prvInitialiseTaskLists+0x78>)
 8003eb8:	4a05      	ldr	r2, [pc, #20]	; (8003ed0 <prvInitialiseTaskLists+0x64>)
 8003eba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <prvInitialiseTaskLists+0x7c>)
 8003ebe:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <prvInitialiseTaskLists+0x68>)
 8003ec0:	601a      	str	r2, [r3, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000012c 	.word	0x2000012c
 8003ed0:	200001b8 	.word	0x200001b8
 8003ed4:	200001cc 	.word	0x200001cc
 8003ed8:	200001e8 	.word	0x200001e8
 8003edc:	200001fc 	.word	0x200001fc
 8003ee0:	20000214 	.word	0x20000214
 8003ee4:	200001e0 	.word	0x200001e0
 8003ee8:	200001e4 	.word	0x200001e4

08003eec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ef2:	e019      	b.n	8003f28 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003ef4:	f000 fea8 	bl	8004c48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <prvCheckTasksWaitingTermination+0x50>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe fc63 	bl	80027d0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <prvCheckTasksWaitingTermination+0x54>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <prvCheckTasksWaitingTermination+0x54>)
 8003f12:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <prvCheckTasksWaitingTermination+0x58>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <prvCheckTasksWaitingTermination+0x58>)
 8003f1c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003f1e:	f000 fec3 	bl	8004ca8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f810 	bl	8003f48 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <prvCheckTasksWaitingTermination+0x58>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e1      	bne.n	8003ef4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	200001fc 	.word	0x200001fc
 8003f40:	20000228 	.word	0x20000228
 8003f44:	20000210 	.word	0x20000210

08003f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f879 	bl	800504c <vPortFree>
                vPortFree( pxTCB );
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f001 f876 	bl	800504c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <prvResetNextTaskUnblockTime+0x30>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d104      	bne.n	8003f80 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <prvResetNextTaskUnblockTime+0x34>)
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003f7e:	e005      	b.n	8003f8c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <prvResetNextTaskUnblockTime+0x30>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <prvResetNextTaskUnblockTime+0x34>)
 8003f8a:	6013      	str	r3, [r2, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	200001e0 	.word	0x200001e0
 8003f9c:	20000248 	.word	0x20000248

08003fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <xTaskGetSchedulerState+0x34>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	e008      	b.n	8003fc6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <xTaskGetSchedulerState+0x38>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	e001      	b.n	8003fc6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003fc6:	687b      	ldr	r3, [r7, #4]
    }
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	20000234 	.word	0x20000234
 8003fd8:	20000250 	.word	0x20000250

08003fdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d05e      	beq.n	80040b0 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff6:	4b31      	ldr	r3, [pc, #196]	; (80040bc <xTaskPriorityInherit+0xe0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d24e      	bcs.n	800409e <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	db06      	blt.n	8004016 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004008:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <xTaskPriorityInherit+0xe0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	f1c3 0207 	rsb	r2, r3, #7
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6959      	ldr	r1, [r3, #20]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <xTaskPriorityInherit+0xe4>)
 8004028:	4413      	add	r3, r2
 800402a:	4299      	cmp	r1, r3
 800402c:	d12f      	bne.n	800408e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3304      	adds	r3, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fbcc 	bl	80027d0 <uxListRemove>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	2201      	movs	r2, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43da      	mvns	r2, r3
 800404a:	4b1e      	ldr	r3, [pc, #120]	; (80040c4 <xTaskPriorityInherit+0xe8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4013      	ands	r3, r2
 8004050:	4a1c      	ldr	r2, [pc, #112]	; (80040c4 <xTaskPriorityInherit+0xe8>)
 8004052:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <xTaskPriorityInherit+0xe0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	2201      	movs	r2, #1
 8004064:	409a      	lsls	r2, r3
 8004066:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <xTaskPriorityInherit+0xe8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <xTaskPriorityInherit+0xe8>)
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <xTaskPriorityInherit+0xe4>)
 800407e:	441a      	add	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7fe fb45 	bl	8002716 <vListInsertEnd>
 800408c:	e004      	b.n	8004098 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <xTaskPriorityInherit+0xe0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004098:	2301      	movs	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e008      	b.n	80040b0 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <xTaskPriorityInherit+0xe0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d201      	bcs.n	80040b0 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80040b0:	68fb      	ldr	r3, [r7, #12]
    }
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000128 	.word	0x20000128
 80040c0:	2000012c 	.word	0x2000012c
 80040c4:	20000230 	.word	0x20000230

080040c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d063      	beq.n	80041a6 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80040de:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <xTaskPriorityDisinherit+0xe8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d00a      	beq.n	80040fe <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	60fb      	str	r3, [r7, #12]
    }
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60bb      	str	r3, [r7, #8]
    }
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	1e5a      	subs	r2, r3, #1
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412e:	429a      	cmp	r2, r3
 8004130:	d039      	beq.n	80041a6 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d135      	bne.n	80041a6 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3304      	adds	r3, #4
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe fb46 	bl	80027d0 <uxListRemove>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	2201      	movs	r2, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43da      	mvns	r2, r3
 8004156:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <xTaskPriorityDisinherit+0xec>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4013      	ands	r3, r2
 800415c:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <xTaskPriorityDisinherit+0xec>)
 800415e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	f1c3 0207 	rsb	r2, r3, #7
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	2201      	movs	r2, #1
 800417a:	409a      	lsls	r2, r3
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <xTaskPriorityDisinherit+0xec>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4313      	orrs	r3, r2
 8004182:	4a0c      	ldr	r2, [pc, #48]	; (80041b4 <xTaskPriorityDisinherit+0xec>)
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <xTaskPriorityDisinherit+0xf0>)
 8004194:	441a      	add	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3304      	adds	r3, #4
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f7fe faba 	bl	8002716 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80041a6:	697b      	ldr	r3, [r7, #20]
    }
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000128 	.word	0x20000128
 80041b4:	20000230 	.word	0x20000230
 80041b8:	2000012c 	.word	0x2000012c

080041bc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d077      	beq.n	80042c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
    }
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d902      	bls.n	8004202 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e002      	b.n	8004208 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004206:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	429a      	cmp	r2, r3
 8004210:	d058      	beq.n	80042c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	d153      	bne.n	80042c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800421c:	4b2b      	ldr	r3, [pc, #172]	; (80042cc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	429a      	cmp	r2, r3
 8004224:	d10a      	bne.n	800423c <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60bb      	str	r3, [r7, #8]
    }
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	db04      	blt.n	800425a <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f1c3 0207 	rsb	r2, r3, #7
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	6959      	ldr	r1, [r3, #20]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800426a:	4413      	add	r3, r2
 800426c:	4299      	cmp	r1, r3
 800426e:	d129      	bne.n	80042c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	3304      	adds	r3, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe faab 	bl	80027d0 <uxListRemove>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	2201      	movs	r2, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43da      	mvns	r2, r3
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4013      	ands	r3, r2
 8004292:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004294:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	2201      	movs	r2, #1
 800429c:	409a      	lsls	r2, r3
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4a06      	ldr	r2, [pc, #24]	; (80042d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80042b6:	441a      	add	r2, r3
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7fe fa29 	bl	8002716 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80042c4:	bf00      	nop
 80042c6:	3720      	adds	r7, #32
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000128 	.word	0x20000128
 80042d0:	2000012c 	.word	0x2000012c
 80042d4:	20000230 	.word	0x20000230

080042d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80042dc:	4b07      	ldr	r3, [pc, #28]	; (80042fc <pvTaskIncrementMutexHeldCount+0x24>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <pvTaskIncrementMutexHeldCount+0x24>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042ea:	3201      	adds	r2, #1
 80042ec:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80042ee:	4b03      	ldr	r3, [pc, #12]	; (80042fc <pvTaskIncrementMutexHeldCount+0x24>)
 80042f0:	681b      	ldr	r3, [r3, #0]
    }
 80042f2:	4618      	mov	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	20000128 	.word	0x20000128

08004300 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800430a:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004310:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fa5a 	bl	80027d0 <uxListRemove>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004322:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	2201      	movs	r2, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43da      	mvns	r2, r3
 8004330:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4013      	ands	r3, r2
 8004336:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004338:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d10a      	bne.n	8004358 <prvAddCurrentTaskToDelayedList+0x58>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004348:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	481a      	ldr	r0, [pc, #104]	; (80043bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004352:	f7fe f9e0 	bl	8002716 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004356:	e026      	b.n	80043a6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	429a      	cmp	r2, r3
 800436e:	d209      	bcs.n	8004384 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3304      	adds	r3, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f7fe f9ee 	bl	800275e <vListInsert>
}
 8004382:	e010      	b.n	80043a6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3304      	adds	r3, #4
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f7fe f9e4 	bl	800275e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	429a      	cmp	r2, r3
 800439e:	d202      	bcs.n	80043a6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80043a0:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6013      	str	r3, [r2, #0]
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	2000022c 	.word	0x2000022c
 80043b4:	20000128 	.word	0x20000128
 80043b8:	20000230 	.word	0x20000230
 80043bc:	20000214 	.word	0x20000214
 80043c0:	200001e4 	.word	0x200001e4
 80043c4:	200001e0 	.word	0x200001e0
 80043c8:	20000248 	.word	0x20000248

080043cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80043d6:	f000 fad5 	bl	8004984 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <xTimerCreateTimerTask+0x54>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <xTimerCreateTimerTask+0x58>)
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	2302      	movs	r3, #2
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2300      	movs	r3, #0
 80043ec:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80043f0:	490d      	ldr	r1, [pc, #52]	; (8004428 <xTimerCreateTimerTask+0x5c>)
 80043f2:	480e      	ldr	r0, [pc, #56]	; (800442c <xTimerCreateTimerTask+0x60>)
 80043f4:	f7ff f84e 	bl	8003494 <xTaskCreate>
 80043f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	603b      	str	r3, [r7, #0]
    }
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004416:	687b      	ldr	r3, [r7, #4]
    }
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000284 	.word	0x20000284
 8004424:	20000288 	.word	0x20000288
 8004428:	08005da0 	.word	0x08005da0
 800442c:	08004565 	.word	0x08004565

08004430 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	623b      	str	r3, [r7, #32]
    }
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800445e:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <xTimerGenericCommand+0x98>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02a      	beq.n	80044bc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b05      	cmp	r3, #5
 8004476:	dc18      	bgt.n	80044aa <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004478:	f7ff fd92 	bl	8003fa0 <xTaskGetSchedulerState>
 800447c:	4603      	mov	r3, r0
 800447e:	2b02      	cmp	r3, #2
 8004480:	d109      	bne.n	8004496 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <xTimerGenericCommand+0x98>)
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	f107 0114 	add.w	r1, r7, #20
 800448a:	2300      	movs	r3, #0
 800448c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448e:	f7fe fae7 	bl	8002a60 <xQueueGenericSend>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24
 8004494:	e012      	b.n	80044bc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004496:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <xTimerGenericCommand+0x98>)
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	f107 0114 	add.w	r1, r7, #20
 800449e:	2300      	movs	r3, #0
 80044a0:	2200      	movs	r2, #0
 80044a2:	f7fe fadd 	bl	8002a60 <xQueueGenericSend>
 80044a6:	6278      	str	r0, [r7, #36]	; 0x24
 80044a8:	e008      	b.n	80044bc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <xTimerGenericCommand+0x98>)
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	f107 0114 	add.w	r1, r7, #20
 80044b2:	2300      	movs	r3, #0
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	f7fe fbd1 	bl	8002c5c <xQueueGenericSendFromISR>
 80044ba:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80044be:	4618      	mov	r0, r3
 80044c0:	3728      	adds	r7, #40	; 0x28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000284 	.word	0x20000284

080044cc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d6:	4b22      	ldr	r3, [pc, #136]	; (8004560 <prvProcessExpiredTimer+0x94>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe f973 	bl	80027d0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d022      	beq.n	800453e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	18d1      	adds	r1, r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	6978      	ldr	r0, [r7, #20]
 8004506:	f000 f8d1 	bl	80046ac <prvInsertTimerInActiveList>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01f      	beq.n	8004550 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004510:	2300      	movs	r3, #0
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	2100      	movs	r1, #0
 800451a:	6978      	ldr	r0, [r7, #20]
 800451c:	f7ff ff88 	bl	8004430 <xTimerGenericCommand>
 8004520:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d113      	bne.n	8004550 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	60fb      	str	r3, [r7, #12]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	b2da      	uxtb	r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	6978      	ldr	r0, [r7, #20]
 8004556:	4798      	blx	r3
    }
 8004558:	bf00      	nop
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	2000027c 	.word	0x2000027c

08004564 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800456c:	f107 0308 	add.w	r3, r7, #8
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f857 	bl	8004624 <prvGetNextExpireTime>
 8004576:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4619      	mov	r1, r3
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f803 	bl	8004588 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004582:	f000 f8d5 	bl	8004730 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004586:	e7f1      	b.n	800456c <prvTimerTask+0x8>

08004588 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004592:	f7ff f94b 	bl	800382c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004596:	f107 0308 	add.w	r3, r7, #8
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f866 	bl	800466c <prvSampleTimeNow>
 80045a0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d130      	bne.n	800460a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <prvProcessTimerOrBlockTask+0x3c>
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d806      	bhi.n	80045c4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80045b6:	f7ff f947 	bl	8003848 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff85 	bl	80044cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80045c2:	e024      	b.n	800460e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <prvProcessTimerOrBlockTask+0x90>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <prvProcessTimerOrBlockTask+0x50>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <prvProcessTimerOrBlockTask+0x52>
 80045d8:	2300      	movs	r3, #0
 80045da:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045dc:	4b0f      	ldr	r3, [pc, #60]	; (800461c <prvProcessTimerOrBlockTask+0x94>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	4619      	mov	r1, r3
 80045ea:	f7fe ff1f 	bl	800342c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80045ee:	f7ff f92b 	bl	8003848 <xTaskResumeAll>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <prvProcessTimerOrBlockTask+0x98>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
    }
 8004608:	e001      	b.n	800460e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800460a:	f7ff f91d 	bl	8003848 <xTaskResumeAll>
    }
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000280 	.word	0x20000280
 800461c:	20000284 	.word	0x20000284
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800462c:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <prvGetNextExpireTime+0x44>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <prvGetNextExpireTime+0x16>
 8004636:	2201      	movs	r2, #1
 8004638:	e000      	b.n	800463c <prvGetNextExpireTime+0x18>
 800463a:	2200      	movs	r2, #0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <prvGetNextExpireTime+0x44>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	e001      	b.n	8004658 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004658:	68fb      	ldr	r3, [r7, #12]
    }
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	2000027c 	.word	0x2000027c

0800466c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004674:	f7ff f984 	bl	8003980 <xTaskGetTickCount>
 8004678:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <prvSampleTimeNow+0x3c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d205      	bcs.n	8004690 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004684:	f000 f91a 	bl	80048bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	e002      	b.n	8004696 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004696:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <prvSampleTimeNow+0x3c>)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800469c:	68fb      	ldr	r3, [r7, #12]
    }
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000028c 	.word	0x2000028c

080046ac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d812      	bhi.n	80046f8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	1ad2      	subs	r2, r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d302      	bcc.n	80046e6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e01b      	b.n	800471e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <prvInsertTimerInActiveList+0x7c>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7fe f834 	bl	800275e <vListInsert>
 80046f6:	e012      	b.n	800471e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d206      	bcs.n	800470e <prvInsertTimerInActiveList+0x62>
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d302      	bcc.n	800470e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004708:	2301      	movs	r3, #1
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e007      	b.n	800471e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800470e:	4b07      	ldr	r3, [pc, #28]	; (800472c <prvInsertTimerInActiveList+0x80>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7fe f820 	bl	800275e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800471e:	697b      	ldr	r3, [r7, #20]
    }
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000280 	.word	0x20000280
 800472c:	2000027c 	.word	0x2000027c

08004730 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	; 0x30
 8004734:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004736:	e0ae      	b.n	8004896 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f2c0 80aa 	blt.w	8004894 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe f83d 	bl	80027d0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff87 	bl	800466c <prvSampleTimeNow>
 800475e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b09      	cmp	r3, #9
 8004764:	f200 8097 	bhi.w	8004896 <prvProcessReceivedCommands+0x166>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <prvProcessReceivedCommands+0x40>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004799 	.word	0x08004799
 8004774:	08004799 	.word	0x08004799
 8004778:	08004799 	.word	0x08004799
 800477c:	0800480d 	.word	0x0800480d
 8004780:	08004821 	.word	0x08004821
 8004784:	0800486b 	.word	0x0800486b
 8004788:	08004799 	.word	0x08004799
 800478c:	08004799 	.word	0x08004799
 8004790:	0800480d 	.word	0x0800480d
 8004794:	08004821 	.word	0x08004821
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	18d1      	adds	r1, r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a3a      	ldr	r2, [r7, #32]
 80047b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047b8:	f7ff ff78 	bl	80046ac <prvInsertTimerInActiveList>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d069      	beq.n	8004896 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047c8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05e      	beq.n	8004896 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	441a      	add	r2, r3
 80047e0:	2300      	movs	r3, #0
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2300      	movs	r3, #0
 80047e6:	2100      	movs	r1, #0
 80047e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047ea:	f7ff fe21 	bl	8004430 <xTimerGenericCommand>
 80047ee:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d14f      	bne.n	8004896 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	61bb      	str	r3, [r7, #24]
    }
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800481e:	e03a      	b.n	8004896 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	617b      	str	r3, [r7, #20]
    }
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	18d1      	adds	r1, r2, r3
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004864:	f7ff ff22 	bl	80046ac <prvInsertTimerInActiveList>
                        break;
 8004868:	e015      	b.n	8004896 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800487a:	f000 fbe7 	bl	800504c <vPortFree>
 800487e:	e00a      	b.n	8004896 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004892:	e000      	b.n	8004896 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004894:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <prvProcessReceivedCommands+0x188>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f107 0108 	add.w	r1, r7, #8
 800489e:	2200      	movs	r2, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fa85 	bl	8002db0 <xQueueReceive>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f47f af45 	bne.w	8004738 <prvProcessReceivedCommands+0x8>
        }
    }
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	3728      	adds	r7, #40	; 0x28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000284 	.word	0x20000284

080048bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048c2:	e048      	b.n	8004956 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <prvSwitchTimerLists+0xc0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ce:	4b2b      	ldr	r3, [pc, #172]	; (800497c <prvSwitchTimerLists+0xc0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3304      	adds	r3, #4
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd ff77 	bl	80027d0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02e      	beq.n	8004956 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4413      	add	r3, r2
 8004900:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d90e      	bls.n	8004928 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004916:	4b19      	ldr	r3, [pc, #100]	; (800497c <prvSwitchTimerLists+0xc0>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3304      	adds	r3, #4
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f7fd ff1c 	bl	800275e <vListInsert>
 8004926:	e016      	b.n	8004956 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004928:	2300      	movs	r3, #0
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2300      	movs	r3, #0
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	2100      	movs	r1, #0
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff fd7c 	bl	8004430 <xTimerGenericCommand>
 8004938:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	603b      	str	r3, [r7, #0]
    }
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <prvSwitchTimerLists+0xc0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1b1      	bne.n	80048c4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <prvSwitchTimerLists+0xc0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <prvSwitchTimerLists+0xc4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a04      	ldr	r2, [pc, #16]	; (800497c <prvSwitchTimerLists+0xc0>)
 800496c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800496e:	4a04      	ldr	r2, [pc, #16]	; (8004980 <prvSwitchTimerLists+0xc4>)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	6013      	str	r3, [r2, #0]
    }
 8004974:	bf00      	nop
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	2000027c 	.word	0x2000027c
 8004980:	20000280 	.word	0x20000280

08004984 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004988:	f000 f95e 	bl	8004c48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800498c:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <prvCheckForValidListAndQueue+0x54>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11d      	bne.n	80049d0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004994:	4811      	ldr	r0, [pc, #68]	; (80049dc <prvCheckForValidListAndQueue+0x58>)
 8004996:	f7fd fe91 	bl	80026bc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800499a:	4811      	ldr	r0, [pc, #68]	; (80049e0 <prvCheckForValidListAndQueue+0x5c>)
 800499c:	f7fd fe8e 	bl	80026bc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <prvCheckForValidListAndQueue+0x60>)
 80049a2:	4a0e      	ldr	r2, [pc, #56]	; (80049dc <prvCheckForValidListAndQueue+0x58>)
 80049a4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <prvCheckForValidListAndQueue+0x64>)
 80049a8:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <prvCheckForValidListAndQueue+0x5c>)
 80049aa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80049ac:	2200      	movs	r2, #0
 80049ae:	210c      	movs	r1, #12
 80049b0:	200a      	movs	r0, #10
 80049b2:	f7fd ff9f 	bl	80028f4 <xQueueGenericCreate>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4a07      	ldr	r2, [pc, #28]	; (80049d8 <prvCheckForValidListAndQueue+0x54>)
 80049ba:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <prvCheckForValidListAndQueue+0x54>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <prvCheckForValidListAndQueue+0x54>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4908      	ldr	r1, [pc, #32]	; (80049ec <prvCheckForValidListAndQueue+0x68>)
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fe fd04 	bl	80033d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80049d0:	f000 f96a 	bl	8004ca8 <vPortExitCritical>
    }
 80049d4:	bf00      	nop
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000284 	.word	0x20000284
 80049dc:	20000254 	.word	0x20000254
 80049e0:	20000268 	.word	0x20000268
 80049e4:	2000027c 	.word	0x2000027c
 80049e8:	20000280 	.word	0x20000280
 80049ec:	08005da8 	.word	0x08005da8

080049f0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3b04      	subs	r3, #4
 8004a00:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3b04      	subs	r3, #4
 8004a0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f023 0201 	bic.w	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3b04      	subs	r3, #4
 8004a1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004a20:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <pxPortInitialiseStack+0x64>)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b14      	subs	r3, #20
 8004a2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f06f 0202 	mvn.w	r2, #2
 8004a3e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3b20      	subs	r3, #32
 8004a44:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	08004a59 	.word	0x08004a59

08004a58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <prvTaskExitError+0x54>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d00a      	beq.n	8004a82 <prvTaskExitError+0x2a>
        __asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60fb      	str	r3, [r7, #12]
    }
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <prvTaskExitError+0x28>
        __asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60bb      	str	r3, [r7, #8]
    }
 8004a94:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004a96:	bf00      	nop
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0fc      	beq.n	8004a98 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	20000010 	.word	0x20000010

08004ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <pxCurrentTCBConst2>)
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	6808      	ldr	r0, [r1, #0]
 8004ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aba:	f380 8809 	msr	PSP, r0
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f380 8811 	msr	BASEPRI, r0
 8004aca:	4770      	bx	lr
 8004acc:	f3af 8000 	nop.w

08004ad0 <pxCurrentTCBConst2>:
 8004ad0:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004ad8:	4808      	ldr	r0, [pc, #32]	; (8004afc <prvPortStartFirstTask+0x24>)
 8004ada:	6800      	ldr	r0, [r0, #0]
 8004adc:	6800      	ldr	r0, [r0, #0]
 8004ade:	f380 8808 	msr	MSP, r0
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8814 	msr	CONTROL, r0
 8004aea:	b662      	cpsie	i
 8004aec:	b661      	cpsie	f
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	df00      	svc	0
 8004af8:	bf00      	nop
 8004afa:	0000      	.short	0x0000
 8004afc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop

08004b04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b0a:	4b46      	ldr	r3, [pc, #280]	; (8004c24 <xPortStartScheduler+0x120>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a46      	ldr	r2, [pc, #280]	; (8004c28 <xPortStartScheduler+0x124>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10a      	bne.n	8004b2a <xPortStartScheduler+0x26>
        __asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	613b      	str	r3, [r7, #16]
    }
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b2a:	4b3e      	ldr	r3, [pc, #248]	; (8004c24 <xPortStartScheduler+0x120>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a3f      	ldr	r2, [pc, #252]	; (8004c2c <xPortStartScheduler+0x128>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10a      	bne.n	8004b4a <xPortStartScheduler+0x46>
        __asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	60fb      	str	r3, [r7, #12]
    }
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b4a:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <xPortStartScheduler+0x12c>)
 8004b4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	22ff      	movs	r2, #255	; 0xff
 8004b5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <xPortStartScheduler+0x130>)
 8004b70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b72:	4b31      	ldr	r3, [pc, #196]	; (8004c38 <xPortStartScheduler+0x134>)
 8004b74:	2207      	movs	r2, #7
 8004b76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b78:	e009      	b.n	8004b8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004b7a:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <xPortStartScheduler+0x134>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	4a2d      	ldr	r2, [pc, #180]	; (8004c38 <xPortStartScheduler+0x134>)
 8004b82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b80      	cmp	r3, #128	; 0x80
 8004b98:	d0ef      	beq.n	8004b7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b9a:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <xPortStartScheduler+0x134>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d00a      	beq.n	8004bbc <xPortStartScheduler+0xb8>
        __asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	60bb      	str	r3, [r7, #8]
    }
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bbc:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <xPortStartScheduler+0x134>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	4a1d      	ldr	r2, [pc, #116]	; (8004c38 <xPortStartScheduler+0x134>)
 8004bc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bc6:	4b1c      	ldr	r3, [pc, #112]	; (8004c38 <xPortStartScheduler+0x134>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bce:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <xPortStartScheduler+0x134>)
 8004bd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004bda:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <xPortStartScheduler+0x138>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <xPortStartScheduler+0x138>)
 8004be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004be4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <xPortStartScheduler+0x138>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <xPortStartScheduler+0x138>)
 8004bec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bf0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004bf2:	f000 f8db 	bl	8004dac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <xPortStartScheduler+0x13c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004bfc:	f000 f8fa 	bl	8004df4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <xPortStartScheduler+0x140>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a0f      	ldr	r2, [pc, #60]	; (8004c44 <xPortStartScheduler+0x140>)
 8004c06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004c0c:	f7ff ff64 	bl	8004ad8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004c10:	f7fe ff7e 	bl	8003b10 <vTaskSwitchContext>
    prvTaskExitError();
 8004c14:	f7ff ff20 	bl	8004a58 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	e000ed00 	.word	0xe000ed00
 8004c28:	410fc271 	.word	0x410fc271
 8004c2c:	410fc270 	.word	0x410fc270
 8004c30:	e000e400 	.word	0xe000e400
 8004c34:	20000290 	.word	0x20000290
 8004c38:	20000294 	.word	0x20000294
 8004c3c:	e000ed20 	.word	0xe000ed20
 8004c40:	20000010 	.word	0x20000010
 8004c44:	e000ef34 	.word	0xe000ef34

08004c48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	607b      	str	r3, [r7, #4]
    }
 8004c60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <vPortEnterCritical+0x58>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3301      	adds	r3, #1
 8004c68:	4a0d      	ldr	r2, [pc, #52]	; (8004ca0 <vPortEnterCritical+0x58>)
 8004c6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <vPortEnterCritical+0x58>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d10f      	bne.n	8004c94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <vPortEnterCritical+0x5c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <vPortEnterCritical+0x4c>
        __asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	603b      	str	r3, [r7, #0]
    }
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <vPortEnterCritical+0x4a>
    }
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	20000010 	.word	0x20000010
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <vPortExitCritical+0x50>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <vPortExitCritical+0x24>
        __asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	607b      	str	r3, [r7, #4]
    }
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <vPortExitCritical+0x50>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <vPortExitCritical+0x50>)
 8004cd4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <vPortExitCritical+0x50>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d105      	bne.n	8004cea <vPortExitCritical+0x42>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f383 8811 	msr	BASEPRI, r3
    }
 8004ce8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000010 	.word	0x20000010
 8004cfc:	00000000 	.word	0x00000000

08004d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004d00:	f3ef 8009 	mrs	r0, PSP
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <pxCurrentTCBConst>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	f01e 0f10 	tst.w	lr, #16
 8004d10:	bf08      	it	eq
 8004d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1a:	6010      	str	r0, [r2, #0]
 8004d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d24:	f380 8811 	msr	BASEPRI, r0
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f7fe feee 	bl	8003b10 <vTaskSwitchContext>
 8004d34:	f04f 0000 	mov.w	r0, #0
 8004d38:	f380 8811 	msr	BASEPRI, r0
 8004d3c:	bc09      	pop	{r0, r3}
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	6808      	ldr	r0, [r1, #0]
 8004d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d46:	f01e 0f10 	tst.w	lr, #16
 8004d4a:	bf08      	it	eq
 8004d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d50:	f380 8809 	msr	PSP, r0
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	f3af 8000 	nop.w

08004d60 <pxCurrentTCBConst>:
 8004d60:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
    }
 8004d80:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d82:	f7fe fe0d 	bl	80039a0 <xTaskIncrementTick>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <SysTick_Handler+0x40>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	2300      	movs	r3, #0
 8004d96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
    }
 8004d9e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <vPortSetupTimerInterrupt+0x34>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <vPortSetupTimerInterrupt+0x38>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <vPortSetupTimerInterrupt+0x3c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <vPortSetupTimerInterrupt+0x40>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <vPortSetupTimerInterrupt+0x44>)
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <vPortSetupTimerInterrupt+0x34>)
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	e000e010 	.word	0xe000e010
 8004de4:	e000e018 	.word	0xe000e018
 8004de8:	20000000 	.word	0x20000000
 8004dec:	10624dd3 	.word	0x10624dd3
 8004df0:	e000e014 	.word	0xe000e014

08004df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e04 <vPortEnableVFP+0x10>
 8004df8:	6801      	ldr	r1, [r0, #0]
 8004dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dfe:	6001      	str	r1, [r0, #0]
 8004e00:	4770      	bx	lr
 8004e02:	0000      	.short	0x0000
 8004e04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop

08004e0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004e12:	f3ef 8305 	mrs	r3, IPSR
 8004e16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	d914      	bls.n	8004e48 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <vPortValidateInterruptPriority+0x70>)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e28:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <vPortValidateInterruptPriority+0x74>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	7afa      	ldrb	r2, [r7, #11]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d20a      	bcs.n	8004e48 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	607b      	str	r3, [r7, #4]
    }
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e48:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <vPortValidateInterruptPriority+0x78>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <vPortValidateInterruptPriority+0x7c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d90a      	bls.n	8004e6e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	603b      	str	r3, [r7, #0]
    }
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <vPortValidateInterruptPriority+0x60>
    }
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	e000e3f0 	.word	0xe000e3f0
 8004e80:	20000290 	.word	0x20000290
 8004e84:	e000ed0c 	.word	0xe000ed0c
 8004e88:	20000294 	.word	0x20000294

08004e8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004e98:	f7fe fcc8 	bl	800382c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e9c:	4b65      	ldr	r3, [pc, #404]	; (8005034 <pvPortMalloc+0x1a8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ea4:	f000 f934 	bl	8005110 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ea8:	4b63      	ldr	r3, [pc, #396]	; (8005038 <pvPortMalloc+0x1ac>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f040 80a7 	bne.w	8005004 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d02d      	beq.n	8004f18 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d227      	bcs.n	8004f18 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004ec8:	2208      	movs	r2, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d021      	beq.n	8004f1e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d214      	bcs.n	8004f12 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f023 0307 	bic.w	r3, r3, #7
 8004eee:	3308      	adds	r3, #8
 8004ef0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d010      	beq.n	8004f1e <pvPortMalloc+0x92>
        __asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	617b      	str	r3, [r7, #20]
    }
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f16:	e002      	b.n	8004f1e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	e000      	b.n	8004f20 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f1e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d06e      	beq.n	8005004 <pvPortMalloc+0x178>
 8004f26:	4b45      	ldr	r3, [pc, #276]	; (800503c <pvPortMalloc+0x1b0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d869      	bhi.n	8005004 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f30:	4b43      	ldr	r3, [pc, #268]	; (8005040 <pvPortMalloc+0x1b4>)
 8004f32:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004f34:	4b42      	ldr	r3, [pc, #264]	; (8005040 <pvPortMalloc+0x1b4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f3a:	e004      	b.n	8004f46 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d903      	bls.n	8004f58 <pvPortMalloc+0xcc>
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f1      	bne.n	8004f3c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f58:	4b36      	ldr	r3, [pc, #216]	; (8005034 <pvPortMalloc+0x1a8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d050      	beq.n	8005004 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2208      	movs	r2, #8
 8004f68:	4413      	add	r3, r2
 8004f6a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d91f      	bls.n	8004fc4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4413      	add	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <pvPortMalloc+0x120>
        __asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	613b      	str	r3, [r7, #16]
    }
 8004fa8:	bf00      	nop
 8004faa:	e7fe      	b.n	8004faa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fbe:	69b8      	ldr	r0, [r7, #24]
 8004fc0:	f000 f908 	bl	80051d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <pvPortMalloc+0x1b0>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	4a1b      	ldr	r2, [pc, #108]	; (800503c <pvPortMalloc+0x1b0>)
 8004fd0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	; (800503c <pvPortMalloc+0x1b0>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <pvPortMalloc+0x1b8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d203      	bcs.n	8004fe6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fde:	4b17      	ldr	r3, [pc, #92]	; (800503c <pvPortMalloc+0x1b0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a18      	ldr	r2, [pc, #96]	; (8005044 <pvPortMalloc+0x1b8>)
 8004fe4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <pvPortMalloc+0x1ac>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <pvPortMalloc+0x1bc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	4a11      	ldr	r2, [pc, #68]	; (8005048 <pvPortMalloc+0x1bc>)
 8005002:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005004:	f7fe fc20 	bl	8003848 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <pvPortMalloc+0x19c>
        __asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	60fb      	str	r3, [r7, #12]
    }
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <pvPortMalloc+0x19a>
    return pvReturn;
 8005028:	69fb      	ldr	r3, [r7, #28]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3728      	adds	r7, #40	; 0x28
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	200016a0 	.word	0x200016a0
 8005038:	200016b4 	.word	0x200016b4
 800503c:	200016a4 	.word	0x200016a4
 8005040:	20001698 	.word	0x20001698
 8005044:	200016a8 	.word	0x200016a8
 8005048:	200016ac 	.word	0x200016ac

0800504c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d04d      	beq.n	80050fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800505e:	2308      	movs	r3, #8
 8005060:	425b      	negs	r3, r3
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4413      	add	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4b24      	ldr	r3, [pc, #144]	; (8005104 <vPortFree+0xb8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4013      	ands	r3, r2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <vPortFree+0x44>
        __asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	60fb      	str	r3, [r7, #12]
    }
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <vPortFree+0x62>
        __asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	60bb      	str	r3, [r7, #8]
    }
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <vPortFree+0xb8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01e      	beq.n	80050fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11a      	bne.n	80050fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <vPortFree+0xb8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	401a      	ands	r2, r3
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80050d4:	f7fe fbaa 	bl	800382c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <vPortFree+0xbc>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4413      	add	r3, r2
 80050e2:	4a09      	ldr	r2, [pc, #36]	; (8005108 <vPortFree+0xbc>)
 80050e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050e6:	6938      	ldr	r0, [r7, #16]
 80050e8:	f000 f874 	bl	80051d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <vPortFree+0xc0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	4a06      	ldr	r2, [pc, #24]	; (800510c <vPortFree+0xc0>)
 80050f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80050f6:	f7fe fba7 	bl	8003848 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80050fa:	bf00      	nop
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200016b4 	.word	0x200016b4
 8005108:	200016a4 	.word	0x200016a4
 800510c:	200016b0 	.word	0x200016b0

08005110 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005116:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800511a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <prvHeapInit+0xac>)
 800511e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00c      	beq.n	8005144 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3307      	adds	r3, #7
 800512e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0307 	bic.w	r3, r3, #7
 8005136:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	4a1f      	ldr	r2, [pc, #124]	; (80051bc <prvHeapInit+0xac>)
 8005140:	4413      	add	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005148:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <prvHeapInit+0xb0>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800514e:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <prvHeapInit+0xb0>)
 8005150:	2200      	movs	r2, #0
 8005152:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	4413      	add	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800515c:	2208      	movs	r2, #8
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0307 	bic.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <prvHeapInit+0xb4>)
 8005170:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <prvHeapInit+0xb4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800517a:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <prvHeapInit+0xb4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	1ad2      	subs	r2, r2, r3
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <prvHeapInit+0xb4>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <prvHeapInit+0xb8>)
 800519e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <prvHeapInit+0xbc>)
 80051a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <prvHeapInit+0xc0>)
 80051aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051ae:	601a      	str	r2, [r3, #0]
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000298 	.word	0x20000298
 80051c0:	20001698 	.word	0x20001698
 80051c4:	200016a0 	.word	0x200016a0
 80051c8:	200016a8 	.word	0x200016a8
 80051cc:	200016a4 	.word	0x200016a4
 80051d0:	200016b4 	.word	0x200016b4

080051d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051dc:	4b28      	ldr	r3, [pc, #160]	; (8005280 <prvInsertBlockIntoFreeList+0xac>)
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e002      	b.n	80051e8 <prvInsertBlockIntoFreeList+0x14>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d8f7      	bhi.n	80051e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4413      	add	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d108      	bne.n	8005216 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	441a      	add	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	441a      	add	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d118      	bne.n	800525c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <prvInsertBlockIntoFreeList+0xb0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d00d      	beq.n	8005252 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e008      	b.n	8005264 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005252:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <prvInsertBlockIntoFreeList+0xb0>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e003      	b.n	8005264 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d002      	beq.n	8005272 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20001698 	.word	0x20001698
 8005284:	200016a0 	.word	0x200016a0

08005288 <__libc_init_array>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	4d0d      	ldr	r5, [pc, #52]	; (80052c0 <__libc_init_array+0x38>)
 800528c:	4c0d      	ldr	r4, [pc, #52]	; (80052c4 <__libc_init_array+0x3c>)
 800528e:	1b64      	subs	r4, r4, r5
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	2600      	movs	r6, #0
 8005294:	42a6      	cmp	r6, r4
 8005296:	d109      	bne.n	80052ac <__libc_init_array+0x24>
 8005298:	4d0b      	ldr	r5, [pc, #44]	; (80052c8 <__libc_init_array+0x40>)
 800529a:	4c0c      	ldr	r4, [pc, #48]	; (80052cc <__libc_init_array+0x44>)
 800529c:	f000 fd3a 	bl	8005d14 <_init>
 80052a0:	1b64      	subs	r4, r4, r5
 80052a2:	10a4      	asrs	r4, r4, #2
 80052a4:	2600      	movs	r6, #0
 80052a6:	42a6      	cmp	r6, r4
 80052a8:	d105      	bne.n	80052b6 <__libc_init_array+0x2e>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b0:	4798      	blx	r3
 80052b2:	3601      	adds	r6, #1
 80052b4:	e7ee      	b.n	8005294 <__libc_init_array+0xc>
 80052b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ba:	4798      	blx	r3
 80052bc:	3601      	adds	r6, #1
 80052be:	e7f2      	b.n	80052a6 <__libc_init_array+0x1e>
 80052c0:	08005e4c 	.word	0x08005e4c
 80052c4:	08005e4c 	.word	0x08005e4c
 80052c8:	08005e4c 	.word	0x08005e4c
 80052cc:	08005e50 	.word	0x08005e50

080052d0 <memcpy>:
 80052d0:	440a      	add	r2, r1
 80052d2:	4291      	cmp	r1, r2
 80052d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052d8:	d100      	bne.n	80052dc <memcpy+0xc>
 80052da:	4770      	bx	lr
 80052dc:	b510      	push	{r4, lr}
 80052de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e6:	4291      	cmp	r1, r2
 80052e8:	d1f9      	bne.n	80052de <memcpy+0xe>
 80052ea:	bd10      	pop	{r4, pc}

080052ec <memset>:
 80052ec:	4402      	add	r2, r0
 80052ee:	4603      	mov	r3, r0
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d100      	bne.n	80052f6 <memset+0xa>
 80052f4:	4770      	bx	lr
 80052f6:	f803 1b01 	strb.w	r1, [r3], #1
 80052fa:	e7f9      	b.n	80052f0 <memset+0x4>

080052fc <_puts_r>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	460e      	mov	r6, r1
 8005300:	4605      	mov	r5, r0
 8005302:	b118      	cbz	r0, 800530c <_puts_r+0x10>
 8005304:	6983      	ldr	r3, [r0, #24]
 8005306:	b90b      	cbnz	r3, 800530c <_puts_r+0x10>
 8005308:	f000 fa48 	bl	800579c <__sinit>
 800530c:	69ab      	ldr	r3, [r5, #24]
 800530e:	68ac      	ldr	r4, [r5, #8]
 8005310:	b913      	cbnz	r3, 8005318 <_puts_r+0x1c>
 8005312:	4628      	mov	r0, r5
 8005314:	f000 fa42 	bl	800579c <__sinit>
 8005318:	4b2c      	ldr	r3, [pc, #176]	; (80053cc <_puts_r+0xd0>)
 800531a:	429c      	cmp	r4, r3
 800531c:	d120      	bne.n	8005360 <_puts_r+0x64>
 800531e:	686c      	ldr	r4, [r5, #4]
 8005320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005322:	07db      	lsls	r3, r3, #31
 8005324:	d405      	bmi.n	8005332 <_puts_r+0x36>
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	0598      	lsls	r0, r3, #22
 800532a:	d402      	bmi.n	8005332 <_puts_r+0x36>
 800532c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800532e:	f000 fad3 	bl	80058d8 <__retarget_lock_acquire_recursive>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	0719      	lsls	r1, r3, #28
 8005336:	d51d      	bpl.n	8005374 <_puts_r+0x78>
 8005338:	6923      	ldr	r3, [r4, #16]
 800533a:	b1db      	cbz	r3, 8005374 <_puts_r+0x78>
 800533c:	3e01      	subs	r6, #1
 800533e:	68a3      	ldr	r3, [r4, #8]
 8005340:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005344:	3b01      	subs	r3, #1
 8005346:	60a3      	str	r3, [r4, #8]
 8005348:	bb39      	cbnz	r1, 800539a <_puts_r+0x9e>
 800534a:	2b00      	cmp	r3, #0
 800534c:	da38      	bge.n	80053c0 <_puts_r+0xc4>
 800534e:	4622      	mov	r2, r4
 8005350:	210a      	movs	r1, #10
 8005352:	4628      	mov	r0, r5
 8005354:	f000 f848 	bl	80053e8 <__swbuf_r>
 8005358:	3001      	adds	r0, #1
 800535a:	d011      	beq.n	8005380 <_puts_r+0x84>
 800535c:	250a      	movs	r5, #10
 800535e:	e011      	b.n	8005384 <_puts_r+0x88>
 8005360:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <_puts_r+0xd4>)
 8005362:	429c      	cmp	r4, r3
 8005364:	d101      	bne.n	800536a <_puts_r+0x6e>
 8005366:	68ac      	ldr	r4, [r5, #8]
 8005368:	e7da      	b.n	8005320 <_puts_r+0x24>
 800536a:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <_puts_r+0xd8>)
 800536c:	429c      	cmp	r4, r3
 800536e:	bf08      	it	eq
 8005370:	68ec      	ldreq	r4, [r5, #12]
 8005372:	e7d5      	b.n	8005320 <_puts_r+0x24>
 8005374:	4621      	mov	r1, r4
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f888 	bl	800548c <__swsetup_r>
 800537c:	2800      	cmp	r0, #0
 800537e:	d0dd      	beq.n	800533c <_puts_r+0x40>
 8005380:	f04f 35ff 	mov.w	r5, #4294967295
 8005384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005386:	07da      	lsls	r2, r3, #31
 8005388:	d405      	bmi.n	8005396 <_puts_r+0x9a>
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	059b      	lsls	r3, r3, #22
 800538e:	d402      	bmi.n	8005396 <_puts_r+0x9a>
 8005390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005392:	f000 faa2 	bl	80058da <__retarget_lock_release_recursive>
 8005396:	4628      	mov	r0, r5
 8005398:	bd70      	pop	{r4, r5, r6, pc}
 800539a:	2b00      	cmp	r3, #0
 800539c:	da04      	bge.n	80053a8 <_puts_r+0xac>
 800539e:	69a2      	ldr	r2, [r4, #24]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	dc06      	bgt.n	80053b2 <_puts_r+0xb6>
 80053a4:	290a      	cmp	r1, #10
 80053a6:	d004      	beq.n	80053b2 <_puts_r+0xb6>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	6022      	str	r2, [r4, #0]
 80053ae:	7019      	strb	r1, [r3, #0]
 80053b0:	e7c5      	b.n	800533e <_puts_r+0x42>
 80053b2:	4622      	mov	r2, r4
 80053b4:	4628      	mov	r0, r5
 80053b6:	f000 f817 	bl	80053e8 <__swbuf_r>
 80053ba:	3001      	adds	r0, #1
 80053bc:	d1bf      	bne.n	800533e <_puts_r+0x42>
 80053be:	e7df      	b.n	8005380 <_puts_r+0x84>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	250a      	movs	r5, #10
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	6022      	str	r2, [r4, #0]
 80053c8:	701d      	strb	r5, [r3, #0]
 80053ca:	e7db      	b.n	8005384 <_puts_r+0x88>
 80053cc:	08005e0c 	.word	0x08005e0c
 80053d0:	08005e2c 	.word	0x08005e2c
 80053d4:	08005dec 	.word	0x08005dec

080053d8 <puts>:
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <puts+0xc>)
 80053da:	4601      	mov	r1, r0
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f7ff bf8d 	b.w	80052fc <_puts_r>
 80053e2:	bf00      	nop
 80053e4:	20000014 	.word	0x20000014

080053e8 <__swbuf_r>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	460e      	mov	r6, r1
 80053ec:	4614      	mov	r4, r2
 80053ee:	4605      	mov	r5, r0
 80053f0:	b118      	cbz	r0, 80053fa <__swbuf_r+0x12>
 80053f2:	6983      	ldr	r3, [r0, #24]
 80053f4:	b90b      	cbnz	r3, 80053fa <__swbuf_r+0x12>
 80053f6:	f000 f9d1 	bl	800579c <__sinit>
 80053fa:	4b21      	ldr	r3, [pc, #132]	; (8005480 <__swbuf_r+0x98>)
 80053fc:	429c      	cmp	r4, r3
 80053fe:	d12b      	bne.n	8005458 <__swbuf_r+0x70>
 8005400:	686c      	ldr	r4, [r5, #4]
 8005402:	69a3      	ldr	r3, [r4, #24]
 8005404:	60a3      	str	r3, [r4, #8]
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	071a      	lsls	r2, r3, #28
 800540a:	d52f      	bpl.n	800546c <__swbuf_r+0x84>
 800540c:	6923      	ldr	r3, [r4, #16]
 800540e:	b36b      	cbz	r3, 800546c <__swbuf_r+0x84>
 8005410:	6923      	ldr	r3, [r4, #16]
 8005412:	6820      	ldr	r0, [r4, #0]
 8005414:	1ac0      	subs	r0, r0, r3
 8005416:	6963      	ldr	r3, [r4, #20]
 8005418:	b2f6      	uxtb	r6, r6
 800541a:	4283      	cmp	r3, r0
 800541c:	4637      	mov	r7, r6
 800541e:	dc04      	bgt.n	800542a <__swbuf_r+0x42>
 8005420:	4621      	mov	r1, r4
 8005422:	4628      	mov	r0, r5
 8005424:	f000 f926 	bl	8005674 <_fflush_r>
 8005428:	bb30      	cbnz	r0, 8005478 <__swbuf_r+0x90>
 800542a:	68a3      	ldr	r3, [r4, #8]
 800542c:	3b01      	subs	r3, #1
 800542e:	60a3      	str	r3, [r4, #8]
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	6022      	str	r2, [r4, #0]
 8005436:	701e      	strb	r6, [r3, #0]
 8005438:	6963      	ldr	r3, [r4, #20]
 800543a:	3001      	adds	r0, #1
 800543c:	4283      	cmp	r3, r0
 800543e:	d004      	beq.n	800544a <__swbuf_r+0x62>
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	07db      	lsls	r3, r3, #31
 8005444:	d506      	bpl.n	8005454 <__swbuf_r+0x6c>
 8005446:	2e0a      	cmp	r6, #10
 8005448:	d104      	bne.n	8005454 <__swbuf_r+0x6c>
 800544a:	4621      	mov	r1, r4
 800544c:	4628      	mov	r0, r5
 800544e:	f000 f911 	bl	8005674 <_fflush_r>
 8005452:	b988      	cbnz	r0, 8005478 <__swbuf_r+0x90>
 8005454:	4638      	mov	r0, r7
 8005456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <__swbuf_r+0x9c>)
 800545a:	429c      	cmp	r4, r3
 800545c:	d101      	bne.n	8005462 <__swbuf_r+0x7a>
 800545e:	68ac      	ldr	r4, [r5, #8]
 8005460:	e7cf      	b.n	8005402 <__swbuf_r+0x1a>
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <__swbuf_r+0xa0>)
 8005464:	429c      	cmp	r4, r3
 8005466:	bf08      	it	eq
 8005468:	68ec      	ldreq	r4, [r5, #12]
 800546a:	e7ca      	b.n	8005402 <__swbuf_r+0x1a>
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	f000 f80c 	bl	800548c <__swsetup_r>
 8005474:	2800      	cmp	r0, #0
 8005476:	d0cb      	beq.n	8005410 <__swbuf_r+0x28>
 8005478:	f04f 37ff 	mov.w	r7, #4294967295
 800547c:	e7ea      	b.n	8005454 <__swbuf_r+0x6c>
 800547e:	bf00      	nop
 8005480:	08005e0c 	.word	0x08005e0c
 8005484:	08005e2c 	.word	0x08005e2c
 8005488:	08005dec 	.word	0x08005dec

0800548c <__swsetup_r>:
 800548c:	4b32      	ldr	r3, [pc, #200]	; (8005558 <__swsetup_r+0xcc>)
 800548e:	b570      	push	{r4, r5, r6, lr}
 8005490:	681d      	ldr	r5, [r3, #0]
 8005492:	4606      	mov	r6, r0
 8005494:	460c      	mov	r4, r1
 8005496:	b125      	cbz	r5, 80054a2 <__swsetup_r+0x16>
 8005498:	69ab      	ldr	r3, [r5, #24]
 800549a:	b913      	cbnz	r3, 80054a2 <__swsetup_r+0x16>
 800549c:	4628      	mov	r0, r5
 800549e:	f000 f97d 	bl	800579c <__sinit>
 80054a2:	4b2e      	ldr	r3, [pc, #184]	; (800555c <__swsetup_r+0xd0>)
 80054a4:	429c      	cmp	r4, r3
 80054a6:	d10f      	bne.n	80054c8 <__swsetup_r+0x3c>
 80054a8:	686c      	ldr	r4, [r5, #4]
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054b0:	0719      	lsls	r1, r3, #28
 80054b2:	d42c      	bmi.n	800550e <__swsetup_r+0x82>
 80054b4:	06dd      	lsls	r5, r3, #27
 80054b6:	d411      	bmi.n	80054dc <__swsetup_r+0x50>
 80054b8:	2309      	movs	r3, #9
 80054ba:	6033      	str	r3, [r6, #0]
 80054bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054c0:	81a3      	strh	r3, [r4, #12]
 80054c2:	f04f 30ff 	mov.w	r0, #4294967295
 80054c6:	e03e      	b.n	8005546 <__swsetup_r+0xba>
 80054c8:	4b25      	ldr	r3, [pc, #148]	; (8005560 <__swsetup_r+0xd4>)
 80054ca:	429c      	cmp	r4, r3
 80054cc:	d101      	bne.n	80054d2 <__swsetup_r+0x46>
 80054ce:	68ac      	ldr	r4, [r5, #8]
 80054d0:	e7eb      	b.n	80054aa <__swsetup_r+0x1e>
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <__swsetup_r+0xd8>)
 80054d4:	429c      	cmp	r4, r3
 80054d6:	bf08      	it	eq
 80054d8:	68ec      	ldreq	r4, [r5, #12]
 80054da:	e7e6      	b.n	80054aa <__swsetup_r+0x1e>
 80054dc:	0758      	lsls	r0, r3, #29
 80054de:	d512      	bpl.n	8005506 <__swsetup_r+0x7a>
 80054e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054e2:	b141      	cbz	r1, 80054f6 <__swsetup_r+0x6a>
 80054e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054e8:	4299      	cmp	r1, r3
 80054ea:	d002      	beq.n	80054f2 <__swsetup_r+0x66>
 80054ec:	4630      	mov	r0, r6
 80054ee:	f000 fa5b 	bl	80059a8 <_free_r>
 80054f2:	2300      	movs	r3, #0
 80054f4:	6363      	str	r3, [r4, #52]	; 0x34
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	2300      	movs	r3, #0
 8005500:	6063      	str	r3, [r4, #4]
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	f043 0308 	orr.w	r3, r3, #8
 800550c:	81a3      	strh	r3, [r4, #12]
 800550e:	6923      	ldr	r3, [r4, #16]
 8005510:	b94b      	cbnz	r3, 8005526 <__swsetup_r+0x9a>
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800551c:	d003      	beq.n	8005526 <__swsetup_r+0x9a>
 800551e:	4621      	mov	r1, r4
 8005520:	4630      	mov	r0, r6
 8005522:	f000 fa01 	bl	8005928 <__smakebuf_r>
 8005526:	89a0      	ldrh	r0, [r4, #12]
 8005528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800552c:	f010 0301 	ands.w	r3, r0, #1
 8005530:	d00a      	beq.n	8005548 <__swsetup_r+0xbc>
 8005532:	2300      	movs	r3, #0
 8005534:	60a3      	str	r3, [r4, #8]
 8005536:	6963      	ldr	r3, [r4, #20]
 8005538:	425b      	negs	r3, r3
 800553a:	61a3      	str	r3, [r4, #24]
 800553c:	6923      	ldr	r3, [r4, #16]
 800553e:	b943      	cbnz	r3, 8005552 <__swsetup_r+0xc6>
 8005540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005544:	d1ba      	bne.n	80054bc <__swsetup_r+0x30>
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	0781      	lsls	r1, r0, #30
 800554a:	bf58      	it	pl
 800554c:	6963      	ldrpl	r3, [r4, #20]
 800554e:	60a3      	str	r3, [r4, #8]
 8005550:	e7f4      	b.n	800553c <__swsetup_r+0xb0>
 8005552:	2000      	movs	r0, #0
 8005554:	e7f7      	b.n	8005546 <__swsetup_r+0xba>
 8005556:	bf00      	nop
 8005558:	20000014 	.word	0x20000014
 800555c:	08005e0c 	.word	0x08005e0c
 8005560:	08005e2c 	.word	0x08005e2c
 8005564:	08005dec 	.word	0x08005dec

08005568 <__sflush_r>:
 8005568:	898a      	ldrh	r2, [r1, #12]
 800556a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556e:	4605      	mov	r5, r0
 8005570:	0710      	lsls	r0, r2, #28
 8005572:	460c      	mov	r4, r1
 8005574:	d458      	bmi.n	8005628 <__sflush_r+0xc0>
 8005576:	684b      	ldr	r3, [r1, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	dc05      	bgt.n	8005588 <__sflush_r+0x20>
 800557c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	dc02      	bgt.n	8005588 <__sflush_r+0x20>
 8005582:	2000      	movs	r0, #0
 8005584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800558a:	2e00      	cmp	r6, #0
 800558c:	d0f9      	beq.n	8005582 <__sflush_r+0x1a>
 800558e:	2300      	movs	r3, #0
 8005590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005594:	682f      	ldr	r7, [r5, #0]
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	d032      	beq.n	8005600 <__sflush_r+0x98>
 800559a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	075a      	lsls	r2, r3, #29
 80055a0:	d505      	bpl.n	80055ae <__sflush_r+0x46>
 80055a2:	6863      	ldr	r3, [r4, #4]
 80055a4:	1ac0      	subs	r0, r0, r3
 80055a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055a8:	b10b      	cbz	r3, 80055ae <__sflush_r+0x46>
 80055aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055ac:	1ac0      	subs	r0, r0, r3
 80055ae:	2300      	movs	r3, #0
 80055b0:	4602      	mov	r2, r0
 80055b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055b4:	6a21      	ldr	r1, [r4, #32]
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b0      	blx	r6
 80055ba:	1c43      	adds	r3, r0, #1
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	d106      	bne.n	80055ce <__sflush_r+0x66>
 80055c0:	6829      	ldr	r1, [r5, #0]
 80055c2:	291d      	cmp	r1, #29
 80055c4:	d82c      	bhi.n	8005620 <__sflush_r+0xb8>
 80055c6:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <__sflush_r+0x108>)
 80055c8:	40ca      	lsrs	r2, r1
 80055ca:	07d6      	lsls	r6, r2, #31
 80055cc:	d528      	bpl.n	8005620 <__sflush_r+0xb8>
 80055ce:	2200      	movs	r2, #0
 80055d0:	6062      	str	r2, [r4, #4]
 80055d2:	04d9      	lsls	r1, r3, #19
 80055d4:	6922      	ldr	r2, [r4, #16]
 80055d6:	6022      	str	r2, [r4, #0]
 80055d8:	d504      	bpl.n	80055e4 <__sflush_r+0x7c>
 80055da:	1c42      	adds	r2, r0, #1
 80055dc:	d101      	bne.n	80055e2 <__sflush_r+0x7a>
 80055de:	682b      	ldr	r3, [r5, #0]
 80055e0:	b903      	cbnz	r3, 80055e4 <__sflush_r+0x7c>
 80055e2:	6560      	str	r0, [r4, #84]	; 0x54
 80055e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055e6:	602f      	str	r7, [r5, #0]
 80055e8:	2900      	cmp	r1, #0
 80055ea:	d0ca      	beq.n	8005582 <__sflush_r+0x1a>
 80055ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055f0:	4299      	cmp	r1, r3
 80055f2:	d002      	beq.n	80055fa <__sflush_r+0x92>
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 f9d7 	bl	80059a8 <_free_r>
 80055fa:	2000      	movs	r0, #0
 80055fc:	6360      	str	r0, [r4, #52]	; 0x34
 80055fe:	e7c1      	b.n	8005584 <__sflush_r+0x1c>
 8005600:	6a21      	ldr	r1, [r4, #32]
 8005602:	2301      	movs	r3, #1
 8005604:	4628      	mov	r0, r5
 8005606:	47b0      	blx	r6
 8005608:	1c41      	adds	r1, r0, #1
 800560a:	d1c7      	bne.n	800559c <__sflush_r+0x34>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0c4      	beq.n	800559c <__sflush_r+0x34>
 8005612:	2b1d      	cmp	r3, #29
 8005614:	d001      	beq.n	800561a <__sflush_r+0xb2>
 8005616:	2b16      	cmp	r3, #22
 8005618:	d101      	bne.n	800561e <__sflush_r+0xb6>
 800561a:	602f      	str	r7, [r5, #0]
 800561c:	e7b1      	b.n	8005582 <__sflush_r+0x1a>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	e7ad      	b.n	8005584 <__sflush_r+0x1c>
 8005628:	690f      	ldr	r7, [r1, #16]
 800562a:	2f00      	cmp	r7, #0
 800562c:	d0a9      	beq.n	8005582 <__sflush_r+0x1a>
 800562e:	0793      	lsls	r3, r2, #30
 8005630:	680e      	ldr	r6, [r1, #0]
 8005632:	bf08      	it	eq
 8005634:	694b      	ldreq	r3, [r1, #20]
 8005636:	600f      	str	r7, [r1, #0]
 8005638:	bf18      	it	ne
 800563a:	2300      	movne	r3, #0
 800563c:	eba6 0807 	sub.w	r8, r6, r7
 8005640:	608b      	str	r3, [r1, #8]
 8005642:	f1b8 0f00 	cmp.w	r8, #0
 8005646:	dd9c      	ble.n	8005582 <__sflush_r+0x1a>
 8005648:	6a21      	ldr	r1, [r4, #32]
 800564a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800564c:	4643      	mov	r3, r8
 800564e:	463a      	mov	r2, r7
 8005650:	4628      	mov	r0, r5
 8005652:	47b0      	blx	r6
 8005654:	2800      	cmp	r0, #0
 8005656:	dc06      	bgt.n	8005666 <__sflush_r+0xfe>
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800565e:	81a3      	strh	r3, [r4, #12]
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	e78e      	b.n	8005584 <__sflush_r+0x1c>
 8005666:	4407      	add	r7, r0
 8005668:	eba8 0800 	sub.w	r8, r8, r0
 800566c:	e7e9      	b.n	8005642 <__sflush_r+0xda>
 800566e:	bf00      	nop
 8005670:	20400001 	.word	0x20400001

08005674 <_fflush_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	690b      	ldr	r3, [r1, #16]
 8005678:	4605      	mov	r5, r0
 800567a:	460c      	mov	r4, r1
 800567c:	b913      	cbnz	r3, 8005684 <_fflush_r+0x10>
 800567e:	2500      	movs	r5, #0
 8005680:	4628      	mov	r0, r5
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	b118      	cbz	r0, 800568e <_fflush_r+0x1a>
 8005686:	6983      	ldr	r3, [r0, #24]
 8005688:	b90b      	cbnz	r3, 800568e <_fflush_r+0x1a>
 800568a:	f000 f887 	bl	800579c <__sinit>
 800568e:	4b14      	ldr	r3, [pc, #80]	; (80056e0 <_fflush_r+0x6c>)
 8005690:	429c      	cmp	r4, r3
 8005692:	d11b      	bne.n	80056cc <_fflush_r+0x58>
 8005694:	686c      	ldr	r4, [r5, #4]
 8005696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0ef      	beq.n	800567e <_fflush_r+0xa>
 800569e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056a0:	07d0      	lsls	r0, r2, #31
 80056a2:	d404      	bmi.n	80056ae <_fflush_r+0x3a>
 80056a4:	0599      	lsls	r1, r3, #22
 80056a6:	d402      	bmi.n	80056ae <_fflush_r+0x3a>
 80056a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056aa:	f000 f915 	bl	80058d8 <__retarget_lock_acquire_recursive>
 80056ae:	4628      	mov	r0, r5
 80056b0:	4621      	mov	r1, r4
 80056b2:	f7ff ff59 	bl	8005568 <__sflush_r>
 80056b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056b8:	07da      	lsls	r2, r3, #31
 80056ba:	4605      	mov	r5, r0
 80056bc:	d4e0      	bmi.n	8005680 <_fflush_r+0xc>
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	059b      	lsls	r3, r3, #22
 80056c2:	d4dd      	bmi.n	8005680 <_fflush_r+0xc>
 80056c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056c6:	f000 f908 	bl	80058da <__retarget_lock_release_recursive>
 80056ca:	e7d9      	b.n	8005680 <_fflush_r+0xc>
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <_fflush_r+0x70>)
 80056ce:	429c      	cmp	r4, r3
 80056d0:	d101      	bne.n	80056d6 <_fflush_r+0x62>
 80056d2:	68ac      	ldr	r4, [r5, #8]
 80056d4:	e7df      	b.n	8005696 <_fflush_r+0x22>
 80056d6:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <_fflush_r+0x74>)
 80056d8:	429c      	cmp	r4, r3
 80056da:	bf08      	it	eq
 80056dc:	68ec      	ldreq	r4, [r5, #12]
 80056de:	e7da      	b.n	8005696 <_fflush_r+0x22>
 80056e0:	08005e0c 	.word	0x08005e0c
 80056e4:	08005e2c 	.word	0x08005e2c
 80056e8:	08005dec 	.word	0x08005dec

080056ec <std>:
 80056ec:	2300      	movs	r3, #0
 80056ee:	b510      	push	{r4, lr}
 80056f0:	4604      	mov	r4, r0
 80056f2:	e9c0 3300 	strd	r3, r3, [r0]
 80056f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056fa:	6083      	str	r3, [r0, #8]
 80056fc:	8181      	strh	r1, [r0, #12]
 80056fe:	6643      	str	r3, [r0, #100]	; 0x64
 8005700:	81c2      	strh	r2, [r0, #14]
 8005702:	6183      	str	r3, [r0, #24]
 8005704:	4619      	mov	r1, r3
 8005706:	2208      	movs	r2, #8
 8005708:	305c      	adds	r0, #92	; 0x5c
 800570a:	f7ff fdef 	bl	80052ec <memset>
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <std+0x38>)
 8005710:	6263      	str	r3, [r4, #36]	; 0x24
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <std+0x3c>)
 8005714:	62a3      	str	r3, [r4, #40]	; 0x28
 8005716:	4b05      	ldr	r3, [pc, #20]	; (800572c <std+0x40>)
 8005718:	62e3      	str	r3, [r4, #44]	; 0x2c
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <std+0x44>)
 800571c:	6224      	str	r4, [r4, #32]
 800571e:	6323      	str	r3, [r4, #48]	; 0x30
 8005720:	bd10      	pop	{r4, pc}
 8005722:	bf00      	nop
 8005724:	08005b89 	.word	0x08005b89
 8005728:	08005bab 	.word	0x08005bab
 800572c:	08005be3 	.word	0x08005be3
 8005730:	08005c07 	.word	0x08005c07

08005734 <_cleanup_r>:
 8005734:	4901      	ldr	r1, [pc, #4]	; (800573c <_cleanup_r+0x8>)
 8005736:	f000 b8af 	b.w	8005898 <_fwalk_reent>
 800573a:	bf00      	nop
 800573c:	08005675 	.word	0x08005675

08005740 <__sfmoreglue>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	2268      	movs	r2, #104	; 0x68
 8005744:	1e4d      	subs	r5, r1, #1
 8005746:	4355      	muls	r5, r2
 8005748:	460e      	mov	r6, r1
 800574a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800574e:	f000 f997 	bl	8005a80 <_malloc_r>
 8005752:	4604      	mov	r4, r0
 8005754:	b140      	cbz	r0, 8005768 <__sfmoreglue+0x28>
 8005756:	2100      	movs	r1, #0
 8005758:	e9c0 1600 	strd	r1, r6, [r0]
 800575c:	300c      	adds	r0, #12
 800575e:	60a0      	str	r0, [r4, #8]
 8005760:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005764:	f7ff fdc2 	bl	80052ec <memset>
 8005768:	4620      	mov	r0, r4
 800576a:	bd70      	pop	{r4, r5, r6, pc}

0800576c <__sfp_lock_acquire>:
 800576c:	4801      	ldr	r0, [pc, #4]	; (8005774 <__sfp_lock_acquire+0x8>)
 800576e:	f000 b8b3 	b.w	80058d8 <__retarget_lock_acquire_recursive>
 8005772:	bf00      	nop
 8005774:	200016b9 	.word	0x200016b9

08005778 <__sfp_lock_release>:
 8005778:	4801      	ldr	r0, [pc, #4]	; (8005780 <__sfp_lock_release+0x8>)
 800577a:	f000 b8ae 	b.w	80058da <__retarget_lock_release_recursive>
 800577e:	bf00      	nop
 8005780:	200016b9 	.word	0x200016b9

08005784 <__sinit_lock_acquire>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__sinit_lock_acquire+0x8>)
 8005786:	f000 b8a7 	b.w	80058d8 <__retarget_lock_acquire_recursive>
 800578a:	bf00      	nop
 800578c:	200016ba 	.word	0x200016ba

08005790 <__sinit_lock_release>:
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <__sinit_lock_release+0x8>)
 8005792:	f000 b8a2 	b.w	80058da <__retarget_lock_release_recursive>
 8005796:	bf00      	nop
 8005798:	200016ba 	.word	0x200016ba

0800579c <__sinit>:
 800579c:	b510      	push	{r4, lr}
 800579e:	4604      	mov	r4, r0
 80057a0:	f7ff fff0 	bl	8005784 <__sinit_lock_acquire>
 80057a4:	69a3      	ldr	r3, [r4, #24]
 80057a6:	b11b      	cbz	r3, 80057b0 <__sinit+0x14>
 80057a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ac:	f7ff bff0 	b.w	8005790 <__sinit_lock_release>
 80057b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057b4:	6523      	str	r3, [r4, #80]	; 0x50
 80057b6:	4b13      	ldr	r3, [pc, #76]	; (8005804 <__sinit+0x68>)
 80057b8:	4a13      	ldr	r2, [pc, #76]	; (8005808 <__sinit+0x6c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80057be:	42a3      	cmp	r3, r4
 80057c0:	bf04      	itt	eq
 80057c2:	2301      	moveq	r3, #1
 80057c4:	61a3      	streq	r3, [r4, #24]
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 f820 	bl	800580c <__sfp>
 80057cc:	6060      	str	r0, [r4, #4]
 80057ce:	4620      	mov	r0, r4
 80057d0:	f000 f81c 	bl	800580c <__sfp>
 80057d4:	60a0      	str	r0, [r4, #8]
 80057d6:	4620      	mov	r0, r4
 80057d8:	f000 f818 	bl	800580c <__sfp>
 80057dc:	2200      	movs	r2, #0
 80057de:	60e0      	str	r0, [r4, #12]
 80057e0:	2104      	movs	r1, #4
 80057e2:	6860      	ldr	r0, [r4, #4]
 80057e4:	f7ff ff82 	bl	80056ec <std>
 80057e8:	68a0      	ldr	r0, [r4, #8]
 80057ea:	2201      	movs	r2, #1
 80057ec:	2109      	movs	r1, #9
 80057ee:	f7ff ff7d 	bl	80056ec <std>
 80057f2:	68e0      	ldr	r0, [r4, #12]
 80057f4:	2202      	movs	r2, #2
 80057f6:	2112      	movs	r1, #18
 80057f8:	f7ff ff78 	bl	80056ec <std>
 80057fc:	2301      	movs	r3, #1
 80057fe:	61a3      	str	r3, [r4, #24]
 8005800:	e7d2      	b.n	80057a8 <__sinit+0xc>
 8005802:	bf00      	nop
 8005804:	08005de8 	.word	0x08005de8
 8005808:	08005735 	.word	0x08005735

0800580c <__sfp>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	4607      	mov	r7, r0
 8005810:	f7ff ffac 	bl	800576c <__sfp_lock_acquire>
 8005814:	4b1e      	ldr	r3, [pc, #120]	; (8005890 <__sfp+0x84>)
 8005816:	681e      	ldr	r6, [r3, #0]
 8005818:	69b3      	ldr	r3, [r6, #24]
 800581a:	b913      	cbnz	r3, 8005822 <__sfp+0x16>
 800581c:	4630      	mov	r0, r6
 800581e:	f7ff ffbd 	bl	800579c <__sinit>
 8005822:	3648      	adds	r6, #72	; 0x48
 8005824:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005828:	3b01      	subs	r3, #1
 800582a:	d503      	bpl.n	8005834 <__sfp+0x28>
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	b30b      	cbz	r3, 8005874 <__sfp+0x68>
 8005830:	6836      	ldr	r6, [r6, #0]
 8005832:	e7f7      	b.n	8005824 <__sfp+0x18>
 8005834:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005838:	b9d5      	cbnz	r5, 8005870 <__sfp+0x64>
 800583a:	4b16      	ldr	r3, [pc, #88]	; (8005894 <__sfp+0x88>)
 800583c:	60e3      	str	r3, [r4, #12]
 800583e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005842:	6665      	str	r5, [r4, #100]	; 0x64
 8005844:	f000 f847 	bl	80058d6 <__retarget_lock_init_recursive>
 8005848:	f7ff ff96 	bl	8005778 <__sfp_lock_release>
 800584c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005850:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005854:	6025      	str	r5, [r4, #0]
 8005856:	61a5      	str	r5, [r4, #24]
 8005858:	2208      	movs	r2, #8
 800585a:	4629      	mov	r1, r5
 800585c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005860:	f7ff fd44 	bl	80052ec <memset>
 8005864:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005868:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800586c:	4620      	mov	r0, r4
 800586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005870:	3468      	adds	r4, #104	; 0x68
 8005872:	e7d9      	b.n	8005828 <__sfp+0x1c>
 8005874:	2104      	movs	r1, #4
 8005876:	4638      	mov	r0, r7
 8005878:	f7ff ff62 	bl	8005740 <__sfmoreglue>
 800587c:	4604      	mov	r4, r0
 800587e:	6030      	str	r0, [r6, #0]
 8005880:	2800      	cmp	r0, #0
 8005882:	d1d5      	bne.n	8005830 <__sfp+0x24>
 8005884:	f7ff ff78 	bl	8005778 <__sfp_lock_release>
 8005888:	230c      	movs	r3, #12
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	e7ee      	b.n	800586c <__sfp+0x60>
 800588e:	bf00      	nop
 8005890:	08005de8 	.word	0x08005de8
 8005894:	ffff0001 	.word	0xffff0001

08005898 <_fwalk_reent>:
 8005898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800589c:	4606      	mov	r6, r0
 800589e:	4688      	mov	r8, r1
 80058a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058a4:	2700      	movs	r7, #0
 80058a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058aa:	f1b9 0901 	subs.w	r9, r9, #1
 80058ae:	d505      	bpl.n	80058bc <_fwalk_reent+0x24>
 80058b0:	6824      	ldr	r4, [r4, #0]
 80058b2:	2c00      	cmp	r4, #0
 80058b4:	d1f7      	bne.n	80058a6 <_fwalk_reent+0xe>
 80058b6:	4638      	mov	r0, r7
 80058b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058bc:	89ab      	ldrh	r3, [r5, #12]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d907      	bls.n	80058d2 <_fwalk_reent+0x3a>
 80058c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058c6:	3301      	adds	r3, #1
 80058c8:	d003      	beq.n	80058d2 <_fwalk_reent+0x3a>
 80058ca:	4629      	mov	r1, r5
 80058cc:	4630      	mov	r0, r6
 80058ce:	47c0      	blx	r8
 80058d0:	4307      	orrs	r7, r0
 80058d2:	3568      	adds	r5, #104	; 0x68
 80058d4:	e7e9      	b.n	80058aa <_fwalk_reent+0x12>

080058d6 <__retarget_lock_init_recursive>:
 80058d6:	4770      	bx	lr

080058d8 <__retarget_lock_acquire_recursive>:
 80058d8:	4770      	bx	lr

080058da <__retarget_lock_release_recursive>:
 80058da:	4770      	bx	lr

080058dc <__swhatbuf_r>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	460e      	mov	r6, r1
 80058e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e4:	2900      	cmp	r1, #0
 80058e6:	b096      	sub	sp, #88	; 0x58
 80058e8:	4614      	mov	r4, r2
 80058ea:	461d      	mov	r5, r3
 80058ec:	da08      	bge.n	8005900 <__swhatbuf_r+0x24>
 80058ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	602a      	str	r2, [r5, #0]
 80058f6:	061a      	lsls	r2, r3, #24
 80058f8:	d410      	bmi.n	800591c <__swhatbuf_r+0x40>
 80058fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058fe:	e00e      	b.n	800591e <__swhatbuf_r+0x42>
 8005900:	466a      	mov	r2, sp
 8005902:	f000 f9a7 	bl	8005c54 <_fstat_r>
 8005906:	2800      	cmp	r0, #0
 8005908:	dbf1      	blt.n	80058ee <__swhatbuf_r+0x12>
 800590a:	9a01      	ldr	r2, [sp, #4]
 800590c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005910:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005914:	425a      	negs	r2, r3
 8005916:	415a      	adcs	r2, r3
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	e7ee      	b.n	80058fa <__swhatbuf_r+0x1e>
 800591c:	2340      	movs	r3, #64	; 0x40
 800591e:	2000      	movs	r0, #0
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	b016      	add	sp, #88	; 0x58
 8005924:	bd70      	pop	{r4, r5, r6, pc}
	...

08005928 <__smakebuf_r>:
 8005928:	898b      	ldrh	r3, [r1, #12]
 800592a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800592c:	079d      	lsls	r5, r3, #30
 800592e:	4606      	mov	r6, r0
 8005930:	460c      	mov	r4, r1
 8005932:	d507      	bpl.n	8005944 <__smakebuf_r+0x1c>
 8005934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	2301      	movs	r3, #1
 800593e:	6163      	str	r3, [r4, #20]
 8005940:	b002      	add	sp, #8
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	ab01      	add	r3, sp, #4
 8005946:	466a      	mov	r2, sp
 8005948:	f7ff ffc8 	bl	80058dc <__swhatbuf_r>
 800594c:	9900      	ldr	r1, [sp, #0]
 800594e:	4605      	mov	r5, r0
 8005950:	4630      	mov	r0, r6
 8005952:	f000 f895 	bl	8005a80 <_malloc_r>
 8005956:	b948      	cbnz	r0, 800596c <__smakebuf_r+0x44>
 8005958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800595c:	059a      	lsls	r2, r3, #22
 800595e:	d4ef      	bmi.n	8005940 <__smakebuf_r+0x18>
 8005960:	f023 0303 	bic.w	r3, r3, #3
 8005964:	f043 0302 	orr.w	r3, r3, #2
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	e7e3      	b.n	8005934 <__smakebuf_r+0xc>
 800596c:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <__smakebuf_r+0x7c>)
 800596e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	6020      	str	r0, [r4, #0]
 8005974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	9b00      	ldr	r3, [sp, #0]
 800597c:	6163      	str	r3, [r4, #20]
 800597e:	9b01      	ldr	r3, [sp, #4]
 8005980:	6120      	str	r0, [r4, #16]
 8005982:	b15b      	cbz	r3, 800599c <__smakebuf_r+0x74>
 8005984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005988:	4630      	mov	r0, r6
 800598a:	f000 f975 	bl	8005c78 <_isatty_r>
 800598e:	b128      	cbz	r0, 800599c <__smakebuf_r+0x74>
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	81a3      	strh	r3, [r4, #12]
 800599c:	89a0      	ldrh	r0, [r4, #12]
 800599e:	4305      	orrs	r5, r0
 80059a0:	81a5      	strh	r5, [r4, #12]
 80059a2:	e7cd      	b.n	8005940 <__smakebuf_r+0x18>
 80059a4:	08005735 	.word	0x08005735

080059a8 <_free_r>:
 80059a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059aa:	2900      	cmp	r1, #0
 80059ac:	d044      	beq.n	8005a38 <_free_r+0x90>
 80059ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059b2:	9001      	str	r0, [sp, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f1a1 0404 	sub.w	r4, r1, #4
 80059ba:	bfb8      	it	lt
 80059bc:	18e4      	addlt	r4, r4, r3
 80059be:	f000 f97d 	bl	8005cbc <__malloc_lock>
 80059c2:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <_free_r+0x94>)
 80059c4:	9801      	ldr	r0, [sp, #4]
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	b933      	cbnz	r3, 80059d8 <_free_r+0x30>
 80059ca:	6063      	str	r3, [r4, #4]
 80059cc:	6014      	str	r4, [r2, #0]
 80059ce:	b003      	add	sp, #12
 80059d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059d4:	f000 b978 	b.w	8005cc8 <__malloc_unlock>
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d908      	bls.n	80059ee <_free_r+0x46>
 80059dc:	6825      	ldr	r5, [r4, #0]
 80059de:	1961      	adds	r1, r4, r5
 80059e0:	428b      	cmp	r3, r1
 80059e2:	bf01      	itttt	eq
 80059e4:	6819      	ldreq	r1, [r3, #0]
 80059e6:	685b      	ldreq	r3, [r3, #4]
 80059e8:	1949      	addeq	r1, r1, r5
 80059ea:	6021      	streq	r1, [r4, #0]
 80059ec:	e7ed      	b.n	80059ca <_free_r+0x22>
 80059ee:	461a      	mov	r2, r3
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b10b      	cbz	r3, 80059f8 <_free_r+0x50>
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d9fa      	bls.n	80059ee <_free_r+0x46>
 80059f8:	6811      	ldr	r1, [r2, #0]
 80059fa:	1855      	adds	r5, r2, r1
 80059fc:	42a5      	cmp	r5, r4
 80059fe:	d10b      	bne.n	8005a18 <_free_r+0x70>
 8005a00:	6824      	ldr	r4, [r4, #0]
 8005a02:	4421      	add	r1, r4
 8005a04:	1854      	adds	r4, r2, r1
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	6011      	str	r1, [r2, #0]
 8005a0a:	d1e0      	bne.n	80059ce <_free_r+0x26>
 8005a0c:	681c      	ldr	r4, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	6053      	str	r3, [r2, #4]
 8005a12:	4421      	add	r1, r4
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	e7da      	b.n	80059ce <_free_r+0x26>
 8005a18:	d902      	bls.n	8005a20 <_free_r+0x78>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	6003      	str	r3, [r0, #0]
 8005a1e:	e7d6      	b.n	80059ce <_free_r+0x26>
 8005a20:	6825      	ldr	r5, [r4, #0]
 8005a22:	1961      	adds	r1, r4, r5
 8005a24:	428b      	cmp	r3, r1
 8005a26:	bf04      	itt	eq
 8005a28:	6819      	ldreq	r1, [r3, #0]
 8005a2a:	685b      	ldreq	r3, [r3, #4]
 8005a2c:	6063      	str	r3, [r4, #4]
 8005a2e:	bf04      	itt	eq
 8005a30:	1949      	addeq	r1, r1, r5
 8005a32:	6021      	streq	r1, [r4, #0]
 8005a34:	6054      	str	r4, [r2, #4]
 8005a36:	e7ca      	b.n	80059ce <_free_r+0x26>
 8005a38:	b003      	add	sp, #12
 8005a3a:	bd30      	pop	{r4, r5, pc}
 8005a3c:	200016bc 	.word	0x200016bc

08005a40 <sbrk_aligned>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	4e0e      	ldr	r6, [pc, #56]	; (8005a7c <sbrk_aligned+0x3c>)
 8005a44:	460c      	mov	r4, r1
 8005a46:	6831      	ldr	r1, [r6, #0]
 8005a48:	4605      	mov	r5, r0
 8005a4a:	b911      	cbnz	r1, 8005a52 <sbrk_aligned+0x12>
 8005a4c:	f000 f88c 	bl	8005b68 <_sbrk_r>
 8005a50:	6030      	str	r0, [r6, #0]
 8005a52:	4621      	mov	r1, r4
 8005a54:	4628      	mov	r0, r5
 8005a56:	f000 f887 	bl	8005b68 <_sbrk_r>
 8005a5a:	1c43      	adds	r3, r0, #1
 8005a5c:	d00a      	beq.n	8005a74 <sbrk_aligned+0x34>
 8005a5e:	1cc4      	adds	r4, r0, #3
 8005a60:	f024 0403 	bic.w	r4, r4, #3
 8005a64:	42a0      	cmp	r0, r4
 8005a66:	d007      	beq.n	8005a78 <sbrk_aligned+0x38>
 8005a68:	1a21      	subs	r1, r4, r0
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 f87c 	bl	8005b68 <_sbrk_r>
 8005a70:	3001      	adds	r0, #1
 8005a72:	d101      	bne.n	8005a78 <sbrk_aligned+0x38>
 8005a74:	f04f 34ff 	mov.w	r4, #4294967295
 8005a78:	4620      	mov	r0, r4
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	200016c0 	.word	0x200016c0

08005a80 <_malloc_r>:
 8005a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a84:	1ccd      	adds	r5, r1, #3
 8005a86:	f025 0503 	bic.w	r5, r5, #3
 8005a8a:	3508      	adds	r5, #8
 8005a8c:	2d0c      	cmp	r5, #12
 8005a8e:	bf38      	it	cc
 8005a90:	250c      	movcc	r5, #12
 8005a92:	2d00      	cmp	r5, #0
 8005a94:	4607      	mov	r7, r0
 8005a96:	db01      	blt.n	8005a9c <_malloc_r+0x1c>
 8005a98:	42a9      	cmp	r1, r5
 8005a9a:	d905      	bls.n	8005aa8 <_malloc_r+0x28>
 8005a9c:	230c      	movs	r3, #12
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa8:	4e2e      	ldr	r6, [pc, #184]	; (8005b64 <_malloc_r+0xe4>)
 8005aaa:	f000 f907 	bl	8005cbc <__malloc_lock>
 8005aae:	6833      	ldr	r3, [r6, #0]
 8005ab0:	461c      	mov	r4, r3
 8005ab2:	bb34      	cbnz	r4, 8005b02 <_malloc_r+0x82>
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f7ff ffc2 	bl	8005a40 <sbrk_aligned>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	4604      	mov	r4, r0
 8005ac0:	d14d      	bne.n	8005b5e <_malloc_r+0xde>
 8005ac2:	6834      	ldr	r4, [r6, #0]
 8005ac4:	4626      	mov	r6, r4
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	d140      	bne.n	8005b4c <_malloc_r+0xcc>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	4631      	mov	r1, r6
 8005ace:	4638      	mov	r0, r7
 8005ad0:	eb04 0803 	add.w	r8, r4, r3
 8005ad4:	f000 f848 	bl	8005b68 <_sbrk_r>
 8005ad8:	4580      	cmp	r8, r0
 8005ada:	d13a      	bne.n	8005b52 <_malloc_r+0xd2>
 8005adc:	6821      	ldr	r1, [r4, #0]
 8005ade:	3503      	adds	r5, #3
 8005ae0:	1a6d      	subs	r5, r5, r1
 8005ae2:	f025 0503 	bic.w	r5, r5, #3
 8005ae6:	3508      	adds	r5, #8
 8005ae8:	2d0c      	cmp	r5, #12
 8005aea:	bf38      	it	cc
 8005aec:	250c      	movcc	r5, #12
 8005aee:	4629      	mov	r1, r5
 8005af0:	4638      	mov	r0, r7
 8005af2:	f7ff ffa5 	bl	8005a40 <sbrk_aligned>
 8005af6:	3001      	adds	r0, #1
 8005af8:	d02b      	beq.n	8005b52 <_malloc_r+0xd2>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	442b      	add	r3, r5
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	e00e      	b.n	8005b20 <_malloc_r+0xa0>
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	1b52      	subs	r2, r2, r5
 8005b06:	d41e      	bmi.n	8005b46 <_malloc_r+0xc6>
 8005b08:	2a0b      	cmp	r2, #11
 8005b0a:	d916      	bls.n	8005b3a <_malloc_r+0xba>
 8005b0c:	1961      	adds	r1, r4, r5
 8005b0e:	42a3      	cmp	r3, r4
 8005b10:	6025      	str	r5, [r4, #0]
 8005b12:	bf18      	it	ne
 8005b14:	6059      	strne	r1, [r3, #4]
 8005b16:	6863      	ldr	r3, [r4, #4]
 8005b18:	bf08      	it	eq
 8005b1a:	6031      	streq	r1, [r6, #0]
 8005b1c:	5162      	str	r2, [r4, r5]
 8005b1e:	604b      	str	r3, [r1, #4]
 8005b20:	4638      	mov	r0, r7
 8005b22:	f104 060b 	add.w	r6, r4, #11
 8005b26:	f000 f8cf 	bl	8005cc8 <__malloc_unlock>
 8005b2a:	f026 0607 	bic.w	r6, r6, #7
 8005b2e:	1d23      	adds	r3, r4, #4
 8005b30:	1af2      	subs	r2, r6, r3
 8005b32:	d0b6      	beq.n	8005aa2 <_malloc_r+0x22>
 8005b34:	1b9b      	subs	r3, r3, r6
 8005b36:	50a3      	str	r3, [r4, r2]
 8005b38:	e7b3      	b.n	8005aa2 <_malloc_r+0x22>
 8005b3a:	6862      	ldr	r2, [r4, #4]
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	bf0c      	ite	eq
 8005b40:	6032      	streq	r2, [r6, #0]
 8005b42:	605a      	strne	r2, [r3, #4]
 8005b44:	e7ec      	b.n	8005b20 <_malloc_r+0xa0>
 8005b46:	4623      	mov	r3, r4
 8005b48:	6864      	ldr	r4, [r4, #4]
 8005b4a:	e7b2      	b.n	8005ab2 <_malloc_r+0x32>
 8005b4c:	4634      	mov	r4, r6
 8005b4e:	6876      	ldr	r6, [r6, #4]
 8005b50:	e7b9      	b.n	8005ac6 <_malloc_r+0x46>
 8005b52:	230c      	movs	r3, #12
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	4638      	mov	r0, r7
 8005b58:	f000 f8b6 	bl	8005cc8 <__malloc_unlock>
 8005b5c:	e7a1      	b.n	8005aa2 <_malloc_r+0x22>
 8005b5e:	6025      	str	r5, [r4, #0]
 8005b60:	e7de      	b.n	8005b20 <_malloc_r+0xa0>
 8005b62:	bf00      	nop
 8005b64:	200016bc 	.word	0x200016bc

08005b68 <_sbrk_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d06      	ldr	r5, [pc, #24]	; (8005b84 <_sbrk_r+0x1c>)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	f000 f8c0 	bl	8005cf8 <_sbrk>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_sbrk_r+0x1a>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_sbrk_r+0x1a>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	200016c4 	.word	0x200016c4

08005b88 <__sread>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b90:	f000 f8a0 	bl	8005cd4 <_read_r>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	bfab      	itete	ge
 8005b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b9c:	181b      	addge	r3, r3, r0
 8005b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ba2:	bfac      	ite	ge
 8005ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ba6:	81a3      	strhlt	r3, [r4, #12]
 8005ba8:	bd10      	pop	{r4, pc}

08005baa <__swrite>:
 8005baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bae:	461f      	mov	r7, r3
 8005bb0:	898b      	ldrh	r3, [r1, #12]
 8005bb2:	05db      	lsls	r3, r3, #23
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	4616      	mov	r6, r2
 8005bba:	d505      	bpl.n	8005bc8 <__swrite+0x1e>
 8005bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f000 f868 	bl	8005c98 <_lseek_r>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	4632      	mov	r2, r6
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	4628      	mov	r0, r5
 8005bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bde:	f000 b817 	b.w	8005c10 <_write_r>

08005be2 <__sseek>:
 8005be2:	b510      	push	{r4, lr}
 8005be4:	460c      	mov	r4, r1
 8005be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bea:	f000 f855 	bl	8005c98 <_lseek_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	bf15      	itete	ne
 8005bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bfe:	81a3      	strheq	r3, [r4, #12]
 8005c00:	bf18      	it	ne
 8005c02:	81a3      	strhne	r3, [r4, #12]
 8005c04:	bd10      	pop	{r4, pc}

08005c06 <__sclose>:
 8005c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0a:	f000 b813 	b.w	8005c34 <_close_r>
	...

08005c10 <_write_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	; (8005c30 <_write_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fa fcfd 	bl	800061e <_write>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_write_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_write_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	200016c4 	.word	0x200016c4

08005c34 <_close_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	; (8005c50 <_close_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fa fd09 	bl	8000656 <_close>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_close_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_close_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	200016c4 	.word	0x200016c4

08005c54 <_fstat_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4d07      	ldr	r5, [pc, #28]	; (8005c74 <_fstat_r+0x20>)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	4611      	mov	r1, r2
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	f7fa fd04 	bl	800066e <_fstat>
 8005c66:	1c43      	adds	r3, r0, #1
 8005c68:	d102      	bne.n	8005c70 <_fstat_r+0x1c>
 8005c6a:	682b      	ldr	r3, [r5, #0]
 8005c6c:	b103      	cbz	r3, 8005c70 <_fstat_r+0x1c>
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	bf00      	nop
 8005c74:	200016c4 	.word	0x200016c4

08005c78 <_isatty_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4d06      	ldr	r5, [pc, #24]	; (8005c94 <_isatty_r+0x1c>)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4604      	mov	r4, r0
 8005c80:	4608      	mov	r0, r1
 8005c82:	602b      	str	r3, [r5, #0]
 8005c84:	f7fa fd03 	bl	800068e <_isatty>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d102      	bne.n	8005c92 <_isatty_r+0x1a>
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	b103      	cbz	r3, 8005c92 <_isatty_r+0x1a>
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	bd38      	pop	{r3, r4, r5, pc}
 8005c94:	200016c4 	.word	0x200016c4

08005c98 <_lseek_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4d07      	ldr	r5, [pc, #28]	; (8005cb8 <_lseek_r+0x20>)
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	602a      	str	r2, [r5, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f7fa fcfc 	bl	80006a4 <_lseek>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_lseek_r+0x1e>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_lseek_r+0x1e>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	200016c4 	.word	0x200016c4

08005cbc <__malloc_lock>:
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <__malloc_lock+0x8>)
 8005cbe:	f7ff be0b 	b.w	80058d8 <__retarget_lock_acquire_recursive>
 8005cc2:	bf00      	nop
 8005cc4:	200016b8 	.word	0x200016b8

08005cc8 <__malloc_unlock>:
 8005cc8:	4801      	ldr	r0, [pc, #4]	; (8005cd0 <__malloc_unlock+0x8>)
 8005cca:	f7ff be06 	b.w	80058da <__retarget_lock_release_recursive>
 8005cce:	bf00      	nop
 8005cd0:	200016b8 	.word	0x200016b8

08005cd4 <_read_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d07      	ldr	r5, [pc, #28]	; (8005cf4 <_read_r+0x20>)
 8005cd8:	4604      	mov	r4, r0
 8005cda:	4608      	mov	r0, r1
 8005cdc:	4611      	mov	r1, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f7fa fc7e 	bl	80005e4 <_read>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_read_r+0x1e>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_read_r+0x1e>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	200016c4 	.word	0x200016c4

08005cf8 <_sbrk>:
 8005cf8:	4a04      	ldr	r2, [pc, #16]	; (8005d0c <_sbrk+0x14>)
 8005cfa:	6811      	ldr	r1, [r2, #0]
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	b909      	cbnz	r1, 8005d04 <_sbrk+0xc>
 8005d00:	4903      	ldr	r1, [pc, #12]	; (8005d10 <_sbrk+0x18>)
 8005d02:	6011      	str	r1, [r2, #0]
 8005d04:	6810      	ldr	r0, [r2, #0]
 8005d06:	4403      	add	r3, r0
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	4770      	bx	lr
 8005d0c:	200016c8 	.word	0x200016c8
 8005d10:	200016d0 	.word	0x200016d0

08005d14 <_init>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr

08005d20 <_fini>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr
