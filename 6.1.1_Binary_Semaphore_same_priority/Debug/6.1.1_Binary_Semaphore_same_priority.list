
6.1.1_Binary_Semaphore_same_priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005ccc  08005ccc  00015ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dc8  08005dc8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005dc8  08005dc8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dc8  08005dc8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001654  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200016cc  200016cc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4e6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002688  00000000  00000000  0002f58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00031c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  00032b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a5a  00000000  00000000  00033920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f08  00000000  00000000  0005537a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8d86  00000000  00000000  00066282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f008  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044d8  00000000  00000000  0012f058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cb4 	.word	0x08005cb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005cb4 	.word	0x08005cb4

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 fab1 	bl	800073c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f833 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f873 	bl	80002c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  xBinarySemaphore = xSemaphoreCreateBinary();
 80001e2:	2203      	movs	r2, #3
 80001e4:	2100      	movs	r1, #0
 80001e6:	2001      	movs	r0, #1
 80001e8:	f002 fb86 	bl	80028f8 <xQueueGenericCreate>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a10      	ldr	r2, [pc, #64]	; (8000230 <main+0x60>)
 80001f0:	6013      	str	r3, [r2, #0]
  xTaskCreate(FirstTask, "Task-1",200,NULL,2,NULL);
 80001f2:	2300      	movs	r3, #0
 80001f4:	9301      	str	r3, [sp, #4]
 80001f6:	2302      	movs	r3, #2
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	2300      	movs	r3, #0
 80001fc:	22c8      	movs	r2, #200	; 0xc8
 80001fe:	490d      	ldr	r1, [pc, #52]	; (8000234 <main+0x64>)
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <main+0x68>)
 8000202:	f003 f915 	bl	8003430 <xTaskCreate>
  xTaskCreate(SecondTask, "Task-2", 200,NULL,2,NULL);
 8000206:	2300      	movs	r3, #0
 8000208:	9301      	str	r3, [sp, #4]
 800020a:	2302      	movs	r3, #2
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2300      	movs	r3, #0
 8000210:	22c8      	movs	r2, #200	; 0xc8
 8000212:	490a      	ldr	r1, [pc, #40]	; (800023c <main+0x6c>)
 8000214:	480a      	ldr	r0, [pc, #40]	; (8000240 <main+0x70>)
 8000216:	f003 f90b 	bl	8003430 <xTaskCreate>
  xSemaphoreGive(xBinarySemaphore);
 800021a:	4b05      	ldr	r3, [pc, #20]	; (8000230 <main+0x60>)
 800021c:	6818      	ldr	r0, [r3, #0]
 800021e:	2300      	movs	r3, #0
 8000220:	2200      	movs	r2, #0
 8000222:	2100      	movs	r1, #0
 8000224:	f002 fbea 	bl	80029fc <xQueueGenericSend>
  vTaskStartScheduler();
 8000228:	f003 fa7c 	bl	8003724 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	e7fe      	b.n	800022c <main+0x5c>
 800022e:	bf00      	nop
 8000230:	20000094 	.word	0x20000094
 8000234:	08005ccc 	.word	0x08005ccc
 8000238:	080003b9 	.word	0x080003b9
 800023c:	08005cd4 	.word	0x08005cd4
 8000240:	080003f5 	.word	0x080003f5

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f005 f81a 	bl	800528c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fcfb 	bl	8000c80 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000290:	f000 f8e0 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fd24 	bl	8001cfc <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ba:	f000 f8cb 	bl	8000454 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002de:	4b34      	ldr	r3, [pc, #208]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a33      	ldr	r2, [pc, #204]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b31      	ldr	r3, [pc, #196]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002f6:	4b2e      	ldr	r3, [pc, #184]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a2d      	ldr	r2, [pc, #180]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b2b      	ldr	r3, [pc, #172]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a27      	ldr	r2, [pc, #156]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <MX_GPIO_Init+0xe8>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a21      	ldr	r2, [pc, #132]	; (80003b0 <MX_GPIO_Init+0xe8>)
 800032c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2120      	movs	r1, #32
 8000342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000346:	f000 fc83 	bl	8000c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800034a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800034e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000350:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	4619      	mov	r1, r3
 8000360:	4814      	ldr	r0, [pc, #80]	; (80003b4 <MX_GPIO_Init+0xec>)
 8000362:	f000 fb03 	bl	800096c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000366:	230c      	movs	r3, #12
 8000368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036a:	2302      	movs	r3, #2
 800036c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000372:	2303      	movs	r3, #3
 8000374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000376:	2307      	movs	r3, #7
 8000378:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	4619      	mov	r1, r3
 8000380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000384:	f000 faf2 	bl	800096c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000388:	2320      	movs	r3, #32
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038c:	2301      	movs	r3, #1
 800038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	2300      	movs	r3, #0
 8000396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	4619      	mov	r1, r3
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f000 fae3 	bl	800096c <HAL_GPIO_Init>

}
 80003a6:	bf00      	nop
 80003a8:	3728      	adds	r7, #40	; 0x28
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	48000800 	.word	0x48000800

080003b8 <FirstTask>:
/* USER CODE BEGIN 4 */



void FirstTask (void *p)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		   xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <FirstTask+0x34>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f04f 31ff 	mov.w	r1, #4294967295
 80003c8:	4618      	mov	r0, r3
 80003ca:	f002 fd9f 	bl	8002f0c <xQueueSemaphoreTake>
		   printf("-----Inside FirstTask-----\n");
 80003ce:	4808      	ldr	r0, [pc, #32]	; (80003f0 <FirstTask+0x38>)
 80003d0:	f004 ffd2 	bl	8005378 <puts>

		   xSemaphoreGive(xBinarySemaphore);
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <FirstTask+0x34>)
 80003d6:	6818      	ldr	r0, [r3, #0]
 80003d8:	2300      	movs	r3, #0
 80003da:	2200      	movs	r2, #0
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fb0d 	bl	80029fc <xQueueGenericSend>
		   vTaskDelay(1);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f003 f96a 	bl	80036bc <vTaskDelay>
		   xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80003e8:	e7ea      	b.n	80003c0 <FirstTask+0x8>
 80003ea:	bf00      	nop
 80003ec:	20000094 	.word	0x20000094
 80003f0:	08005cdc 	.word	0x08005cdc

080003f4 <SecondTask>:

	}
}

void SecondTask (void *p)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
	    xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <SecondTask+0x34>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f04f 31ff 	mov.w	r1, #4294967295
 8000404:	4618      	mov	r0, r3
 8000406:	f002 fd81 	bl	8002f0c <xQueueSemaphoreTake>
	    printf("*****Inside SecondTask*****\n");
 800040a:	4808      	ldr	r0, [pc, #32]	; (800042c <SecondTask+0x38>)
 800040c:	f004 ffb4 	bl	8005378 <puts>

	    xSemaphoreGive(xBinarySemaphore);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <SecondTask+0x34>)
 8000412:	6818      	ldr	r0, [r3, #0]
 8000414:	2300      	movs	r3, #0
 8000416:	2200      	movs	r2, #0
 8000418:	2100      	movs	r1, #0
 800041a:	f002 faef 	bl	80029fc <xQueueGenericSend>
	    vTaskDelay(1);
 800041e:	2001      	movs	r0, #1
 8000420:	f003 f94c 	bl	80036bc <vTaskDelay>
	    xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8000424:	e7ea      	b.n	80003fc <SecondTask+0x8>
 8000426:	bf00      	nop
 8000428:	20000094 	.word	0x20000094
 800042c:	08005cf8 	.word	0x08005cf8

08000430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d101      	bne.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000442:	f000 f991 	bl	8000768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40001000 	.word	0x40001000

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <HAL_MspInit+0x44>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <HAL_MspInit+0x44>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HAL_MspInit+0x44>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_MspInit+0x44>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <HAL_MspInit+0x44>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_MspInit+0x44>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08c      	sub	sp, #48	; 0x30
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority ,0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	6879      	ldr	r1, [r7, #4]
 80004bc:	2036      	movs	r0, #54	; 0x36
 80004be:	f000 fa2b 	bl	8000918 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80004c2:	2036      	movs	r0, #54	; 0x36
 80004c4:	f000 fa44 	bl	8000950 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <HAL_InitTick+0xa0>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	4a1e      	ldr	r2, [pc, #120]	; (8000548 <HAL_InitTick+0xa0>)
 80004ce:	f043 0310 	orr.w	r3, r3, #16
 80004d2:	61d3      	str	r3, [r2, #28]
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <HAL_InitTick+0xa0>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	f003 0310 	and.w	r3, r3, #16
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004e0:	f107 0210 	add.w	r2, r7, #16
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fe1a 	bl	8002124 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80004f0:	f001 fdf6 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
 80004f4:	4603      	mov	r3, r0
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004fc:	4a13      	ldr	r2, [pc, #76]	; (800054c <HAL_InitTick+0xa4>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9b      	lsrs	r3, r3, #18
 8000504:	3b01      	subs	r3, #1
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_InitTick+0xa8>)
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <HAL_InitTick+0xac>)
 800050c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <HAL_InitTick+0xa8>)
 8000510:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000514:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0xa8>)
 8000518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800051a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_InitTick+0xa8>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_InitTick+0xa8>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <HAL_InitTick+0xa8>)
 800052a:	f001 fe2d 	bl	8002188 <HAL_TIM_Base_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d104      	bne.n	800053e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <HAL_InitTick+0xa8>)
 8000536:	f001 fe89 	bl	800224c <HAL_TIM_Base_Start_IT>
 800053a:	4603      	mov	r3, r0
 800053c:	e000      	b.n	8000540 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
}
 8000540:	4618      	mov	r0, r3
 8000542:	3730      	adds	r7, #48	; 0x30
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	431bde83 	.word	0x431bde83
 8000550:	20000098 	.word	0x20000098
 8000554:	40001000 	.word	0x40001000

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <TIM6_DAC1_IRQHandler+0x10>)
 800058a:	f001 febb 	bl	8002304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000098 	.word	0x20000098

08000598 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <ITM_SendChar+0x48>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <ITM_SendChar+0x48>)
 80005a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <ITM_SendChar+0x4c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <ITM_SendChar+0x4c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005ba:	bf00      	nop
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f8      	beq.n	80005bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	6013      	str	r3, [r2, #0]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000edfc 	.word	0xe000edfc
 80005e4:	e0000e00 	.word	0xe0000e00

080005e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e00a      	b.n	8000610 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005fa:	f3af 8000 	nop.w
 80005fe:	4601      	mov	r1, r0
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	b2ca      	uxtb	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbf0      	blt.n	80005fa <_read+0x12>
	}

return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	e009      	b.n	8000648 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	60ba      	str	r2, [r7, #8]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffab 	bl	8000598 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	3301      	adds	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	dbf1      	blt.n	8000634 <_write+0x12>
	}
	return len;
 8000650:	687b      	ldr	r3, [r7, #4]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <_close>:

int _close(int file)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
	return -1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000682:	605a      	str	r2, [r3, #4]
	return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_isatty>:

int _isatty(int file)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
	return 1;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	return 0;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <SystemInit+0x20>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <SystemInit+0x20>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000720 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ec:	f7ff ffea 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f2:	490d      	ldr	r1, [pc, #52]	; (8000728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <LoopForever+0xe>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000708:	4c0a      	ldr	r4, [pc, #40]	; (8000734 <LoopForever+0x16>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000716:	f004 fd87 	bl	8005228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071a:	f7ff fd59 	bl	80001d0 <main>

0800071e <LoopForever>:

LoopForever:
    b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000720:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800072c:	08005dd0 	.word	0x08005dd0
  ldr r2, =_sbss
 8000730:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000734:	200016cc 	.word	0x200016cc

08000738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_2_IRQHandler>
	...

0800073c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_Init+0x28>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_Init+0x28>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f8d8 	bl	8000902 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff fea8 	bl	80004a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000758:	f7ff fe82 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40022000 	.word	0x40022000

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008
 800078c:	200000e4 	.word	0x200000e4

08000790 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;  
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200000e4 	.word	0x200000e4

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <__NVIC_EnableIRQ+0x38>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff4c 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800092a:	f7ff ff61 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 800092e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	68b9      	ldr	r1, [r7, #8]
 8000934:	6978      	ldr	r0, [r7, #20]
 8000936:	f7ff ffb1 	bl	800089c <NVIC_EncodePriority>
 800093a:	4602      	mov	r2, r0
 800093c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff80 	bl	8000848 <__NVIC_SetPriority>
}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff54 	bl	800080c <__NVIC_EnableIRQ>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097a:	e14e      	b.n	8000c1a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 8140 	beq.w	8000c14 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0303 	and.w	r3, r3, #3
 800099c:	2b01      	cmp	r3, #1
 800099e:	d005      	beq.n	80009ac <HAL_GPIO_Init+0x40>
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d130      	bne.n	8000a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e2:	2201      	movs	r2, #1
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	f003 0201 	and.w	r2, r3, #1
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d017      	beq.n	8000a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d123      	bne.n	8000a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	08da      	lsrs	r2, r3, #3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3208      	adds	r2, #8
 8000a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	691a      	ldr	r2, [r3, #16]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f003 0307 	and.w	r3, r3, #7
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	08da      	lsrs	r2, r3, #3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3208      	adds	r2, #8
 8000a98:	6939      	ldr	r1, [r7, #16]
 8000a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0203 	and.w	r2, r3, #3
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 809a 	beq.w	8000c14 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae0:	4b55      	ldr	r3, [pc, #340]	; (8000c38 <HAL_GPIO_Init+0x2cc>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a54      	ldr	r2, [pc, #336]	; (8000c38 <HAL_GPIO_Init+0x2cc>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b52      	ldr	r3, [pc, #328]	; (8000c38 <HAL_GPIO_Init+0x2cc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af8:	4a50      	ldr	r2, [pc, #320]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	3302      	adds	r3, #2
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	220f      	movs	r2, #15
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b22:	d013      	beq.n	8000b4c <HAL_GPIO_Init+0x1e0>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a46      	ldr	r2, [pc, #280]	; (8000c40 <HAL_GPIO_Init+0x2d4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d00d      	beq.n	8000b48 <HAL_GPIO_Init+0x1dc>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a45      	ldr	r2, [pc, #276]	; (8000c44 <HAL_GPIO_Init+0x2d8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d007      	beq.n	8000b44 <HAL_GPIO_Init+0x1d8>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a44      	ldr	r2, [pc, #272]	; (8000c48 <HAL_GPIO_Init+0x2dc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d101      	bne.n	8000b40 <HAL_GPIO_Init+0x1d4>
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x1e2>
 8000b40:	2305      	movs	r3, #5
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x1e2>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x1e2>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x1e2>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b5e:	4937      	ldr	r1, [pc, #220]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b6c:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b90:	4a2e      	ldr	r2, [pc, #184]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bba:	4a24      	ldr	r2, [pc, #144]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000be4:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f47f aea9 	bne.w	800097c <HAL_GPIO_Init+0x10>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	48000400 	.word	0x48000400
 8000c44:	48000800 	.word	0x48000800
 8000c48:	48000c00 	.word	0x48000c00
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c60:	787b      	ldrb	r3, [r7, #1]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c6c:	e002      	b.n	8000c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c90:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f001 b823 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 817d 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cbc:	4bbc      	ldr	r3, [pc, #752]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 030c 	and.w	r3, r3, #12
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d00c      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc8:	4bb9      	ldr	r3, [pc, #740]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d15c      	bne.n	8000d8e <HAL_RCC_OscConfig+0x10e>
 8000cd4:	4bb6      	ldr	r3, [pc, #728]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce0:	d155      	bne.n	8000d8e <HAL_RCC_OscConfig+0x10e>
 8000ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cee:	fa93 f3a3 	rbit	r3, r3
 8000cf2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cf6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	095b      	lsrs	r3, r3, #5
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d102      	bne.n	8000d14 <HAL_RCC_OscConfig+0x94>
 8000d0e:	4ba8      	ldr	r3, [pc, #672]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	e015      	b.n	8000d40 <HAL_RCC_OscConfig+0xc0>
 8000d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d18:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d20:	fa93 f3a3 	rbit	r3, r3
 8000d24:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d30:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d3c:	4b9c      	ldr	r3, [pc, #624]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d44:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d48:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d4c:	fa92 f2a2 	rbit	r2, r2
 8000d50:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d54:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	f042 0220 	orr.w	r2, r2, #32
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	f002 021f 	and.w	r2, r2, #31
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 811f 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x334>
 8000d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8116 	bne.w	8000fb4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f000 bfaf 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9e:	d106      	bne.n	8000dae <HAL_RCC_OscConfig+0x12e>
 8000da0:	4b83      	ldr	r3, [pc, #524]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a82      	ldr	r2, [pc, #520]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e036      	b.n	8000e1c <HAL_RCC_OscConfig+0x19c>
 8000dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x158>
 8000dbe:	4b7c      	ldr	r3, [pc, #496]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a7b      	ldr	r2, [pc, #492]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b79      	ldr	r3, [pc, #484]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a78      	ldr	r2, [pc, #480]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e021      	b.n	8000e1c <HAL_RCC_OscConfig+0x19c>
 8000dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ddc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x184>
 8000dea:	4b71      	ldr	r3, [pc, #452]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a70      	ldr	r2, [pc, #448]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b6e      	ldr	r3, [pc, #440]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a6d      	ldr	r2, [pc, #436]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e00b      	b.n	8000e1c <HAL_RCC_OscConfig+0x19c>
 8000e04:	4b6a      	ldr	r3, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a69      	ldr	r2, [pc, #420]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b67      	ldr	r3, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a66      	ldr	r2, [pc, #408]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e1c:	4b64      	ldr	r3, [pc, #400]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	f023 020f 	bic.w	r2, r3, #15
 8000e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	495f      	ldr	r1, [pc, #380]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d059      	beq.n	8000efa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e46:	f7ff fca3 	bl	8000790 <HAL_GetTick>
 8000e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	e00a      	b.n	8000e66 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fc9e 	bl	8000790 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b64      	cmp	r3, #100	; 0x64
 8000e5e:	d902      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	f000 bf43 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8000e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e7a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	fab3 f383 	clz	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	095b      	lsrs	r3, r3, #5
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d102      	bne.n	8000e98 <HAL_RCC_OscConfig+0x218>
 8000e92:	4b47      	ldr	r3, [pc, #284]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	e015      	b.n	8000ec4 <HAL_RCC_OscConfig+0x244>
 8000e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e9c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000eb4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ecc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ed0:	fa92 f2a2 	rbit	r2, r2
 8000ed4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ed8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000edc:	fab2 f282 	clz	r2, r2
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	f042 0220 	orr.w	r2, r2, #32
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	f002 021f 	and.w	r2, r2, #31
 8000eec:	2101      	movs	r1, #1
 8000eee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0ab      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1d0>
 8000ef8:	e05d      	b.n	8000fb6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efa:	f7ff fc49 	bl	8000790 <HAL_GetTick>
 8000efe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f02:	e00a      	b.n	8000f1a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fc44 	bl	8000790 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b64      	cmp	r3, #100	; 0x64
 8000f12:	d902      	bls.n	8000f1a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f000 bee9 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8000f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f2e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f32:	fab3 f383 	clz	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	095b      	lsrs	r3, r3, #5
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d102      	bne.n	8000f4c <HAL_RCC_OscConfig+0x2cc>
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	e015      	b.n	8000f78 <HAL_RCC_OscConfig+0x2f8>
 8000f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f50:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f68:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f80:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f84:	fa92 f2a2 	rbit	r2, r2
 8000f88:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f8c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	f042 0220 	orr.w	r2, r2, #32
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	f002 021f 	and.w	r2, r2, #31
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ab      	bne.n	8000f04 <HAL_RCC_OscConfig+0x284>
 8000fac:	e003      	b.n	8000fb6 <HAL_RCC_OscConfig+0x336>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 817d 	beq.w	80012c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fcc:	4ba6      	ldr	r3, [pc, #664]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00b      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fd8:	4ba3      	ldr	r3, [pc, #652]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d172      	bne.n	80010ca <HAL_RCC_OscConfig+0x44a>
 8000fe4:	4ba0      	ldr	r3, [pc, #640]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d16c      	bne.n	80010ca <HAL_RCC_OscConfig+0x44a>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001002:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	fab3 f383 	clz	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	095b      	lsrs	r3, r3, #5
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d102      	bne.n	8001020 <HAL_RCC_OscConfig+0x3a0>
 800101a:	4b93      	ldr	r3, [pc, #588]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	e013      	b.n	8001048 <HAL_RCC_OscConfig+0x3c8>
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001038:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001044:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	2202      	movs	r2, #2
 800104a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800104e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001052:	fa92 f2a2 	rbit	r2, r2
 8001056:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800105a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800105e:	fab2 f282 	clz	r2, r2
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f042 0220 	orr.w	r2, r2, #32
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	f002 021f 	and.w	r2, r2, #31
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00a      	beq.n	8001090 <HAL_RCC_OscConfig+0x410>
 800107a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d002      	beq.n	8001090 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	f000 be2e 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b75      	ldr	r3, [pc, #468]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	21f8      	movs	r1, #248	; 0xf8
 80010a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010ae:	fa91 f1a1 	rbit	r1, r1
 80010b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010ba:	fab1 f181 	clz	r1, r1
 80010be:	b2c9      	uxtb	r1, r1
 80010c0:	408b      	lsls	r3, r1
 80010c2:	4969      	ldr	r1, [pc, #420]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c8:	e0fd      	b.n	80012c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8088 	beq.w	80011ec <HAL_RCC_OscConfig+0x56c>
 80010dc:	2301      	movs	r3, #1
 80010de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f2:	fab3 f383 	clz	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	461a      	mov	r2, r3
 8001104:	2301      	movs	r3, #1
 8001106:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fb42 	bl	8000790 <HAL_GetTick>
 800110c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fb3d 	bl	8000790 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d902      	bls.n	8001128 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	f000 bde2 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8001128:	2302      	movs	r3, #2
 800112a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800113a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	095b      	lsrs	r3, r3, #5
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d102      	bne.n	8001158 <HAL_RCC_OscConfig+0x4d8>
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	e013      	b.n	8001180 <HAL_RCC_OscConfig+0x500>
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001170:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	2202      	movs	r2, #2
 8001182:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001186:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800118a:	fa92 f2a2 	rbit	r2, r2
 800118e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001192:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001196:	fab2 f282 	clz	r2, r2
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	f042 0220 	orr.w	r2, r2, #32
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	f002 021f 	and.w	r2, r2, #31
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0af      	beq.n	8001112 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	21f8      	movs	r1, #248	; 0xf8
 80011c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011d0:	fa91 f1a1 	rbit	r1, r1
 80011d4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011dc:	fab1 f181 	clz	r1, r1
 80011e0:	b2c9      	uxtb	r1, r1
 80011e2:	408b      	lsls	r3, r1
 80011e4:	4920      	ldr	r1, [pc, #128]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
 80011ea:	e06c      	b.n	80012c6 <HAL_RCC_OscConfig+0x646>
 80011ec:	2301      	movs	r3, #1
 80011ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800120c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	461a      	mov	r2, r3
 8001214:	2300      	movs	r3, #0
 8001216:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff faba 	bl	8000790 <HAL_GetTick>
 800121c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fab5 	bl	8000790 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d902      	bls.n	8001238 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	f000 bd5a 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800124a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d104      	bne.n	800126c <HAL_RCC_OscConfig+0x5ec>
 8001262:	4b01      	ldr	r3, [pc, #4]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	e015      	b.n	8001294 <HAL_RCC_OscConfig+0x614>
 8001268:	40021000 	.word	0x40021000
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001284:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001290:	4bc8      	ldr	r3, [pc, #800]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	2202      	movs	r2, #2
 8001296:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800129a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800129e:	fa92 f2a2 	rbit	r2, r2
 80012a2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f042 0220 	orr.w	r2, r2, #32
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f002 021f 	and.w	r2, r2, #31
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1ad      	bne.n	8001222 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8110 	beq.w	80014fc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d079      	beq.n	80013e0 <HAL_RCC_OscConfig+0x760>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4bab      	ldr	r3, [pc, #684]	; (80015b8 <HAL_RCC_OscConfig+0x938>)
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	461a      	mov	r2, r3
 8001312:	2301      	movs	r3, #1
 8001314:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fa3b 	bl	8000790 <HAL_GetTick>
 800131a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e00a      	b.n	8001336 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fa36 	bl	8000790 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d902      	bls.n	8001336 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	f000 bcdb 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001350:	2202      	movs	r2, #2
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001358:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	fa93 f2a3 	rbit	r2, r3
 8001362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001374:	2202      	movs	r2, #2
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	fa93 f2a3 	rbit	r2, r3
 8001386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800138e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001390:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 8001392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001398:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800139c:	2102      	movs	r1, #2
 800139e:	6019      	str	r1, [r3, #0]
 80013a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	fa93 f1a3 	rbit	r1, r3
 80013ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013b6:	6019      	str	r1, [r3, #0]
  return result;
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	2101      	movs	r1, #1
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0a0      	beq.n	8001320 <HAL_RCC_OscConfig+0x6a0>
 80013de:	e08d      	b.n	80014fc <HAL_RCC_OscConfig+0x87c>
 80013e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	fa93 f2a3 	rbit	r2, r3
 80013fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001402:	601a      	str	r2, [r3, #0]
  return result;
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800140c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x938>)
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	461a      	mov	r2, r3
 800141e:	2300      	movs	r3, #0
 8001420:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff f9b5 	bl	8000790 <HAL_GetTick>
 8001426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142a:	e00a      	b.n	8001442 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff f9b0 	bl	8000790 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d902      	bls.n	8001442 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	f000 bc55 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800144a:	2202      	movs	r2, #2
 800144c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f2a3 	rbit	r2, r3
 800145c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001460:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800146e:	2202      	movs	r2, #2
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa93 f2a3 	rbit	r2, r3
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001492:	2202      	movs	r2, #2
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f2a3 	rbit	r2, r3
 80014a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 80014b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ba:	2102      	movs	r1, #2
 80014bc:	6019      	str	r1, [r3, #0]
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	fa93 f1a3 	rbit	r1, r3
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014d4:	6019      	str	r1, [r3, #0]
  return result;
 80014d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d197      	bne.n	800142c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 81a1 	beq.w	8001854 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d116      	bne.n	8001552 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152e:	61d3      	str	r3, [r2, #28]
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800154a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800154c:	2301      	movs	r3, #1
 800154e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_RCC_OscConfig+0x93c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d11a      	bne.n	8001594 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_RCC_OscConfig+0x93c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x93c>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff f911 	bl	8000790 <HAL_GetTick>
 800156e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001572:	e009      	b.n	8001588 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff f90c 	bl	8000790 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e3b1      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_RCC_OscConfig+0x93c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0ef      	beq.n	8001574 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10d      	bne.n	80015c0 <HAL_RCC_OscConfig+0x940>
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a02      	ldr	r2, [pc, #8]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	e03c      	b.n	800162c <HAL_RCC_OscConfig+0x9ac>
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	10908120 	.word	0x10908120
 80015bc:	40007000 	.word	0x40007000
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_OscConfig+0x96a>
 80015d0:	4bc1      	ldr	r3, [pc, #772]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4ac0      	ldr	r2, [pc, #768]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6213      	str	r3, [r2, #32]
 80015dc:	4bbe      	ldr	r3, [pc, #760]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4abd      	ldr	r2, [pc, #756]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	e020      	b.n	800162c <HAL_RCC_OscConfig+0x9ac>
 80015ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x994>
 80015fa:	4bb7      	ldr	r3, [pc, #732]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4ab6      	ldr	r2, [pc, #728]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4bb4      	ldr	r3, [pc, #720]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4ab3      	ldr	r2, [pc, #716]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0x9ac>
 8001614:	4bb0      	ldr	r3, [pc, #704]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4aaf      	ldr	r2, [pc, #700]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	4bad      	ldr	r3, [pc, #692]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4aac      	ldr	r2, [pc, #688]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001626:	f023 0304 	bic.w	r3, r3, #4
 800162a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 8081 	beq.w	8001740 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff f8a7 	bl	8000790 <HAL_GetTick>
 8001642:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff f8a2 	bl	8000790 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	; 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e345      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001668:	2202      	movs	r2, #2
 800166a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800168c:	2202      	movs	r2, #2
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f2a3 	rbit	r2, r3
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016a6:	601a      	str	r2, [r3, #0]
  return result;
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0xa4c>
 80016c6:	4b84      	ldr	r3, [pc, #528]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	e013      	b.n	80016f4 <HAL_RCC_OscConfig+0xa74>
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fa93 f2a3 	rbit	r2, r3
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	4b79      	ldr	r3, [pc, #484]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016fc:	2102      	movs	r1, #2
 80016fe:	6011      	str	r1, [r2, #0]
 8001700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001704:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	fa92 f1a2 	rbit	r1, r2
 800170e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001712:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001716:	6011      	str	r1, [r2, #0]
  return result;
 8001718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800171c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	fab2 f282 	clz	r2, r2
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	f002 021f 	and.w	r2, r2, #31
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d084      	beq.n	8001648 <HAL_RCC_OscConfig+0x9c8>
 800173e:	e07f      	b.n	8001840 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff f826 	bl	8000790 <HAL_GetTick>
 8001744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff f821 	bl	8000790 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e2c4      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800176a:	2202      	movs	r2, #2
 800176c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	fa93 f2a3 	rbit	r2, r3
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800178e:	2202      	movs	r2, #2
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017a8:	601a      	str	r2, [r3, #0]
  return result;
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_OscConfig+0xb4e>
 80017c8:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	e013      	b.n	80017f6 <HAL_RCC_OscConfig+0xb76>
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017d6:	2202      	movs	r2, #2
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017fe:	2102      	movs	r1, #2
 8001800:	6011      	str	r1, [r2, #0]
 8001802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001806:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	fa92 f1a2 	rbit	r1, r2
 8001810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001814:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001818:	6011      	str	r1, [r2, #0]
  return result;
 800181a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800181e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	fab2 f282 	clz	r2, r2
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f002 021f 	and.w	r2, r2, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f202 	lsl.w	r2, r1, r2
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d184      	bne.n	800174a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001840:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001852:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8242 	beq.w	8001cea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	f000 8213 	beq.w	8001c9a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b02      	cmp	r3, #2
 8001882:	f040 8162 	bne.w	8001b4a <HAL_RCC_OscConfig+0xeca>
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800188e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018aa:	601a      	str	r2, [r3, #0]
  return result;
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	461a      	mov	r2, r3
 80018c8:	2300      	movs	r3, #0
 80018ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7fe ff60 	bl	8000790 <HAL_GetTick>
 80018d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d4:	e00c      	b.n	80018f0 <HAL_RCC_OscConfig+0xc70>
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7fe ff58 	bl	8000790 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1fd      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 80018f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001914:	601a      	str	r2, [r3, #0]
  return result;
 8001916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800191e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d102      	bne.n	800193a <HAL_RCC_OscConfig+0xcba>
 8001934:	4bb0      	ldr	r3, [pc, #704]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e027      	b.n	800198a <HAL_RCC_OscConfig+0xd0a>
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001980:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	4b9c      	ldr	r3, [pc, #624]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800198e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001992:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001996:	6011      	str	r1, [r2, #0]
 8001998:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	fa92 f1a2 	rbit	r1, r2
 80019a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019aa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019ae:	6011      	str	r1, [r2, #0]
  return result;
 80019b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	fab2 f282 	clz	r2, r2
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f042 0220 	orr.w	r2, r2, #32
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	f002 021f 	and.w	r2, r2, #31
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d182      	bne.n	80018dc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	497f      	ldr	r1, [pc, #508]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a22:	601a      	str	r2, [r3, #0]
  return result;
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a2c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2301      	movs	r3, #1
 8001a42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe fea4 	bl	8000790 <HAL_GetTick>
 8001a48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7fe fe9f 	bl	8000790 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e144      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fa93 f2a3 	rbit	r2, r3
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a86:	601a      	str	r2, [r3, #0]
  return result;
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0xe2c>
 8001aa6:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	e027      	b.n	8001afc <HAL_RCC_OscConfig+0xe7c>
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b00:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b08:	6011      	str	r1, [r2, #0]
 8001b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	fa92 f1a2 	rbit	r1, r2
 8001b18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b20:	6011      	str	r1, [r2, #0]
  return result;
 8001b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b26:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	fab2 f282 	clz	r2, r2
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f042 0220 	orr.w	r2, r2, #32
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f002 021f 	and.w	r2, r2, #31
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d082      	beq.n	8001a4e <HAL_RCC_OscConfig+0xdce>
 8001b48:	e0cf      	b.n	8001cea <HAL_RCC_OscConfig+0x106a>
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b6e:	601a      	str	r2, [r3, #0]
  return result;
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe fdfe 	bl	8000790 <HAL_GetTick>
 8001b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	e009      	b.n	8001bae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7fe fdf9 	bl	8000790 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e09e      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bd2:	601a      	str	r2, [r3, #0]
  return result;
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d104      	bne.n	8001bfc <HAL_RCC_OscConfig+0xf7c>
 8001bf2:	4b01      	ldr	r3, [pc, #4]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e029      	b.n	8001c4c <HAL_RCC_OscConfig+0xfcc>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	fa93 f2a3 	rbit	r2, r3
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_RCC_OscConfig+0x1078>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c50:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c58:	6011      	str	r1, [r2, #0]
 8001c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	fa92 f1a2 	rbit	r1, r2
 8001c68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c70:	6011      	str	r1, [r2, #0]
  return result;
 8001c72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c76:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d180      	bne.n	8001b9a <HAL_RCC_OscConfig+0xf1a>
 8001c98:	e027      	b.n	8001cea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e01e      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_OscConfig+0x1078>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b09e      	sub	sp, #120	; 0x78
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e162      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b90      	ldr	r3, [pc, #576]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b8d      	ldr	r3, [pc, #564]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	498b      	ldr	r1, [pc, #556]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e14a      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b82      	ldr	r3, [pc, #520]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	497f      	ldr	r1, [pc, #508]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80dc 	beq.w	8001f28 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d13c      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xf6>
 8001d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xa6>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	e00f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0xc6>
 8001da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	667b      	str	r3, [r7, #100]	; 0x64
 8001db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db4:	663b      	str	r3, [r7, #96]	; 0x60
 8001db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dca:	fa92 f2a2 	rbit	r2, r2
 8001dce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001dd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f002 021f 	and.w	r2, r2, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d17b      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0f3      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d13c      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x178>
 8001dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x128>
 8001e1e:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_ClockConfig+0x148>
 8001e24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	647b      	str	r3, [r7, #68]	; 0x44
 8001e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40
 8001e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e48:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e4c:	fa92 f2a2 	rbit	r2, r2
 8001e50:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e54:	fab2 f282 	clz	r2, r2
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f042 0220 	orr.w	r2, r2, #32
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f002 021f 	and.w	r2, r2, #31
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d13a      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0b2      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
 8001e74:	2302      	movs	r3, #2
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x1a0>
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	e00d      	b.n	8001eb8 <HAL_RCC_ClockConfig+0x1bc>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2202      	movs	r2, #2
 8001eba:	61ba      	str	r2, [r7, #24]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	617a      	str	r2, [r7, #20]
  return result;
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f042 0220 	orr.w	r2, r2, #32
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f002 021f 	and.w	r2, r2, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e079      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	491a      	ldr	r1, [pc, #104]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7fe fc4a 	bl	8000790 <HAL_GetTick>
 8001efc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7fe fc46 	bl	8000790 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e061      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d214      	bcs.n	8001f60 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4906      	ldr	r1, [pc, #24]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e040      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	491a      	ldr	r1, [pc, #104]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4912      	ldr	r1, [pc, #72]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f9e:	f000 f829 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fac:	22f0      	movs	r2, #240	; 0xf0
 8001fae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	fa92 f2a2 	rbit	r2, r2
 8001fb6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	fab2 f282 	clz	r2, r2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	40d3      	lsrs	r3, r2
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x2ec>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_RCC_ClockConfig+0x2f0>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_RCC_ClockConfig+0x2f4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fa68 	bl	80004a8 <HAL_InitTick>
  
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3778      	adds	r7, #120	; 0x78
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08005d2c 	.word	0x08005d2c
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b08b      	sub	sp, #44	; 0x2c
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800200e:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b04      	cmp	r3, #4
 800201c:	d002      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x30>
 800201e:	2b08      	cmp	r3, #8
 8002020:	d003      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x36>
 8002022:	e03c      	b.n	800209e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002026:	623b      	str	r3, [r7, #32]
      break;
 8002028:	e03c      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002030:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002034:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	fa92 f2a2 	rbit	r2, r2
 800203c:	607a      	str	r2, [r7, #4]
  return result;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	fab2 f282 	clz	r2, r2
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	40d3      	lsrs	r3, r2
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	220f      	movs	r2, #15
 8002058:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	fa92 f2a2 	rbit	r2, r2
 8002060:	60fa      	str	r2, [r7, #12]
  return result;
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	fab2 f282 	clz	r2, r2
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	40d3      	lsrs	r3, r2
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	fbb2 f2f3 	udiv	r2, r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
 800208c:	e004      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	623b      	str	r3, [r7, #32]
      break;
 800209c:	e002      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a0:	623b      	str	r3, [r7, #32]
      break;
 80020a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a4:	6a3b      	ldr	r3, [r7, #32]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	372c      	adds	r7, #44	; 0x2c
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	007a1200 	.word	0x007a1200
 80020bc:	08005d44 	.word	0x08005d44
 80020c0:	08005d54 	.word	0x08005d54
 80020c4:	003d0900 	.word	0x003d0900

080020c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000000 	.word	0x20000000

080020e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020e6:	f7ff ffef 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 80020ea:	4601      	mov	r1, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	fa92 f2a2 	rbit	r2, r2
 8002100:	603a      	str	r2, [r7, #0]
  return result;
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	40d3      	lsrs	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x40>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	08005d3c 	.word	0x08005d3c

08002124 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	220f      	movs	r2, #15
 8002132:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_RCC_GetClockConfig+0x5c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_RCC_GetClockConfig+0x5c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCC_GetClockConfig+0x5c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_GetClockConfig+0x5c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	08db      	lsrs	r3, r3, #3
 800215e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_RCC_GetClockConfig+0x60>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0207 	and.w	r2, r3, #7
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	40022000 	.word	0x40022000

08002188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e049      	b.n	800222e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f841 	bl	8002236 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f000 f9e4 	bl	8002594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d001      	beq.n	8002264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e040      	b.n	80022e6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00e      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x58>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228e:	d009      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x58>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_TIM_Base_Start_IT+0xac>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d004      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x58>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_TIM_Base_Start_IT+0xb0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d115      	bne.n	80022d0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_TIM_Base_Start_IT+0xb4>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d015      	beq.n	80022e2 <HAL_TIM_Base_Start_IT+0x96>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022bc:	d011      	beq.n	80022e2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ce:	e008      	b.n	80022e2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e000      	b.n	80022e4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40014000 	.word	0x40014000
 8002300:	00010007 	.word	0x00010007

08002304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d122      	bne.n	8002360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b02      	cmp	r3, #2
 8002326:	d11b      	bne.n	8002360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0202 	mvn.w	r2, #2
 8002330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f905 	bl	8002556 <HAL_TIM_IC_CaptureCallback>
 800234c:	e005      	b.n	800235a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f8f7 	bl	8002542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f908 	bl	800256a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d122      	bne.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d11b      	bne.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0204 	mvn.w	r2, #4
 8002384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8db 	bl	8002556 <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8cd 	bl	8002542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f8de 	bl	800256a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d122      	bne.n	8002408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d11b      	bne.n	8002408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0208 	mvn.w	r2, #8
 80023d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2204      	movs	r2, #4
 80023de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8b1 	bl	8002556 <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8a3 	bl	8002542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f8b4 	bl	800256a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b10      	cmp	r3, #16
 8002414:	d122      	bne.n	800245c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b10      	cmp	r3, #16
 8002422:	d11b      	bne.n	800245c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0210 	mvn.w	r2, #16
 800242c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2208      	movs	r2, #8
 8002432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f887 	bl	8002556 <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f879 	bl	8002542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f88a 	bl	800256a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0201 	mvn.w	r2, #1
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fd ffd4 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b80      	cmp	r3, #128	; 0x80
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a0:	2b80      	cmp	r3, #128	; 0x80
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f8f2 	bl	8002698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c2:	d10e      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b80      	cmp	r3, #128	; 0x80
 80024d0:	d107      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8e5 	bl	80026ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d10e      	bne.n	800250e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b40      	cmp	r3, #64	; 0x40
 80024fc:	d107      	bne.n	800250e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f838 	bl	800257e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b20      	cmp	r3, #32
 800251a:	d10e      	bne.n	800253a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b20      	cmp	r3, #32
 8002528:	d107      	bne.n	800253a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f06f 0220 	mvn.w	r2, #32
 8002532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f8a5 	bl	8002684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a32      	ldr	r2, [pc, #200]	; (8002670 <TIM_Base_SetConfig+0xdc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d007      	beq.n	80025bc <TIM_Base_SetConfig+0x28>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b2:	d003      	beq.n	80025bc <TIM_Base_SetConfig+0x28>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <TIM_Base_SetConfig+0xe0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d108      	bne.n	80025ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <TIM_Base_SetConfig+0xdc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <TIM_Base_SetConfig+0x6a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025dc:	d00f      	beq.n	80025fe <TIM_Base_SetConfig+0x6a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a24      	ldr	r2, [pc, #144]	; (8002674 <TIM_Base_SetConfig+0xe0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00b      	beq.n	80025fe <TIM_Base_SetConfig+0x6a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a23      	ldr	r2, [pc, #140]	; (8002678 <TIM_Base_SetConfig+0xe4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <TIM_Base_SetConfig+0x6a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a22      	ldr	r2, [pc, #136]	; (800267c <TIM_Base_SetConfig+0xe8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d003      	beq.n	80025fe <TIM_Base_SetConfig+0x6a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a21      	ldr	r2, [pc, #132]	; (8002680 <TIM_Base_SetConfig+0xec>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d108      	bne.n	8002610 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <TIM_Base_SetConfig+0xdc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00b      	beq.n	8002654 <TIM_Base_SetConfig+0xc0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <TIM_Base_SetConfig+0xe4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <TIM_Base_SetConfig+0xc0>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0d      	ldr	r2, [pc, #52]	; (800267c <TIM_Base_SetConfig+0xe8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0xc0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <TIM_Base_SetConfig+0xec>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	615a      	str	r2, [r3, #20]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40000400 	.word	0x40000400
 8002678:	40014000 	.word	0x40014000
 800267c:	40014400 	.word	0x40014400
 8002680:	40014800 	.word	0x40014800

08002684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f103 0208 	add.w	r2, r3, #8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f103 0208 	add.w	r2, r3, #8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f103 0208 	add.w	r2, r3, #8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d103      	bne.n	8002782 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e00c      	b.n	800279c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3308      	adds	r3, #8
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	e002      	b.n	8002790 <vListInsert+0x2e>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	429a      	cmp	r2, r3
 800279a:	d2f6      	bcs.n	800278a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	601a      	str	r2, [r3, #0]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6892      	ldr	r2, [r2, #8]
 80027ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6852      	ldr	r2, [r2, #4]
 80027f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d103      	bne.n	8002808 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1e5a      	subs	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002852:	f002 f9c9 	bl	8004be8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	441a      	add	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	3b01      	subs	r3, #1
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	441a      	add	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	22ff      	movs	r2, #255	; 0xff
 8002896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	22ff      	movs	r2, #255	; 0xff
 800289e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d114      	bne.n	80028d2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01a      	beq.n	80028e6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3310      	adds	r3, #16
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f9a5 	bl	8003c04 <xTaskRemoveFromEventList>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d012      	beq.n	80028e6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <xQueueGenericReset+0xcc>)
 80028c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	e009      	b.n	80028e6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3310      	adds	r3, #16
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fef2 	bl	80026c0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3324      	adds	r3, #36	; 0x24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff feed 	bl	80026c0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80028e6:	f002 f9af 	bl	8004c48 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	e000ed04 	.word	0xe000ed04

080028f8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	; 0x30
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <xQueueGenericCreate+0x2a>
        __asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	61bb      	str	r3, [r7, #24]
    }
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <xQueueGenericCreate+0x48>
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d101      	bne.n	8002944 <xQueueGenericCreate+0x4c>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <xQueueGenericCreate+0x4e>
 8002944:	2300      	movs	r3, #0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <xQueueGenericCreate+0x68>
        __asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	617b      	str	r3, [r7, #20]
    }
 800295c:	bf00      	nop
 800295e:	e7fe      	b.n	800295e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002966:	d90a      	bls.n	800297e <xQueueGenericCreate+0x86>
        __asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	613b      	str	r3, [r7, #16]
    }
 800297a:	bf00      	nop
 800297c:	e7fe      	b.n	800297c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	3350      	adds	r3, #80	; 0x50
 8002982:	4618      	mov	r0, r3
 8002984:	f002 fa52 	bl	8004e2c <pvPortMalloc>
 8002988:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00d      	beq.n	80029ac <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	3350      	adds	r3, #80	; 0x50
 8002998:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800299a:	79fa      	ldrb	r2, [r7, #7]
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f805 	bl	80029b6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80029ac:	6a3b      	ldr	r3, [r7, #32]
    }
 80029ae:	4618      	mov	r0, r3
 80029b0:	3728      	adds	r7, #40	; 0x28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e002      	b.n	80029d8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029e4:	2101      	movs	r1, #1
 80029e6:	69b8      	ldr	r0, [r7, #24]
 80029e8:	f7ff ff1e 	bl	8002828 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <xQueueGenericSend+0x32>
        __asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a2a:	bf00      	nop
 8002a2c:	e7fe      	b.n	8002a2c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <xQueueGenericSend+0x40>
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <xQueueGenericSend+0x44>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <xQueueGenericSend+0x46>
 8002a40:	2300      	movs	r3, #0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <xQueueGenericSend+0x60>
        __asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a58:	bf00      	nop
 8002a5a:	e7fe      	b.n	8002a5a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d103      	bne.n	8002a6a <xQueueGenericSend+0x6e>
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <xQueueGenericSend+0x72>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <xQueueGenericSend+0x74>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <xQueueGenericSend+0x8e>
        __asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	623b      	str	r3, [r7, #32]
    }
 8002a86:	bf00      	nop
 8002a88:	e7fe      	b.n	8002a88 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a8a:	f001 fa57 	bl	8003f3c <xTaskGetSchedulerState>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <xQueueGenericSend+0x9e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <xQueueGenericSend+0xa2>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <xQueueGenericSend+0xa4>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <xQueueGenericSend+0xbe>
        __asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	61fb      	str	r3, [r7, #28]
    }
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002aba:	f002 f895 	bl	8004be8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <xQueueGenericSend+0xd4>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d129      	bne.n	8002b24 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad6:	f000 fb3d 	bl	8003154 <prvCopyDataToQueue>
 8002ada:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	3324      	adds	r3, #36	; 0x24
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 f88b 	bl	8003c04 <xTaskRemoveFromEventList>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002af4:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <xQueueGenericSend+0x1f8>)
 8002af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	e00a      	b.n	8002b1c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002b0c:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <xQueueGenericSend+0x1f8>)
 8002b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002b1c:	f002 f894 	bl	8004c48 <vPortExitCritical>
                return pdPASS;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e063      	b.n	8002bec <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b2a:	f002 f88d 	bl	8004c48 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e05c      	b.n	8002bec <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 f8c3 	bl	8003cc8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b46:	f002 f87f 	bl	8004c48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b4a:	f000 fe3d 	bl	80037c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b4e:	f002 f84b 	bl	8004be8 <vPortEnterCritical>
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d103      	bne.n	8002b68 <xQueueGenericSend+0x16c>
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b6e:	b25b      	sxtb	r3, r3
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d103      	bne.n	8002b7e <xQueueGenericSend+0x182>
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b7e:	f002 f863 	bl	8004c48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b82:	1d3a      	adds	r2, r7, #4
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 f8b2 	bl	8003cf4 <xTaskCheckForTimeOut>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d124      	bne.n	8002be0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b98:	f000 fbd4 	bl	8003344 <prvIsQueueFull>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d018      	beq.n	8002bd4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 ffda 	bl	8003b64 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bb2:	f000 fb5f 	bl	8003274 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002bb6:	f000 fe15 	bl	80037e4 <xTaskResumeAll>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f47f af7c 	bne.w	8002aba <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <xQueueGenericSend+0x1f8>)
 8002bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	e772      	b.n	8002aba <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd6:	f000 fb4d 	bl	8003274 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bda:	f000 fe03 	bl	80037e4 <xTaskResumeAll>
 8002bde:	e76c      	b.n	8002aba <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be2:	f000 fb47 	bl	8003274 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002be6:	f000 fdfd 	bl	80037e4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002bea:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3738      	adds	r7, #56	; 0x38
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b090      	sub	sp, #64	; 0x40
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <xQueueGenericSendFromISR+0x3c>
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <xQueueGenericSendFromISR+0x40>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <xQueueGenericSendFromISR+0x42>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002c50:	bf00      	nop
 8002c52:	e7fe      	b.n	8002c52 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d103      	bne.n	8002c62 <xQueueGenericSendFromISR+0x6a>
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <xQueueGenericSendFromISR+0x6e>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <xQueueGenericSendFromISR+0x70>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	623b      	str	r3, [r7, #32]
    }
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c82:	f002 f893 	bl	8004dac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002c86:	f3ef 8211 	mrs	r2, BASEPRI
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	61fa      	str	r2, [r7, #28]
 8002c9c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <xQueueGenericSendFromISR+0xbc>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d13e      	bne.n	8002d32 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cca:	f000 fa43 	bl	8003154 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002cce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d112      	bne.n	8002cfe <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d025      	beq.n	8002d2c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	3324      	adds	r3, #36	; 0x24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 ff8d 	bl	8003c04 <xTaskRemoveFromEventList>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01d      	beq.n	8002d2c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01a      	beq.n	8002d2c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e016      	b.n	8002d2c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002cfe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d02:	2b7f      	cmp	r3, #127	; 0x7f
 8002d04:	d10a      	bne.n	8002d1c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	617b      	str	r3, [r7, #20]
    }
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d20:	3301      	adds	r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	b25a      	sxtb	r2, r3
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002d30:	e001      	b.n	8002d36 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002d40:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3740      	adds	r7, #64	; 0x40
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	; 0x30
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <xQueueReceive+0x30>
        __asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	623b      	str	r3, [r7, #32]
    }
 8002d78:	bf00      	nop
 8002d7a:	e7fe      	b.n	8002d7a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d103      	bne.n	8002d8a <xQueueReceive+0x3e>
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <xQueueReceive+0x42>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueReceive+0x44>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueReceive+0x5e>
        __asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	61fb      	str	r3, [r7, #28]
    }
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002daa:	f001 f8c7 	bl	8003f3c <xTaskGetSchedulerState>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <xQueueReceive+0x6e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <xQueueReceive+0x72>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <xQueueReceive+0x74>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xQueueReceive+0x8e>
        __asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	61bb      	str	r3, [r7, #24]
    }
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002dda:	f001 ff05 	bl	8004be8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01f      	beq.n	8002e2a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dee:	f000 fa1b 	bl	8003228 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1e5a      	subs	r2, r3, #1
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00f      	beq.n	8002e22 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	3310      	adds	r3, #16
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fefc 	bl	8003c04 <xTaskRemoveFromEventList>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <xQueueReceive+0x1bc>)
 8002e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002e22:	f001 ff11 	bl	8004c48 <vPortExitCritical>
                return pdPASS;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e069      	b.n	8002efe <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e30:	f001 ff0a 	bl	8004c48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e062      	b.n	8002efe <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e3e:	f107 0310 	add.w	r3, r7, #16
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 ff40 	bl	8003cc8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e4c:	f001 fefc 	bl	8004c48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e50:	f000 fcba 	bl	80037c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e54:	f001 fec8 	bl	8004be8 <vPortEnterCritical>
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d103      	bne.n	8002e6e <xQueueReceive+0x122>
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d103      	bne.n	8002e84 <xQueueReceive+0x138>
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e84:	f001 fee0 	bl	8004c48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e88:	1d3a      	adds	r2, r7, #4
 8002e8a:	f107 0310 	add.w	r3, r7, #16
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 ff2f 	bl	8003cf4 <xTaskCheckForTimeOut>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d123      	bne.n	8002ee4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e9e:	f000 fa3b 	bl	8003318 <prvIsQueueEmpty>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	3324      	adds	r3, #36	; 0x24
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fe57 	bl	8003b64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb8:	f000 f9dc 	bl	8003274 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002ebc:	f000 fc92 	bl	80037e4 <xTaskResumeAll>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d189      	bne.n	8002dda <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <xQueueReceive+0x1bc>)
 8002ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	e780      	b.n	8002dda <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f000 f9cb 	bl	8003274 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ede:	f000 fc81 	bl	80037e4 <xTaskResumeAll>
 8002ee2:	e77a      	b.n	8002dda <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee6:	f000 f9c5 	bl	8003274 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002eea:	f000 fc7b 	bl	80037e4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef0:	f000 fa12 	bl	8003318 <prvIsQueueEmpty>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f43f af6f 	beq.w	8002dda <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002efc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3730      	adds	r7, #48	; 0x30
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08e      	sub	sp, #56	; 0x38
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	623b      	str	r3, [r7, #32]
    }
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	61fb      	str	r3, [r7, #28]
    }
 8002f58:	bf00      	nop
 8002f5a:	e7fe      	b.n	8002f5a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f5c:	f000 ffee 	bl	8003f3c <xTaskGetSchedulerState>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <xQueueSemaphoreTake+0x60>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <xQueueSemaphoreTake+0x64>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <xQueueSemaphoreTake+0x66>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	61bb      	str	r3, [r7, #24]
    }
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f8c:	f001 fe2c 	bl	8004be8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d024      	beq.n	8002fe6 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	1e5a      	subs	r2, r3, #1
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002fac:	f001 f962 	bl	8004274 <pvTaskIncrementMutexHeldCount>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00f      	beq.n	8002fde <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fe1e 	bl	8003c04 <xTaskRemoveFromEventList>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <xQueueSemaphoreTake+0x214>)
 8002fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002fde:	f001 fe33 	bl	8004c48 <vPortExitCritical>
                return pdPASS;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e097      	b.n	8003116 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d111      	bne.n	8003010 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	617b      	str	r3, [r7, #20]
    }
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003008:	f001 fe1e 	bl	8004c48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800300c:	2300      	movs	r3, #0
 800300e:	e082      	b.n	8003116 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003016:	f107 030c 	add.w	r3, r7, #12
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fe54 	bl	8003cc8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003020:	2301      	movs	r3, #1
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003024:	f001 fe10 	bl	8004c48 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003028:	f000 fbce 	bl	80037c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800302c:	f001 fddc 	bl	8004be8 <vPortEnterCritical>
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003036:	b25b      	sxtb	r3, r3
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d103      	bne.n	8003046 <xQueueSemaphoreTake+0x13a>
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304c:	b25b      	sxtb	r3, r3
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d103      	bne.n	800305c <xQueueSemaphoreTake+0x150>
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800305c:	f001 fdf4 	bl	8004c48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003060:	463a      	mov	r2, r7
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fe43 	bl	8003cf4 <xTaskCheckForTimeOut>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d132      	bne.n	80030da <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003076:	f000 f94f 	bl	8003318 <prvIsQueueEmpty>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d026      	beq.n	80030ce <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003088:	f001 fdae 	bl	8004be8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 ff71 	bl	8003f78 <xTaskPriorityInherit>
 8003096:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003098:	f001 fdd6 	bl	8004c48 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	3324      	adds	r3, #36	; 0x24
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fd5d 	bl	8003b64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ac:	f000 f8e2 	bl	8003274 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030b0:	f000 fb98 	bl	80037e4 <xTaskResumeAll>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f af68 	bne.w	8002f8c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <xQueueSemaphoreTake+0x214>)
 80030be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	e75e      	b.n	8002f8c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80030ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030d0:	f000 f8d0 	bl	8003274 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030d4:	f000 fb86 	bl	80037e4 <xTaskResumeAll>
 80030d8:	e758      	b.n	8002f8c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80030da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030dc:	f000 f8ca 	bl	8003274 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030e0:	f000 fb80 	bl	80037e4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030e6:	f000 f917 	bl	8003318 <prvIsQueueEmpty>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f43f af4d 	beq.w	8002f8c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 80030f8:	f001 fd76 	bl	8004be8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80030fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030fe:	f000 f811 	bl	8003124 <prvGetDisinheritPriorityAfterTimeout>
 8003102:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800310a:	4618      	mov	r0, r3
 800310c:	f001 f824 	bl	8004158 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003110:	f001 fd9a 	bl	8004c48 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003114:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003116:	4618      	mov	r0, r3
 8003118:	3738      	adds	r7, #56	; 0x38
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000ed04 	.word	0xe000ed04

08003124 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f1c3 0307 	rsb	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e001      	b.n	8003146 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003146:	68fb      	ldr	r3, [r7, #12]
    }
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d14d      	bne.n	8003216 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 ff70 	bl	8004064 <xTaskPriorityDisinherit>
 8003184:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	e043      	b.n	8003216 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d119      	bne.n	80031c8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6858      	ldr	r0, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	461a      	mov	r2, r3
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	f002 f866 	bl	8005270 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	441a      	add	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d32b      	bcc.n	8003216 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e026      	b.n	8003216 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68d8      	ldr	r0, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	461a      	mov	r2, r3
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	f002 f84c 	bl	8005270 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	425b      	negs	r3, r3
 80031e2:	441a      	add	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d207      	bcs.n	8003204 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	425b      	negs	r3, r3
 80031fe:	441a      	add	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d105      	bne.n	8003216 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	3b01      	subs	r3, #1
 8003214:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800321e:	697b      	ldr	r3, [r7, #20]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d018      	beq.n	800326c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	441a      	add	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d303      	bcc.n	800325c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	461a      	mov	r2, r3
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	f002 f802 	bl	8005270 <memcpy>
    }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800327c:	f001 fcb4 	bl	8004be8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003286:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003288:	e011      	b.n	80032ae <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3324      	adds	r3, #36	; 0x24
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fcb4 	bl	8003c04 <xTaskRemoveFromEventList>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80032a2:	f000 fd8d 	bl	8003dc0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	dce9      	bgt.n	800328a <prvUnlockQueue+0x16>
 80032b6:	e000      	b.n	80032ba <prvUnlockQueue+0x46>
                        break;
 80032b8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80032c2:	f001 fcc1 	bl	8004c48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80032c6:	f001 fc8f 	bl	8004be8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032d2:	e011      	b.n	80032f8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d012      	beq.n	8003302 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3310      	adds	r3, #16
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fc8f 	bl	8003c04 <xTaskRemoveFromEventList>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80032ec:	f000 fd68 	bl	8003dc0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	dce9      	bgt.n	80032d4 <prvUnlockQueue+0x60>
 8003300:	e000      	b.n	8003304 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003302:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800330c:	f001 fc9c 	bl	8004c48 <vPortExitCritical>
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003320:	f001 fc62 	bl	8004be8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800332c:	2301      	movs	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e001      	b.n	8003336 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003336:	f001 fc87 	bl	8004c48 <vPortExitCritical>

    return xReturn;
 800333a:	68fb      	ldr	r3, [r7, #12]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800334c:	f001 fc4c 	bl	8004be8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003358:	429a      	cmp	r2, r3
 800335a:	d102      	bne.n	8003362 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800335c:	2301      	movs	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e001      	b.n	8003366 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003366:	f001 fc6f 	bl	8004c48 <vPortExitCritical>

    return xReturn;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e014      	b.n	80033ae <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003384:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <vQueueAddToRegistry+0x50>)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003390:	490c      	ldr	r1, [pc, #48]	; (80033c4 <vQueueAddToRegistry+0x50>)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <vQueueAddToRegistry+0x50>)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80033a6:	e006      	b.n	80033b6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b07      	cmp	r3, #7
 80033b2:	d9e7      	bls.n	8003384 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	200000e8 	.word	0x200000e8

080033c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80033d8:	f001 fc06 	bl	8004be8 <vPortEnterCritical>
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e2:	b25b      	sxtb	r3, r3
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d103      	bne.n	80033f2 <vQueueWaitForMessageRestricted+0x2a>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d103      	bne.n	8003408 <vQueueWaitForMessageRestricted+0x40>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003408:	f001 fc1e 	bl	8004c48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3324      	adds	r3, #36	; 0x24
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fbc5 	bl	8003bac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003422:	6978      	ldr	r0, [r7, #20]
 8003424:	f7ff ff26 	bl	8003274 <prvUnlockQueue>
    }
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af04      	add	r7, sp, #16
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f001 fcf1 	bl	8004e2c <pvPortMalloc>
 800344a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00e      	beq.n	8003470 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003452:	2058      	movs	r0, #88	; 0x58
 8003454:	f001 fcea 	bl	8004e2c <pvPortMalloc>
 8003458:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
 8003466:	e005      	b.n	8003474 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003468:	6978      	ldr	r0, [r7, #20]
 800346a:	f001 fdbf 	bl	8004fec <vPortFree>
 800346e:	e001      	b.n	8003474 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d013      	beq.n	80034a2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	2300      	movs	r3, #0
 800347e:	9303      	str	r3, [sp, #12]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	9302      	str	r3, [sp, #8]
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f80e 	bl	80034b2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003496:	69f8      	ldr	r0, [r7, #28]
 8003498:	f000 f8a2 	bl	80035e0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800349c:	2301      	movs	r3, #1
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	e002      	b.n	80034a8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
 80034a6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80034a8:	69bb      	ldr	r3, [r7, #24]
    }
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b088      	sub	sp, #32
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	461a      	mov	r2, r3
 80034ca:	21a5      	movs	r1, #165	; 0xa5
 80034cc:	f001 fede 	bl	800528c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034da:	3b01      	subs	r3, #1
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f023 0307 	bic.w	r3, r3, #7
 80034e8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <prvInitialiseNewTask+0x58>
        __asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	617b      	str	r3, [r7, #20]
    }
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01f      	beq.n	8003550 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	e012      	b.n	800353c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	4413      	add	r3, r2
 800351c:	7819      	ldrb	r1, [r3, #0]
 800351e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	3334      	adds	r3, #52	; 0x34
 8003526:	460a      	mov	r2, r1
 8003528:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d006      	beq.n	8003544 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3301      	adds	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b09      	cmp	r3, #9
 8003540:	d9e9      	bls.n	8003516 <prvInitialiseNewTask+0x64>
 8003542:	e000      	b.n	8003546 <prvInitialiseNewTask+0x94>
            {
                break;
 8003544:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800354e:	e003      	b.n	8003558 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	2b06      	cmp	r3, #6
 800355c:	d901      	bls.n	8003562 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800355e:	2306      	movs	r3, #6
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800356c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	2200      	movs	r2, #0
 8003572:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	3304      	adds	r3, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff f8c1 	bl	8002700 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	3318      	adds	r3, #24
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff f8bc 	bl	8002700 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800358c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	f1c3 0207 	rsb	r2, r3, #7
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	3350      	adds	r3, #80	; 0x50
 80035a2:	2204      	movs	r2, #4
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fe70 	bl	800528c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	3354      	adds	r3, #84	; 0x54
 80035b0:	2201      	movs	r2, #1
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fe69 	bl	800528c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	68f9      	ldr	r1, [r7, #12]
 80035be:	69b8      	ldr	r0, [r7, #24]
 80035c0:	f001 f9e4 	bl	800498c <pxPortInitialiseStack>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035d6:	bf00      	nop
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80035e8:	f001 fafe 	bl	8004be8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80035ec:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <prvAddNewTaskToReadyList+0xc0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <prvAddNewTaskToReadyList+0xc0>)
 80035f4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80035f6:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <prvAddNewTaskToReadyList+0xc4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80035fe:	4a29      	ldr	r2, [pc, #164]	; (80036a4 <prvAddNewTaskToReadyList+0xc4>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003604:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <prvAddNewTaskToReadyList+0xc0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d110      	bne.n	800362e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800360c:	f000 fbfc 	bl	8003e08 <prvInitialiseTaskLists>
 8003610:	e00d      	b.n	800362e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003612:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <prvAddNewTaskToReadyList+0xc8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800361a:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <prvAddNewTaskToReadyList+0xc4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	429a      	cmp	r2, r3
 8003626:	d802      	bhi.n	800362e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003628:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <prvAddNewTaskToReadyList+0xc4>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800362e:	4b1f      	ldr	r3, [pc, #124]	; (80036ac <prvAddNewTaskToReadyList+0xcc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <prvAddNewTaskToReadyList+0xcc>)
 8003636:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003638:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <prvAddNewTaskToReadyList+0xcc>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	2201      	movs	r2, #1
 8003646:	409a      	lsls	r2, r3
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <prvAddNewTaskToReadyList+0xd0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <prvAddNewTaskToReadyList+0xd0>)
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <prvAddNewTaskToReadyList+0xd4>)
 8003660:	441a      	add	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7ff f856 	bl	800271a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800366e:	f001 faeb 	bl	8004c48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <prvAddNewTaskToReadyList+0xc8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <prvAddNewTaskToReadyList+0xc4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	429a      	cmp	r2, r3
 8003686:	d207      	bcs.n	8003698 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <prvAddNewTaskToReadyList+0xd8>)
 800368a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000228 	.word	0x20000228
 80036a4:	20000128 	.word	0x20000128
 80036a8:	20000234 	.word	0x20000234
 80036ac:	20000244 	.word	0x20000244
 80036b0:	20000230 	.word	0x20000230
 80036b4:	2000012c 	.word	0x2000012c
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d017      	beq.n	80036fe <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <vTaskDelay+0x60>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <vTaskDelay+0x30>
        __asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60bb      	str	r3, [r7, #8]
    }
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80036ec:	f000 f86c 	bl	80037c8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036f0:	2100      	movs	r1, #0
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fdd2 	bl	800429c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80036f8:	f000 f874 	bl	80037e4 <xTaskResumeAll>
 80036fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <vTaskDelay+0x64>)
 8003706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000250 	.word	0x20000250
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <vTaskStartScheduler+0x88>)
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	2300      	movs	r3, #0
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	2300      	movs	r3, #0
 8003734:	2287      	movs	r2, #135	; 0x87
 8003736:	491e      	ldr	r1, [pc, #120]	; (80037b0 <vTaskStartScheduler+0x8c>)
 8003738:	481e      	ldr	r0, [pc, #120]	; (80037b4 <vTaskStartScheduler+0x90>)
 800373a:	f7ff fe79 	bl	8003430 <xTaskCreate>
 800373e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d102      	bne.n	800374c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003746:	f000 fe0f 	bl	8004368 <xTimerCreateTimerTask>
 800374a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d116      	bne.n	8003780 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	60bb      	str	r3, [r7, #8]
    }
 8003764:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <vTaskStartScheduler+0x94>)
 8003768:	f04f 32ff 	mov.w	r2, #4294967295
 800376c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <vTaskStartScheduler+0x98>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <vTaskStartScheduler+0x9c>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800377a:	f001 f993 	bl	8004aa4 <xPortStartScheduler>
 800377e:	e00e      	b.n	800379e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d10a      	bne.n	800379e <vTaskStartScheduler+0x7a>
        __asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	607b      	str	r3, [r7, #4]
    }
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <vTaskStartScheduler+0xa0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	2000024c 	.word	0x2000024c
 80037b0:	08005d14 	.word	0x08005d14
 80037b4:	08003dd9 	.word	0x08003dd9
 80037b8:	20000248 	.word	0x20000248
 80037bc:	20000234 	.word	0x20000234
 80037c0:	2000022c 	.word	0x2000022c
 80037c4:	2000000c 	.word	0x2000000c

080037c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <vTaskSuspendAll+0x18>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	4a03      	ldr	r2, [pc, #12]	; (80037e0 <vTaskSuspendAll+0x18>)
 80037d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000250 	.word	0x20000250

080037e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <xTaskResumeAll+0x114>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <xTaskResumeAll+0x2c>
        __asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	603b      	str	r3, [r7, #0]
    }
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003810:	f001 f9ea 	bl	8004be8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003814:	4b38      	ldr	r3, [pc, #224]	; (80038f8 <xTaskResumeAll+0x114>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3b01      	subs	r3, #1
 800381a:	4a37      	ldr	r2, [pc, #220]	; (80038f8 <xTaskResumeAll+0x114>)
 800381c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <xTaskResumeAll+0x114>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d161      	bne.n	80038ea <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003826:	4b35      	ldr	r3, [pc, #212]	; (80038fc <xTaskResumeAll+0x118>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d05d      	beq.n	80038ea <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800382e:	e02e      	b.n	800388e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003830:	4b33      	ldr	r3, [pc, #204]	; (8003900 <xTaskResumeAll+0x11c>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3318      	adds	r3, #24
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe ffc9 	bl	80027d4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3304      	adds	r3, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe ffc4 	bl	80027d4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	2201      	movs	r2, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <xTaskResumeAll+0x120>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <xTaskResumeAll+0x120>)
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4a27      	ldr	r2, [pc, #156]	; (8003908 <xTaskResumeAll+0x124>)
 800386c:	441a      	add	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fe ff50 	bl	800271a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387e:	4b23      	ldr	r3, [pc, #140]	; (800390c <xTaskResumeAll+0x128>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	429a      	cmp	r2, r3
 8003886:	d302      	bcc.n	800388e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <xTaskResumeAll+0x12c>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <xTaskResumeAll+0x11c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1cc      	bne.n	8003830 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800389c:	f000 fb32 	bl	8003f04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038a0:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <xTaskResumeAll+0x130>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d010      	beq.n	80038ce <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80038ac:	f000 f846 	bl	800393c <xTaskIncrementTick>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <xTaskResumeAll+0x12c>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f1      	bne.n	80038ac <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <xTaskResumeAll+0x130>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <xTaskResumeAll+0x12c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80038d6:	2301      	movs	r3, #1
 80038d8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <xTaskResumeAll+0x134>)
 80038dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80038ea:	f001 f9ad 	bl	8004c48 <vPortExitCritical>

    return xAlreadyYielded;
 80038ee:	68bb      	ldr	r3, [r7, #8]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000250 	.word	0x20000250
 80038fc:	20000228 	.word	0x20000228
 8003900:	200001e8 	.word	0x200001e8
 8003904:	20000230 	.word	0x20000230
 8003908:	2000012c 	.word	0x2000012c
 800390c:	20000128 	.word	0x20000128
 8003910:	2000023c 	.word	0x2000023c
 8003914:	20000238 	.word	0x20000238
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <xTaskGetTickCount+0x1c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003928:	687b      	ldr	r3, [r7, #4]
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	2000022c 	.word	0x2000022c

0800393c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003946:	4b4e      	ldr	r3, [pc, #312]	; (8003a80 <xTaskIncrementTick+0x144>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 808e 	bne.w	8003a6c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003950:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <xTaskIncrementTick+0x148>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3301      	adds	r3, #1
 8003956:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003958:	4a4a      	ldr	r2, [pc, #296]	; (8003a84 <xTaskIncrementTick+0x148>)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d120      	bne.n	80039a6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003964:	4b48      	ldr	r3, [pc, #288]	; (8003a88 <xTaskIncrementTick+0x14c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <xTaskIncrementTick+0x48>
        __asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	603b      	str	r3, [r7, #0]
    }
 8003980:	bf00      	nop
 8003982:	e7fe      	b.n	8003982 <xTaskIncrementTick+0x46>
 8003984:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <xTaskIncrementTick+0x14c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b40      	ldr	r3, [pc, #256]	; (8003a8c <xTaskIncrementTick+0x150>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a3e      	ldr	r2, [pc, #248]	; (8003a88 <xTaskIncrementTick+0x14c>)
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4a3e      	ldr	r2, [pc, #248]	; (8003a8c <xTaskIncrementTick+0x150>)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <xTaskIncrementTick+0x154>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <xTaskIncrementTick+0x154>)
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	f000 faaf 	bl	8003f04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80039a6:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <xTaskIncrementTick+0x158>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d348      	bcc.n	8003a42 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b0:	4b35      	ldr	r3, [pc, #212]	; (8003a88 <xTaskIncrementTick+0x14c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ba:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <xTaskIncrementTick+0x158>)
 80039bc:	f04f 32ff 	mov.w	r2, #4294967295
 80039c0:	601a      	str	r2, [r3, #0]
                    break;
 80039c2:	e03e      	b.n	8003a42 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <xTaskIncrementTick+0x14c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d203      	bcs.n	80039e4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80039dc:	4a2d      	ldr	r2, [pc, #180]	; (8003a94 <xTaskIncrementTick+0x158>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039e2:	e02e      	b.n	8003a42 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fef3 	bl	80027d4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3318      	adds	r3, #24
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe feea 	bl	80027d4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	2201      	movs	r2, #1
 8003a06:	409a      	lsls	r2, r3
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <xTaskIncrementTick+0x15c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <xTaskIncrementTick+0x15c>)
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <xTaskIncrementTick+0x160>)
 8003a20:	441a      	add	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3304      	adds	r3, #4
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f7fe fe76 	bl	800271a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a32:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <xTaskIncrementTick+0x164>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3b9      	bcc.n	80039b0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a40:	e7b6      	b.n	80039b0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <xTaskIncrementTick+0x164>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a48:	4914      	ldr	r1, [pc, #80]	; (8003a9c <xTaskIncrementTick+0x160>)
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d901      	bls.n	8003a5e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <xTaskIncrementTick+0x168>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003a66:	2301      	movs	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	e004      	b.n	8003a76 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <xTaskIncrementTick+0x16c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <xTaskIncrementTick+0x16c>)
 8003a74:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003a76:	697b      	ldr	r3, [r7, #20]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000250 	.word	0x20000250
 8003a84:	2000022c 	.word	0x2000022c
 8003a88:	200001e0 	.word	0x200001e0
 8003a8c:	200001e4 	.word	0x200001e4
 8003a90:	20000240 	.word	0x20000240
 8003a94:	20000248 	.word	0x20000248
 8003a98:	20000230 	.word	0x20000230
 8003a9c:	2000012c 	.word	0x2000012c
 8003aa0:	20000128 	.word	0x20000128
 8003aa4:	2000023c 	.word	0x2000023c
 8003aa8:	20000238 	.word	0x20000238

08003aac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ab2:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <vTaskSwitchContext+0xa4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003aba:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <vTaskSwitchContext+0xa8>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003ac0:	e03f      	b.n	8003b42 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <vTaskSwitchContext+0xa8>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac8:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <vTaskSwitchContext+0xac>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	fab3 f383 	clz	r3, r3
 8003ad4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003ad6:	7afb      	ldrb	r3, [r7, #11]
 8003ad8:	f1c3 031f 	rsb	r3, r3, #31
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	491f      	ldr	r1, [pc, #124]	; (8003b5c <vTaskSwitchContext+0xb0>)
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	607b      	str	r3, [r7, #4]
    }
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <vTaskSwitchContext+0x5a>
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <vTaskSwitchContext+0xb0>)
 8003b14:	4413      	add	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	3308      	adds	r3, #8
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d104      	bne.n	8003b38 <vTaskSwitchContext+0x8c>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <vTaskSwitchContext+0xb4>)
 8003b40:	6013      	str	r3, [r2, #0]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000250 	.word	0x20000250
 8003b54:	2000023c 	.word	0x2000023c
 8003b58:	20000230 	.word	0x20000230
 8003b5c:	2000012c 	.word	0x2000012c
 8003b60:	20000128 	.word	0x20000128

08003b64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	60fb      	str	r3, [r7, #12]
    }
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <vTaskPlaceOnEventList+0x44>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3318      	adds	r3, #24
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fde5 	bl	8002762 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b98:	2101      	movs	r1, #1
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f000 fb7e 	bl	800429c <prvAddCurrentTaskToDelayedList>
}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000128 	.word	0x20000128

08003bac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	617b      	str	r3, [r7, #20]
    }
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <vTaskPlaceOnEventListRestricted+0x54>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3318      	adds	r3, #24
 8003bda:	4619      	mov	r1, r3
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7fe fd9c 	bl	800271a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	68b8      	ldr	r0, [r7, #8]
 8003bf2:	f000 fb53 	bl	800429c <prvAddCurrentTaskToDelayedList>
    }
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000128 	.word	0x20000128

08003c04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	60fb      	str	r3, [r7, #12]
    }
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3318      	adds	r3, #24
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe fdcd 	bl	80027d4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <xTaskRemoveFromEventList+0xac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11c      	bne.n	8003c7c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fdc4 	bl	80027d4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <xTaskRemoveFromEventList+0xb0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <xTaskRemoveFromEventList+0xb0>)
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <xTaskRemoveFromEventList+0xb4>)
 8003c6c:	441a      	add	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7fe fd50 	bl	800271a <vListInsertEnd>
 8003c7a:	e005      	b.n	8003c88 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	3318      	adds	r3, #24
 8003c80:	4619      	mov	r1, r3
 8003c82:	480e      	ldr	r0, [pc, #56]	; (8003cbc <xTaskRemoveFromEventList+0xb8>)
 8003c84:	f7fe fd49 	bl	800271a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <xTaskRemoveFromEventList+0xbc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d905      	bls.n	8003ca2 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <xTaskRemoveFromEventList+0xc0>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e001      	b.n	8003ca6 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003ca6:	697b      	ldr	r3, [r7, #20]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000250 	.word	0x20000250
 8003cb4:	20000230 	.word	0x20000230
 8003cb8:	2000012c 	.word	0x2000012c
 8003cbc:	200001e8 	.word	0x200001e8
 8003cc0:	20000128 	.word	0x20000128
 8003cc4:	2000023c 	.word	0x2000023c

08003cc8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <vTaskInternalSetTimeOutState+0x24>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <vTaskInternalSetTimeOutState+0x28>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	20000240 	.word	0x20000240
 8003cf0:	2000022c 	.word	0x2000022c

08003cf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	613b      	str	r3, [r7, #16]
    }
 8003d16:	bf00      	nop
 8003d18:	e7fe      	b.n	8003d18 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60fb      	str	r3, [r7, #12]
    }
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003d36:	f000 ff57 	bl	8004be8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <xTaskCheckForTimeOut+0xc4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d102      	bne.n	8003d5a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	e026      	b.n	8003da8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <xTaskCheckForTimeOut+0xc8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d00a      	beq.n	8003d7c <xTaskCheckForTimeOut+0x88>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d305      	bcc.n	8003d7c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e015      	b.n	8003da8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20b      	bcs.n	8003d9e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ff98 	bl	8003cc8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e004      	b.n	8003da8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003da8:	f000 ff4e 	bl	8004c48 <vPortExitCritical>

    return xReturn;
 8003dac:	69fb      	ldr	r3, [r7, #28]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2000022c 	.word	0x2000022c
 8003dbc:	20000240 	.word	0x20000240

08003dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <vTaskMissedYield+0x14>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	2000023c 	.word	0x2000023c

08003dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003de0:	f000 f852 	bl	8003e88 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <prvIdleTask+0x28>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d9f9      	bls.n	8003de0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <prvIdleTask+0x2c>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003dfc:	e7f0      	b.n	8003de0 <prvIdleTask+0x8>
 8003dfe:	bf00      	nop
 8003e00:	2000012c 	.word	0x2000012c
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	e00c      	b.n	8003e2e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <prvInitialiseTaskLists+0x60>)
 8003e20:	4413      	add	r3, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fc4c 	bl	80026c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b06      	cmp	r3, #6
 8003e32:	d9ef      	bls.n	8003e14 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003e34:	480d      	ldr	r0, [pc, #52]	; (8003e6c <prvInitialiseTaskLists+0x64>)
 8003e36:	f7fe fc43 	bl	80026c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003e3a:	480d      	ldr	r0, [pc, #52]	; (8003e70 <prvInitialiseTaskLists+0x68>)
 8003e3c:	f7fe fc40 	bl	80026c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003e40:	480c      	ldr	r0, [pc, #48]	; (8003e74 <prvInitialiseTaskLists+0x6c>)
 8003e42:	f7fe fc3d 	bl	80026c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003e46:	480c      	ldr	r0, [pc, #48]	; (8003e78 <prvInitialiseTaskLists+0x70>)
 8003e48:	f7fe fc3a 	bl	80026c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003e4c:	480b      	ldr	r0, [pc, #44]	; (8003e7c <prvInitialiseTaskLists+0x74>)
 8003e4e:	f7fe fc37 	bl	80026c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <prvInitialiseTaskLists+0x78>)
 8003e54:	4a05      	ldr	r2, [pc, #20]	; (8003e6c <prvInitialiseTaskLists+0x64>)
 8003e56:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <prvInitialiseTaskLists+0x7c>)
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <prvInitialiseTaskLists+0x68>)
 8003e5c:	601a      	str	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2000012c 	.word	0x2000012c
 8003e6c:	200001b8 	.word	0x200001b8
 8003e70:	200001cc 	.word	0x200001cc
 8003e74:	200001e8 	.word	0x200001e8
 8003e78:	200001fc 	.word	0x200001fc
 8003e7c:	20000214 	.word	0x20000214
 8003e80:	200001e0 	.word	0x200001e0
 8003e84:	200001e4 	.word	0x200001e4

08003e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e8e:	e019      	b.n	8003ec4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003e90:	f000 feaa 	bl	8004be8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e94:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <prvCheckTasksWaitingTermination+0x50>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fc97 	bl	80027d4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <prvCheckTasksWaitingTermination+0x54>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <prvCheckTasksWaitingTermination+0x54>)
 8003eae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <prvCheckTasksWaitingTermination+0x58>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <prvCheckTasksWaitingTermination+0x58>)
 8003eb8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003eba:	f000 fec5 	bl	8004c48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f810 	bl	8003ee4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <prvCheckTasksWaitingTermination+0x58>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e1      	bne.n	8003e90 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200001fc 	.word	0x200001fc
 8003edc:	20000228 	.word	0x20000228
 8003ee0:	20000210 	.word	0x20000210

08003ee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 f87b 	bl	8004fec <vPortFree>
                vPortFree( pxTCB );
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f001 f878 	bl	8004fec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <prvResetNextTaskUnblockTime+0x30>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <prvResetNextTaskUnblockTime+0x34>)
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295
 8003f18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003f1a:	e005      	b.n	8003f28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <prvResetNextTaskUnblockTime+0x30>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <prvResetNextTaskUnblockTime+0x34>)
 8003f26:	6013      	str	r3, [r2, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	200001e0 	.word	0x200001e0
 8003f38:	20000248 	.word	0x20000248

08003f3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <xTaskGetSchedulerState+0x34>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	e008      	b.n	8003f62 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <xTaskGetSchedulerState+0x38>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	607b      	str	r3, [r7, #4]
 8003f5c:	e001      	b.n	8003f62 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003f62:	687b      	ldr	r3, [r7, #4]
    }
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	20000234 	.word	0x20000234
 8003f74:	20000250 	.word	0x20000250

08003f78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d05e      	beq.n	800404c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <xTaskPriorityInherit+0xe0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d24e      	bcs.n	800403a <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	db06      	blt.n	8003fb2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa4:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <xTaskPriorityInherit+0xe0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	f1c3 0207 	rsb	r2, r3, #7
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6959      	ldr	r1, [r3, #20]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4a26      	ldr	r2, [pc, #152]	; (800405c <xTaskPriorityInherit+0xe4>)
 8003fc4:	4413      	add	r3, r2
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	d12f      	bne.n	800402a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fc00 	bl	80027d4 <uxListRemove>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	2201      	movs	r2, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <xTaskPriorityInherit+0xe8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4013      	ands	r3, r2
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <xTaskPriorityInherit+0xe8>)
 8003fee:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ff0:	4b19      	ldr	r3, [pc, #100]	; (8004058 <xTaskPriorityInherit+0xe0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <xTaskPriorityInherit+0xe8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	4a15      	ldr	r2, [pc, #84]	; (8004060 <xTaskPriorityInherit+0xe8>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4a10      	ldr	r2, [pc, #64]	; (800405c <xTaskPriorityInherit+0xe4>)
 800401a:	441a      	add	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f7fe fb79 	bl	800271a <vListInsertEnd>
 8004028:	e004      	b.n	8004034 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <xTaskPriorityInherit+0xe0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e008      	b.n	800404c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <xTaskPriorityInherit+0xe0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	429a      	cmp	r2, r3
 8004046:	d201      	bcs.n	800404c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800404c:	68fb      	ldr	r3, [r7, #12]
    }
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000128 	.word	0x20000128
 800405c:	2000012c 	.word	0x2000012c
 8004060:	20000230 	.word	0x20000230

08004064 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d063      	beq.n	8004142 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <xTaskPriorityDisinherit+0xe8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d00a      	beq.n	800409a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60fb      	str	r3, [r7, #12]
    }
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60bb      	str	r3, [r7, #8]
    }
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040bc:	1e5a      	subs	r2, r3, #1
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d039      	beq.n	8004142 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d135      	bne.n	8004142 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	3304      	adds	r3, #4
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fb7a 	bl	80027d4 <uxListRemove>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	2201      	movs	r2, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43da      	mvns	r2, r3
 80040f2:	4b17      	ldr	r3, [pc, #92]	; (8004150 <xTaskPriorityDisinherit+0xec>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4013      	ands	r3, r2
 80040f8:	4a15      	ldr	r2, [pc, #84]	; (8004150 <xTaskPriorityDisinherit+0xec>)
 80040fa:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	f1c3 0207 	rsb	r2, r3, #7
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	2201      	movs	r2, #1
 8004116:	409a      	lsls	r2, r3
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <xTaskPriorityDisinherit+0xec>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4313      	orrs	r3, r2
 800411e:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <xTaskPriorityDisinherit+0xec>)
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <xTaskPriorityDisinherit+0xf0>)
 8004130:	441a      	add	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	3304      	adds	r3, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7fe faee 	bl	800271a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004142:	697b      	ldr	r3, [r7, #20]
    }
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000128 	.word	0x20000128
 8004150:	20000230 	.word	0x20000230
 8004154:	2000012c 	.word	0x2000012c

08004158 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004166:	2301      	movs	r3, #1
 8004168:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d077      	beq.n	8004260 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60fb      	str	r3, [r7, #12]
    }
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d902      	bls.n	800419e <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e002      	b.n	80041a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a2:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d058      	beq.n	8004260 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d153      	bne.n	8004260 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80041b8:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10a      	bne.n	80041d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60bb      	str	r3, [r7, #8]
    }
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	db04      	blt.n	80041f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f1c3 0207 	rsb	r2, r3, #7
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	6959      	ldr	r1, [r3, #20]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004206:	4413      	add	r3, r2
 8004208:	4299      	cmp	r1, r3
 800420a:	d129      	bne.n	8004260 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	3304      	adds	r3, #4
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe fadf 	bl	80027d4 <uxListRemove>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	2201      	movs	r2, #1
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4013      	ands	r3, r2
 800422e:	4a10      	ldr	r2, [pc, #64]	; (8004270 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004230:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	4a0b      	ldr	r2, [pc, #44]	; (8004270 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4a06      	ldr	r2, [pc, #24]	; (800426c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004252:	441a      	add	r2, r3
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7fe fa5d 	bl	800271a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004260:	bf00      	nop
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000128 	.word	0x20000128
 800426c:	2000012c 	.word	0x2000012c
 8004270:	20000230 	.word	0x20000230

08004274 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004278:	4b07      	ldr	r3, [pc, #28]	; (8004298 <pvTaskIncrementMutexHeldCount+0x24>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <pvTaskIncrementMutexHeldCount+0x24>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004286:	3201      	adds	r2, #1
 8004288:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800428a:	4b03      	ldr	r3, [pc, #12]	; (8004298 <pvTaskIncrementMutexHeldCount+0x24>)
 800428c:	681b      	ldr	r3, [r3, #0]
    }
 800428e:	4618      	mov	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	20000128 	.word	0x20000128

0800429c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80042a6:	4b29      	ldr	r3, [pc, #164]	; (800434c <prvAddCurrentTaskToDelayedList+0xb0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ac:	4b28      	ldr	r3, [pc, #160]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fa8e 	bl	80027d4 <uxListRemove>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	2201      	movs	r2, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43da      	mvns	r2, r3
 80042cc:	4b21      	ldr	r3, [pc, #132]	; (8004354 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4013      	ands	r3, r2
 80042d2:	4a20      	ldr	r2, [pc, #128]	; (8004354 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d10a      	bne.n	80042f4 <prvAddCurrentTaskToDelayedList+0x58>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4619      	mov	r1, r3
 80042ec:	481a      	ldr	r0, [pc, #104]	; (8004358 <prvAddCurrentTaskToDelayedList+0xbc>)
 80042ee:	f7fe fa14 	bl	800271a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80042f2:	e026      	b.n	8004342 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	429a      	cmp	r2, r3
 800430a:	d209      	bcs.n	8004320 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <prvAddCurrentTaskToDelayedList+0xc0>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3304      	adds	r3, #4
 8004316:	4619      	mov	r1, r3
 8004318:	4610      	mov	r0, r2
 800431a:	f7fe fa22 	bl	8002762 <vListInsert>
}
 800431e:	e010      	b.n	8004342 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3304      	adds	r3, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7fe fa18 	bl	8002762 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	d202      	bcs.n	8004342 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800433c:	4a09      	ldr	r2, [pc, #36]	; (8004364 <prvAddCurrentTaskToDelayedList+0xc8>)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6013      	str	r3, [r2, #0]
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	2000022c 	.word	0x2000022c
 8004350:	20000128 	.word	0x20000128
 8004354:	20000230 	.word	0x20000230
 8004358:	20000214 	.word	0x20000214
 800435c:	200001e4 	.word	0x200001e4
 8004360:	200001e0 	.word	0x200001e0
 8004364:	20000248 	.word	0x20000248

08004368 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800436e:	2300      	movs	r3, #0
 8004370:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004372:	f000 fad5 	bl	8004920 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <xTimerCreateTimerTask+0x54>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <xTimerCreateTimerTask+0x58>)
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2302      	movs	r3, #2
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800438c:	490d      	ldr	r1, [pc, #52]	; (80043c4 <xTimerCreateTimerTask+0x5c>)
 800438e:	480e      	ldr	r0, [pc, #56]	; (80043c8 <xTimerCreateTimerTask+0x60>)
 8004390:	f7ff f84e 	bl	8003430 <xTaskCreate>
 8004394:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	603b      	str	r3, [r7, #0]
    }
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80043b2:	687b      	ldr	r3, [r7, #4]
    }
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000284 	.word	0x20000284
 80043c0:	20000288 	.word	0x20000288
 80043c4:	08005d1c 	.word	0x08005d1c
 80043c8:	08004501 	.word	0x08004501

080043cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80043da:	2300      	movs	r3, #0
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <xTimerGenericCommand+0x2e>
        __asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	623b      	str	r3, [r7, #32]
    }
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80043fa:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <xTimerGenericCommand+0x98>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d02a      	beq.n	8004458 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b05      	cmp	r3, #5
 8004412:	dc18      	bgt.n	8004446 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004414:	f7ff fd92 	bl	8003f3c <xTaskGetSchedulerState>
 8004418:	4603      	mov	r3, r0
 800441a:	2b02      	cmp	r3, #2
 800441c:	d109      	bne.n	8004432 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <xTimerGenericCommand+0x98>)
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	f107 0114 	add.w	r1, r7, #20
 8004426:	2300      	movs	r3, #0
 8004428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442a:	f7fe fae7 	bl	80029fc <xQueueGenericSend>
 800442e:	6278      	str	r0, [r7, #36]	; 0x24
 8004430:	e012      	b.n	8004458 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004432:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <xTimerGenericCommand+0x98>)
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	f107 0114 	add.w	r1, r7, #20
 800443a:	2300      	movs	r3, #0
 800443c:	2200      	movs	r2, #0
 800443e:	f7fe fadd 	bl	80029fc <xQueueGenericSend>
 8004442:	6278      	str	r0, [r7, #36]	; 0x24
 8004444:	e008      	b.n	8004458 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <xTimerGenericCommand+0x98>)
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	f107 0114 	add.w	r1, r7, #20
 800444e:	2300      	movs	r3, #0
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	f7fe fbd1 	bl	8002bf8 <xQueueGenericSendFromISR>
 8004456:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800445a:	4618      	mov	r0, r3
 800445c:	3728      	adds	r7, #40	; 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000284 	.word	0x20000284

08004468 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <prvProcessExpiredTimer+0x94>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe f9a7 	bl	80027d4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d022      	beq.n	80044da <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	18d1      	adds	r1, r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	6978      	ldr	r0, [r7, #20]
 80044a2:	f000 f8d1 	bl	8004648 <prvInsertTimerInActiveList>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01f      	beq.n	80044ec <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044ac:	2300      	movs	r3, #0
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2300      	movs	r3, #0
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	2100      	movs	r1, #0
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	f7ff ff88 	bl	80043cc <xTimerGenericCommand>
 80044bc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d113      	bne.n	80044ec <prvProcessExpiredTimer+0x84>
        __asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	60fb      	str	r3, [r7, #12]
    }
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	6978      	ldr	r0, [r7, #20]
 80044f2:	4798      	blx	r3
    }
 80044f4:	bf00      	nop
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	2000027c 	.word	0x2000027c

08004500 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004508:	f107 0308 	add.w	r3, r7, #8
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f857 	bl	80045c0 <prvGetNextExpireTime>
 8004512:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4619      	mov	r1, r3
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f803 	bl	8004524 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800451e:	f000 f8d5 	bl	80046cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004522:	e7f1      	b.n	8004508 <prvTimerTask+0x8>

08004524 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800452e:	f7ff f94b 	bl	80037c8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f866 	bl	8004608 <prvSampleTimeNow>
 800453c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d130      	bne.n	80045a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <prvProcessTimerOrBlockTask+0x3c>
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	429a      	cmp	r2, r3
 8004550:	d806      	bhi.n	8004560 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004552:	f7ff f947 	bl	80037e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ff85 	bl	8004468 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800455e:	e024      	b.n	80045aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004566:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <prvProcessTimerOrBlockTask+0x90>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <prvProcessTimerOrBlockTask+0x50>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <prvProcessTimerOrBlockTask+0x52>
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <prvProcessTimerOrBlockTask+0x94>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	4619      	mov	r1, r3
 8004586:	f7fe ff1f 	bl	80033c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800458a:	f7ff f92b 	bl	80037e4 <xTaskResumeAll>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <prvProcessTimerOrBlockTask+0x98>)
 8004596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	f3bf 8f6f 	isb	sy
    }
 80045a4:	e001      	b.n	80045aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80045a6:	f7ff f91d 	bl	80037e4 <xTaskResumeAll>
    }
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000280 	.word	0x20000280
 80045b8:	20000284 	.word	0x20000284
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <prvGetNextExpireTime+0x44>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <prvGetNextExpireTime+0x16>
 80045d2:	2201      	movs	r2, #1
 80045d4:	e000      	b.n	80045d8 <prvGetNextExpireTime+0x18>
 80045d6:	2200      	movs	r2, #0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <prvGetNextExpireTime+0x44>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e001      	b.n	80045f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80045f4:	68fb      	ldr	r3, [r7, #12]
    }
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	2000027c 	.word	0x2000027c

08004608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004610:	f7ff f984 	bl	800391c <xTaskGetTickCount>
 8004614:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <prvSampleTimeNow+0x3c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	429a      	cmp	r2, r3
 800461e:	d205      	bcs.n	800462c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004620:	f000 f91a 	bl	8004858 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e002      	b.n	8004632 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004632:	4a04      	ldr	r2, [pc, #16]	; (8004644 <prvSampleTimeNow+0x3c>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004638:	68fb      	ldr	r3, [r7, #12]
    }
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	2000028c 	.word	0x2000028c

08004648 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d812      	bhi.n	8004694 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	1ad2      	subs	r2, r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	429a      	cmp	r2, r3
 800467a:	d302      	bcc.n	8004682 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800467c:	2301      	movs	r3, #1
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e01b      	b.n	80046ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <prvInsertTimerInActiveList+0x7c>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7fe f868 	bl	8002762 <vListInsert>
 8004692:	e012      	b.n	80046ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d206      	bcs.n	80046aa <prvInsertTimerInActiveList+0x62>
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d302      	bcc.n	80046aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80046a4:	2301      	movs	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e007      	b.n	80046ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <prvInsertTimerInActiveList+0x80>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3304      	adds	r3, #4
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f7fe f854 	bl	8002762 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80046ba:	697b      	ldr	r3, [r7, #20]
    }
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000280 	.word	0x20000280
 80046c8:	2000027c 	.word	0x2000027c

080046cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046d2:	e0ae      	b.n	8004832 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f2c0 80aa 	blt.w	8004830 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	3304      	adds	r3, #4
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe f871 	bl	80027d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff87 	bl	8004608 <prvSampleTimeNow>
 80046fa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b09      	cmp	r3, #9
 8004700:	f200 8097 	bhi.w	8004832 <prvProcessReceivedCommands+0x166>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <prvProcessReceivedCommands+0x40>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004735 	.word	0x08004735
 8004710:	08004735 	.word	0x08004735
 8004714:	08004735 	.word	0x08004735
 8004718:	080047a9 	.word	0x080047a9
 800471c:	080047bd 	.word	0x080047bd
 8004720:	08004807 	.word	0x08004807
 8004724:	08004735 	.word	0x08004735
 8004728:	08004735 	.word	0x08004735
 800472c:	080047a9 	.word	0x080047a9
 8004730:	080047bd 	.word	0x080047bd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	b2da      	uxtb	r2, r3
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	18d1      	adds	r1, r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a3a      	ldr	r2, [r7, #32]
 8004752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004754:	f7ff ff78 	bl	8004648 <prvInsertTimerInActiveList>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d069      	beq.n	8004832 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004764:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d05e      	beq.n	8004832 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	441a      	add	r2, r3
 800477c:	2300      	movs	r3, #0
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	2300      	movs	r3, #0
 8004782:	2100      	movs	r1, #0
 8004784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004786:	f7ff fe21 	bl	80043cc <xTimerGenericCommand>
 800478a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d14f      	bne.n	8004832 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	61bb      	str	r3, [r7, #24]
    }
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80047ba:	e03a      	b.n	8004832 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	617b      	str	r3, [r7, #20]
    }
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	18d1      	adds	r1, r2, r3
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004800:	f7ff ff22 	bl	8004648 <prvInsertTimerInActiveList>
                        break;
 8004804:	e015      	b.n	8004832 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d103      	bne.n	800481c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004816:	f000 fbe9 	bl	8004fec <vPortFree>
 800481a:	e00a      	b.n	8004832 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004822:	f023 0301 	bic.w	r3, r3, #1
 8004826:	b2da      	uxtb	r2, r3
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800482e:	e000      	b.n	8004832 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004830:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <prvProcessReceivedCommands+0x188>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f107 0108 	add.w	r1, r7, #8
 800483a:	2200      	movs	r2, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f7fe fa85 	bl	8002d4c <xQueueReceive>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	f47f af45 	bne.w	80046d4 <prvProcessReceivedCommands+0x8>
        }
    }
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	3728      	adds	r7, #40	; 0x28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000284 	.word	0x20000284

08004858 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800485e:	e048      	b.n	80048f2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004860:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <prvSwitchTimerLists+0xc0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486a:	4b2b      	ldr	r3, [pc, #172]	; (8004918 <prvSwitchTimerLists+0xc0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3304      	adds	r3, #4
 8004878:	4618      	mov	r0, r3
 800487a:	f7fd ffab 	bl	80027d4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d02e      	beq.n	80048f2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d90e      	bls.n	80048c4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048b2:	4b19      	ldr	r3, [pc, #100]	; (8004918 <prvSwitchTimerLists+0xc0>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f7fd ff50 	bl	8002762 <vListInsert>
 80048c2:	e016      	b.n	80048f2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048c4:	2300      	movs	r3, #0
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	2100      	movs	r1, #0
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff fd7c 	bl	80043cc <xTimerGenericCommand>
 80048d4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	603b      	str	r3, [r7, #0]
    }
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <prvSwitchTimerLists+0xc0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1b1      	bne.n	8004860 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <prvSwitchTimerLists+0xc0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004902:	4b06      	ldr	r3, [pc, #24]	; (800491c <prvSwitchTimerLists+0xc4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a04      	ldr	r2, [pc, #16]	; (8004918 <prvSwitchTimerLists+0xc0>)
 8004908:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800490a:	4a04      	ldr	r2, [pc, #16]	; (800491c <prvSwitchTimerLists+0xc4>)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	6013      	str	r3, [r2, #0]
    }
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	2000027c 	.word	0x2000027c
 800491c:	20000280 	.word	0x20000280

08004920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004924:	f000 f960 	bl	8004be8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <prvCheckForValidListAndQueue+0x54>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11d      	bne.n	800496c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004930:	4811      	ldr	r0, [pc, #68]	; (8004978 <prvCheckForValidListAndQueue+0x58>)
 8004932:	f7fd fec5 	bl	80026c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004936:	4811      	ldr	r0, [pc, #68]	; (800497c <prvCheckForValidListAndQueue+0x5c>)
 8004938:	f7fd fec2 	bl	80026c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800493c:	4b10      	ldr	r3, [pc, #64]	; (8004980 <prvCheckForValidListAndQueue+0x60>)
 800493e:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <prvCheckForValidListAndQueue+0x58>)
 8004940:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <prvCheckForValidListAndQueue+0x64>)
 8004944:	4a0d      	ldr	r2, [pc, #52]	; (800497c <prvCheckForValidListAndQueue+0x5c>)
 8004946:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004948:	2200      	movs	r2, #0
 800494a:	210c      	movs	r1, #12
 800494c:	200a      	movs	r0, #10
 800494e:	f7fd ffd3 	bl	80028f8 <xQueueGenericCreate>
 8004952:	4603      	mov	r3, r0
 8004954:	4a07      	ldr	r2, [pc, #28]	; (8004974 <prvCheckForValidListAndQueue+0x54>)
 8004956:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <prvCheckForValidListAndQueue+0x54>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <prvCheckForValidListAndQueue+0x54>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4908      	ldr	r1, [pc, #32]	; (8004988 <prvCheckForValidListAndQueue+0x68>)
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe fd04 	bl	8003374 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800496c:	f000 f96c 	bl	8004c48 <vPortExitCritical>
    }
 8004970:	bf00      	nop
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000284 	.word	0x20000284
 8004978:	20000254 	.word	0x20000254
 800497c:	20000268 	.word	0x20000268
 8004980:	2000027c 	.word	0x2000027c
 8004984:	20000280 	.word	0x20000280
 8004988:	08005d24 	.word	0x08005d24

0800498c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b04      	subs	r3, #4
 800499c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3b04      	subs	r3, #4
 80049aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b04      	subs	r3, #4
 80049ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80049bc:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <pxPortInitialiseStack+0x64>)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3b14      	subs	r3, #20
 80049c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b04      	subs	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f06f 0202 	mvn.w	r2, #2
 80049da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3b20      	subs	r3, #32
 80049e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	080049f5 	.word	0x080049f5

080049f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <prvTaskExitError+0x54>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d00a      	beq.n	8004a1e <prvTaskExitError+0x2a>
        __asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60fb      	str	r3, [r7, #12]
    }
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <prvTaskExitError+0x28>
        __asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60bb      	str	r3, [r7, #8]
    }
 8004a30:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004a32:	bf00      	nop
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0fc      	beq.n	8004a34 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	20000010 	.word	0x20000010
 8004a4c:	00000000 	.word	0x00000000

08004a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <pxCurrentTCBConst2>)
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	6808      	ldr	r0, [r1, #0]
 8004a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5a:	f380 8809 	msr	PSP, r0
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8811 	msr	BASEPRI, r0
 8004a6a:	4770      	bx	lr
 8004a6c:	f3af 8000 	nop.w

08004a70 <pxCurrentTCBConst2>:
 8004a70:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004a78:	4808      	ldr	r0, [pc, #32]	; (8004a9c <prvPortStartFirstTask+0x24>)
 8004a7a:	6800      	ldr	r0, [r0, #0]
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f380 8808 	msr	MSP, r0
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8814 	msr	CONTROL, r0
 8004a8a:	b662      	cpsie	i
 8004a8c:	b661      	cpsie	f
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	df00      	svc	0
 8004a98:	bf00      	nop
 8004a9a:	0000      	.short	0x0000
 8004a9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop

08004aa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004aaa:	4b46      	ldr	r3, [pc, #280]	; (8004bc4 <xPortStartScheduler+0x120>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a46      	ldr	r2, [pc, #280]	; (8004bc8 <xPortStartScheduler+0x124>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d10a      	bne.n	8004aca <xPortStartScheduler+0x26>
        __asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	613b      	str	r3, [r7, #16]
    }
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004aca:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <xPortStartScheduler+0x120>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a3f      	ldr	r2, [pc, #252]	; (8004bcc <xPortStartScheduler+0x128>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10a      	bne.n	8004aea <xPortStartScheduler+0x46>
        __asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	60fb      	str	r3, [r7, #12]
    }
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aea:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <xPortStartScheduler+0x12c>)
 8004aec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	22ff      	movs	r2, #255	; 0xff
 8004afa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <xPortStartScheduler+0x130>)
 8004b10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b12:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <xPortStartScheduler+0x134>)
 8004b14:	2207      	movs	r2, #7
 8004b16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b18:	e009      	b.n	8004b2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <xPortStartScheduler+0x134>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	4a2d      	ldr	r2, [pc, #180]	; (8004bd8 <xPortStartScheduler+0x134>)
 8004b22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d0ef      	beq.n	8004b1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b3a:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <xPortStartScheduler+0x134>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1c3 0307 	rsb	r3, r3, #7
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d00a      	beq.n	8004b5c <xPortStartScheduler+0xb8>
        __asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	60bb      	str	r3, [r7, #8]
    }
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b5c:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <xPortStartScheduler+0x134>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <xPortStartScheduler+0x134>)
 8004b64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b66:	4b1c      	ldr	r3, [pc, #112]	; (8004bd8 <xPortStartScheduler+0x134>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <xPortStartScheduler+0x134>)
 8004b70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <xPortStartScheduler+0x138>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <xPortStartScheduler+0x138>)
 8004b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <xPortStartScheduler+0x138>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <xPortStartScheduler+0x138>)
 8004b8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004b92:	f000 f8db 	bl	8004d4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <xPortStartScheduler+0x13c>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004b9c:	f000 f8fa 	bl	8004d94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <xPortStartScheduler+0x140>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <xPortStartScheduler+0x140>)
 8004ba6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004baa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004bac:	f7ff ff64 	bl	8004a78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004bb0:	f7fe ff7c 	bl	8003aac <vTaskSwitchContext>
    prvTaskExitError();
 8004bb4:	f7ff ff1e 	bl	80049f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	e000ed00 	.word	0xe000ed00
 8004bc8:	410fc271 	.word	0x410fc271
 8004bcc:	410fc270 	.word	0x410fc270
 8004bd0:	e000e400 	.word	0xe000e400
 8004bd4:	20000290 	.word	0x20000290
 8004bd8:	20000294 	.word	0x20000294
 8004bdc:	e000ed20 	.word	0xe000ed20
 8004be0:	20000010 	.word	0x20000010
 8004be4:	e000ef34 	.word	0xe000ef34

08004be8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
        __asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	607b      	str	r3, [r7, #4]
    }
 8004c00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c02:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <vPortEnterCritical+0x58>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3301      	adds	r3, #1
 8004c08:	4a0d      	ldr	r2, [pc, #52]	; (8004c40 <vPortEnterCritical+0x58>)
 8004c0a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <vPortEnterCritical+0x58>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10f      	bne.n	8004c34 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <vPortEnterCritical+0x5c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <vPortEnterCritical+0x4c>
        __asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	603b      	str	r3, [r7, #0]
    }
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <vPortEnterCritical+0x4a>
    }
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	20000010 	.word	0x20000010
 8004c44:	e000ed04 	.word	0xe000ed04

08004c48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c4e:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <vPortExitCritical+0x50>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <vPortExitCritical+0x24>
        __asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	607b      	str	r3, [r7, #4]
    }
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <vPortExitCritical+0x50>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <vPortExitCritical+0x50>)
 8004c74:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <vPortExitCritical+0x50>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <vPortExitCritical+0x42>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f383 8811 	msr	BASEPRI, r3
    }
 8004c88:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000010 	.word	0x20000010
 8004c9c:	00000000 	.word	0x00000000

08004ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004ca0:	f3ef 8009 	mrs	r0, PSP
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <pxCurrentTCBConst>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	f01e 0f10 	tst.w	lr, #16
 8004cb0:	bf08      	it	eq
 8004cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cba:	6010      	str	r0, [r2, #0]
 8004cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cc4:	f380 8811 	msr	BASEPRI, r0
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f7fe feec 	bl	8003aac <vTaskSwitchContext>
 8004cd4:	f04f 0000 	mov.w	r0, #0
 8004cd8:	f380 8811 	msr	BASEPRI, r0
 8004cdc:	bc09      	pop	{r0, r3}
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	6808      	ldr	r0, [r1, #0]
 8004ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce6:	f01e 0f10 	tst.w	lr, #16
 8004cea:	bf08      	it	eq
 8004cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cf0:	f380 8809 	msr	PSP, r0
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	f3af 8000 	nop.w

08004d00 <pxCurrentTCBConst>:
 8004d00:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
    }
 8004d20:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d22:	f7fe fe0b 	bl	800393c <xTaskIncrementTick>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <SysTick_Handler+0x40>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
    }
 8004d3e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <vPortSetupTimerInterrupt+0x38>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <vPortSetupTimerInterrupt+0x3c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <vPortSetupTimerInterrupt+0x40>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <vPortSetupTimerInterrupt+0x44>)
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d70:	2207      	movs	r2, #7
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e010 	.word	0xe000e010
 8004d84:	e000e018 	.word	0xe000e018
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	10624dd3 	.word	0x10624dd3
 8004d90:	e000e014 	.word	0xe000e014

08004d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004da4 <vPortEnableVFP+0x10>
 8004d98:	6801      	ldr	r1, [r0, #0]
 8004d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d9e:	6001      	str	r1, [r0, #0]
 8004da0:	4770      	bx	lr
 8004da2:	0000      	.short	0x0000
 8004da4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop

08004dac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004db2:	f3ef 8305 	mrs	r3, IPSR
 8004db6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d914      	bls.n	8004de8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <vPortValidateInterruptPriority+0x70>)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <vPortValidateInterruptPriority+0x74>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	7afa      	ldrb	r2, [r7, #11]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d20a      	bcs.n	8004de8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	607b      	str	r3, [r7, #4]
    }
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <vPortValidateInterruptPriority+0x78>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <vPortValidateInterruptPriority+0x7c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d90a      	bls.n	8004e0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	603b      	str	r3, [r7, #0]
    }
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <vPortValidateInterruptPriority+0x60>
    }
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	e000e3f0 	.word	0xe000e3f0
 8004e20:	20000290 	.word	0x20000290
 8004e24:	e000ed0c 	.word	0xe000ed0c
 8004e28:	20000294 	.word	0x20000294

08004e2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004e38:	f7fe fcc6 	bl	80037c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e3c:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <pvPortMalloc+0x1a8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004e44:	f000 f934 	bl	80050b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e48:	4b63      	ldr	r3, [pc, #396]	; (8004fd8 <pvPortMalloc+0x1ac>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 80a7 	bne.w	8004fa4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d02d      	beq.n	8004eb8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d227      	bcs.n	8004eb8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004e68:	2208      	movs	r2, #8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d021      	beq.n	8004ebe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f023 0307 	bic.w	r3, r3, #7
 8004e80:	3308      	adds	r3, #8
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d214      	bcs.n	8004eb2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	3308      	adds	r3, #8
 8004e90:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d010      	beq.n	8004ebe <pvPortMalloc+0x92>
        __asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	617b      	str	r3, [r7, #20]
    }
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004eb6:	e002      	b.n	8004ebe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	e000      	b.n	8004ec0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ebe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d06e      	beq.n	8004fa4 <pvPortMalloc+0x178>
 8004ec6:	4b45      	ldr	r3, [pc, #276]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d869      	bhi.n	8004fa4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ed0:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <pvPortMalloc+0x1b4>)
 8004ed2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004ed4:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <pvPortMalloc+0x1b4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eda:	e004      	b.n	8004ee6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d903      	bls.n	8004ef8 <pvPortMalloc+0xcc>
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1f1      	bne.n	8004edc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ef8:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <pvPortMalloc+0x1a8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d050      	beq.n	8004fa4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2208      	movs	r2, #8
 8004f08:	4413      	add	r3, r2
 8004f0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d91f      	bls.n	8004f64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4413      	add	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <pvPortMalloc+0x120>
        __asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	613b      	str	r3, [r7, #16]
    }
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f5e:	69b8      	ldr	r0, [r7, #24]
 8004f60:	f000 f908 	bl	8005174 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f64:	4b1d      	ldr	r3, [pc, #116]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004f70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f72:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <pvPortMalloc+0x1b8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d203      	bcs.n	8004f86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f7e:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <pvPortMalloc+0x1b0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <pvPortMalloc+0x1b8>)
 8004f84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <pvPortMalloc+0x1ac>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <pvPortMalloc+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <pvPortMalloc+0x1bc>)
 8004fa2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004fa4:	f7fe fc1e 	bl	80037e4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <pvPortMalloc+0x19c>
        __asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60fb      	str	r3, [r7, #12]
    }
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3728      	adds	r7, #40	; 0x28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	200016a0 	.word	0x200016a0
 8004fd8:	200016b4 	.word	0x200016b4
 8004fdc:	200016a4 	.word	0x200016a4
 8004fe0:	20001698 	.word	0x20001698
 8004fe4:	200016a8 	.word	0x200016a8
 8004fe8:	200016ac 	.word	0x200016ac

08004fec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d04d      	beq.n	800509a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ffe:	2308      	movs	r3, #8
 8005000:	425b      	negs	r3, r3
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4413      	add	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <vPortFree+0xb8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4013      	ands	r3, r2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10a      	bne.n	8005030 <vPortFree+0x44>
        __asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	60fb      	str	r3, [r7, #12]
    }
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <vPortFree+0x62>
        __asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	60bb      	str	r3, [r7, #8]
    }
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <vPortFree+0xb8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01e      	beq.n	800509a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d11a      	bne.n	800509a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <vPortFree+0xb8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	43db      	mvns	r3, r3
 800506e:	401a      	ands	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005074:	f7fe fba8 	bl	80037c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <vPortFree+0xbc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4413      	add	r3, r2
 8005082:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <vPortFree+0xbc>)
 8005084:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005086:	6938      	ldr	r0, [r7, #16]
 8005088:	f000 f874 	bl	8005174 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800508c:	4b07      	ldr	r3, [pc, #28]	; (80050ac <vPortFree+0xc0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	4a06      	ldr	r2, [pc, #24]	; (80050ac <vPortFree+0xc0>)
 8005094:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005096:	f7fe fba5 	bl	80037e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	200016b4 	.word	0x200016b4
 80050a8:	200016a4 	.word	0x200016a4
 80050ac:	200016b0 	.word	0x200016b0

080050b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80050ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80050bc:	4b27      	ldr	r3, [pc, #156]	; (800515c <prvHeapInit+0xac>)
 80050be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3307      	adds	r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	4a1f      	ldr	r2, [pc, #124]	; (800515c <prvHeapInit+0xac>)
 80050e0:	4413      	add	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050e8:	4a1d      	ldr	r2, [pc, #116]	; (8005160 <prvHeapInit+0xb0>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80050ee:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <prvHeapInit+0xb0>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80050fc:	2208      	movs	r2, #8
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a15      	ldr	r2, [pc, #84]	; (8005164 <prvHeapInit+0xb4>)
 8005110:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005112:	4b14      	ldr	r3, [pc, #80]	; (8005164 <prvHeapInit+0xb4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2200      	movs	r2, #0
 8005118:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <prvHeapInit+0xb4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <prvHeapInit+0xb4>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <prvHeapInit+0xb8>)
 800513e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4a09      	ldr	r2, [pc, #36]	; (800516c <prvHeapInit+0xbc>)
 8005146:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <prvHeapInit+0xc0>)
 800514a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800514e:	601a      	str	r2, [r3, #0]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20000298 	.word	0x20000298
 8005160:	20001698 	.word	0x20001698
 8005164:	200016a0 	.word	0x200016a0
 8005168:	200016a8 	.word	0x200016a8
 800516c:	200016a4 	.word	0x200016a4
 8005170:	200016b4 	.word	0x200016b4

08005174 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800517c:	4b28      	ldr	r3, [pc, #160]	; (8005220 <prvInsertBlockIntoFreeList+0xac>)
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e002      	b.n	8005188 <prvInsertBlockIntoFreeList+0x14>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d8f7      	bhi.n	8005182 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d108      	bne.n	80051b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	441a      	add	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d118      	bne.n	80051fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <prvInsertBlockIntoFreeList+0xb0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d00d      	beq.n	80051f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	441a      	add	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e008      	b.n	8005204 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <prvInsertBlockIntoFreeList+0xb0>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e003      	b.n	8005204 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d002      	beq.n	8005212 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20001698 	.word	0x20001698
 8005224:	200016a0 	.word	0x200016a0

08005228 <__libc_init_array>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4d0d      	ldr	r5, [pc, #52]	; (8005260 <__libc_init_array+0x38>)
 800522c:	4c0d      	ldr	r4, [pc, #52]	; (8005264 <__libc_init_array+0x3c>)
 800522e:	1b64      	subs	r4, r4, r5
 8005230:	10a4      	asrs	r4, r4, #2
 8005232:	2600      	movs	r6, #0
 8005234:	42a6      	cmp	r6, r4
 8005236:	d109      	bne.n	800524c <__libc_init_array+0x24>
 8005238:	4d0b      	ldr	r5, [pc, #44]	; (8005268 <__libc_init_array+0x40>)
 800523a:	4c0c      	ldr	r4, [pc, #48]	; (800526c <__libc_init_array+0x44>)
 800523c:	f000 fd3a 	bl	8005cb4 <_init>
 8005240:	1b64      	subs	r4, r4, r5
 8005242:	10a4      	asrs	r4, r4, #2
 8005244:	2600      	movs	r6, #0
 8005246:	42a6      	cmp	r6, r4
 8005248:	d105      	bne.n	8005256 <__libc_init_array+0x2e>
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005250:	4798      	blx	r3
 8005252:	3601      	adds	r6, #1
 8005254:	e7ee      	b.n	8005234 <__libc_init_array+0xc>
 8005256:	f855 3b04 	ldr.w	r3, [r5], #4
 800525a:	4798      	blx	r3
 800525c:	3601      	adds	r6, #1
 800525e:	e7f2      	b.n	8005246 <__libc_init_array+0x1e>
 8005260:	08005dc8 	.word	0x08005dc8
 8005264:	08005dc8 	.word	0x08005dc8
 8005268:	08005dc8 	.word	0x08005dc8
 800526c:	08005dcc 	.word	0x08005dcc

08005270 <memcpy>:
 8005270:	440a      	add	r2, r1
 8005272:	4291      	cmp	r1, r2
 8005274:	f100 33ff 	add.w	r3, r0, #4294967295
 8005278:	d100      	bne.n	800527c <memcpy+0xc>
 800527a:	4770      	bx	lr
 800527c:	b510      	push	{r4, lr}
 800527e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005286:	4291      	cmp	r1, r2
 8005288:	d1f9      	bne.n	800527e <memcpy+0xe>
 800528a:	bd10      	pop	{r4, pc}

0800528c <memset>:
 800528c:	4402      	add	r2, r0
 800528e:	4603      	mov	r3, r0
 8005290:	4293      	cmp	r3, r2
 8005292:	d100      	bne.n	8005296 <memset+0xa>
 8005294:	4770      	bx	lr
 8005296:	f803 1b01 	strb.w	r1, [r3], #1
 800529a:	e7f9      	b.n	8005290 <memset+0x4>

0800529c <_puts_r>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	460e      	mov	r6, r1
 80052a0:	4605      	mov	r5, r0
 80052a2:	b118      	cbz	r0, 80052ac <_puts_r+0x10>
 80052a4:	6983      	ldr	r3, [r0, #24]
 80052a6:	b90b      	cbnz	r3, 80052ac <_puts_r+0x10>
 80052a8:	f000 fa48 	bl	800573c <__sinit>
 80052ac:	69ab      	ldr	r3, [r5, #24]
 80052ae:	68ac      	ldr	r4, [r5, #8]
 80052b0:	b913      	cbnz	r3, 80052b8 <_puts_r+0x1c>
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 fa42 	bl	800573c <__sinit>
 80052b8:	4b2c      	ldr	r3, [pc, #176]	; (800536c <_puts_r+0xd0>)
 80052ba:	429c      	cmp	r4, r3
 80052bc:	d120      	bne.n	8005300 <_puts_r+0x64>
 80052be:	686c      	ldr	r4, [r5, #4]
 80052c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c2:	07db      	lsls	r3, r3, #31
 80052c4:	d405      	bmi.n	80052d2 <_puts_r+0x36>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	0598      	lsls	r0, r3, #22
 80052ca:	d402      	bmi.n	80052d2 <_puts_r+0x36>
 80052cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ce:	f000 fad3 	bl	8005878 <__retarget_lock_acquire_recursive>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	0719      	lsls	r1, r3, #28
 80052d6:	d51d      	bpl.n	8005314 <_puts_r+0x78>
 80052d8:	6923      	ldr	r3, [r4, #16]
 80052da:	b1db      	cbz	r3, 8005314 <_puts_r+0x78>
 80052dc:	3e01      	subs	r6, #1
 80052de:	68a3      	ldr	r3, [r4, #8]
 80052e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052e4:	3b01      	subs	r3, #1
 80052e6:	60a3      	str	r3, [r4, #8]
 80052e8:	bb39      	cbnz	r1, 800533a <_puts_r+0x9e>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da38      	bge.n	8005360 <_puts_r+0xc4>
 80052ee:	4622      	mov	r2, r4
 80052f0:	210a      	movs	r1, #10
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 f848 	bl	8005388 <__swbuf_r>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d011      	beq.n	8005320 <_puts_r+0x84>
 80052fc:	250a      	movs	r5, #10
 80052fe:	e011      	b.n	8005324 <_puts_r+0x88>
 8005300:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <_puts_r+0xd4>)
 8005302:	429c      	cmp	r4, r3
 8005304:	d101      	bne.n	800530a <_puts_r+0x6e>
 8005306:	68ac      	ldr	r4, [r5, #8]
 8005308:	e7da      	b.n	80052c0 <_puts_r+0x24>
 800530a:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <_puts_r+0xd8>)
 800530c:	429c      	cmp	r4, r3
 800530e:	bf08      	it	eq
 8005310:	68ec      	ldreq	r4, [r5, #12]
 8005312:	e7d5      	b.n	80052c0 <_puts_r+0x24>
 8005314:	4621      	mov	r1, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f888 	bl	800542c <__swsetup_r>
 800531c:	2800      	cmp	r0, #0
 800531e:	d0dd      	beq.n	80052dc <_puts_r+0x40>
 8005320:	f04f 35ff 	mov.w	r5, #4294967295
 8005324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005326:	07da      	lsls	r2, r3, #31
 8005328:	d405      	bmi.n	8005336 <_puts_r+0x9a>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	059b      	lsls	r3, r3, #22
 800532e:	d402      	bmi.n	8005336 <_puts_r+0x9a>
 8005330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005332:	f000 faa2 	bl	800587a <__retarget_lock_release_recursive>
 8005336:	4628      	mov	r0, r5
 8005338:	bd70      	pop	{r4, r5, r6, pc}
 800533a:	2b00      	cmp	r3, #0
 800533c:	da04      	bge.n	8005348 <_puts_r+0xac>
 800533e:	69a2      	ldr	r2, [r4, #24]
 8005340:	429a      	cmp	r2, r3
 8005342:	dc06      	bgt.n	8005352 <_puts_r+0xb6>
 8005344:	290a      	cmp	r1, #10
 8005346:	d004      	beq.n	8005352 <_puts_r+0xb6>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	6022      	str	r2, [r4, #0]
 800534e:	7019      	strb	r1, [r3, #0]
 8005350:	e7c5      	b.n	80052de <_puts_r+0x42>
 8005352:	4622      	mov	r2, r4
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f817 	bl	8005388 <__swbuf_r>
 800535a:	3001      	adds	r0, #1
 800535c:	d1bf      	bne.n	80052de <_puts_r+0x42>
 800535e:	e7df      	b.n	8005320 <_puts_r+0x84>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	250a      	movs	r5, #10
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	6022      	str	r2, [r4, #0]
 8005368:	701d      	strb	r5, [r3, #0]
 800536a:	e7db      	b.n	8005324 <_puts_r+0x88>
 800536c:	08005d88 	.word	0x08005d88
 8005370:	08005da8 	.word	0x08005da8
 8005374:	08005d68 	.word	0x08005d68

08005378 <puts>:
 8005378:	4b02      	ldr	r3, [pc, #8]	; (8005384 <puts+0xc>)
 800537a:	4601      	mov	r1, r0
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	f7ff bf8d 	b.w	800529c <_puts_r>
 8005382:	bf00      	nop
 8005384:	20000014 	.word	0x20000014

08005388 <__swbuf_r>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	460e      	mov	r6, r1
 800538c:	4614      	mov	r4, r2
 800538e:	4605      	mov	r5, r0
 8005390:	b118      	cbz	r0, 800539a <__swbuf_r+0x12>
 8005392:	6983      	ldr	r3, [r0, #24]
 8005394:	b90b      	cbnz	r3, 800539a <__swbuf_r+0x12>
 8005396:	f000 f9d1 	bl	800573c <__sinit>
 800539a:	4b21      	ldr	r3, [pc, #132]	; (8005420 <__swbuf_r+0x98>)
 800539c:	429c      	cmp	r4, r3
 800539e:	d12b      	bne.n	80053f8 <__swbuf_r+0x70>
 80053a0:	686c      	ldr	r4, [r5, #4]
 80053a2:	69a3      	ldr	r3, [r4, #24]
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	071a      	lsls	r2, r3, #28
 80053aa:	d52f      	bpl.n	800540c <__swbuf_r+0x84>
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	b36b      	cbz	r3, 800540c <__swbuf_r+0x84>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	1ac0      	subs	r0, r0, r3
 80053b6:	6963      	ldr	r3, [r4, #20]
 80053b8:	b2f6      	uxtb	r6, r6
 80053ba:	4283      	cmp	r3, r0
 80053bc:	4637      	mov	r7, r6
 80053be:	dc04      	bgt.n	80053ca <__swbuf_r+0x42>
 80053c0:	4621      	mov	r1, r4
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f926 	bl	8005614 <_fflush_r>
 80053c8:	bb30      	cbnz	r0, 8005418 <__swbuf_r+0x90>
 80053ca:	68a3      	ldr	r3, [r4, #8]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	60a3      	str	r3, [r4, #8]
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	701e      	strb	r6, [r3, #0]
 80053d8:	6963      	ldr	r3, [r4, #20]
 80053da:	3001      	adds	r0, #1
 80053dc:	4283      	cmp	r3, r0
 80053de:	d004      	beq.n	80053ea <__swbuf_r+0x62>
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	07db      	lsls	r3, r3, #31
 80053e4:	d506      	bpl.n	80053f4 <__swbuf_r+0x6c>
 80053e6:	2e0a      	cmp	r6, #10
 80053e8:	d104      	bne.n	80053f4 <__swbuf_r+0x6c>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f911 	bl	8005614 <_fflush_r>
 80053f2:	b988      	cbnz	r0, 8005418 <__swbuf_r+0x90>
 80053f4:	4638      	mov	r0, r7
 80053f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <__swbuf_r+0x9c>)
 80053fa:	429c      	cmp	r4, r3
 80053fc:	d101      	bne.n	8005402 <__swbuf_r+0x7a>
 80053fe:	68ac      	ldr	r4, [r5, #8]
 8005400:	e7cf      	b.n	80053a2 <__swbuf_r+0x1a>
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <__swbuf_r+0xa0>)
 8005404:	429c      	cmp	r4, r3
 8005406:	bf08      	it	eq
 8005408:	68ec      	ldreq	r4, [r5, #12]
 800540a:	e7ca      	b.n	80053a2 <__swbuf_r+0x1a>
 800540c:	4621      	mov	r1, r4
 800540e:	4628      	mov	r0, r5
 8005410:	f000 f80c 	bl	800542c <__swsetup_r>
 8005414:	2800      	cmp	r0, #0
 8005416:	d0cb      	beq.n	80053b0 <__swbuf_r+0x28>
 8005418:	f04f 37ff 	mov.w	r7, #4294967295
 800541c:	e7ea      	b.n	80053f4 <__swbuf_r+0x6c>
 800541e:	bf00      	nop
 8005420:	08005d88 	.word	0x08005d88
 8005424:	08005da8 	.word	0x08005da8
 8005428:	08005d68 	.word	0x08005d68

0800542c <__swsetup_r>:
 800542c:	4b32      	ldr	r3, [pc, #200]	; (80054f8 <__swsetup_r+0xcc>)
 800542e:	b570      	push	{r4, r5, r6, lr}
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	4606      	mov	r6, r0
 8005434:	460c      	mov	r4, r1
 8005436:	b125      	cbz	r5, 8005442 <__swsetup_r+0x16>
 8005438:	69ab      	ldr	r3, [r5, #24]
 800543a:	b913      	cbnz	r3, 8005442 <__swsetup_r+0x16>
 800543c:	4628      	mov	r0, r5
 800543e:	f000 f97d 	bl	800573c <__sinit>
 8005442:	4b2e      	ldr	r3, [pc, #184]	; (80054fc <__swsetup_r+0xd0>)
 8005444:	429c      	cmp	r4, r3
 8005446:	d10f      	bne.n	8005468 <__swsetup_r+0x3c>
 8005448:	686c      	ldr	r4, [r5, #4]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005450:	0719      	lsls	r1, r3, #28
 8005452:	d42c      	bmi.n	80054ae <__swsetup_r+0x82>
 8005454:	06dd      	lsls	r5, r3, #27
 8005456:	d411      	bmi.n	800547c <__swsetup_r+0x50>
 8005458:	2309      	movs	r3, #9
 800545a:	6033      	str	r3, [r6, #0]
 800545c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	f04f 30ff 	mov.w	r0, #4294967295
 8005466:	e03e      	b.n	80054e6 <__swsetup_r+0xba>
 8005468:	4b25      	ldr	r3, [pc, #148]	; (8005500 <__swsetup_r+0xd4>)
 800546a:	429c      	cmp	r4, r3
 800546c:	d101      	bne.n	8005472 <__swsetup_r+0x46>
 800546e:	68ac      	ldr	r4, [r5, #8]
 8005470:	e7eb      	b.n	800544a <__swsetup_r+0x1e>
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <__swsetup_r+0xd8>)
 8005474:	429c      	cmp	r4, r3
 8005476:	bf08      	it	eq
 8005478:	68ec      	ldreq	r4, [r5, #12]
 800547a:	e7e6      	b.n	800544a <__swsetup_r+0x1e>
 800547c:	0758      	lsls	r0, r3, #29
 800547e:	d512      	bpl.n	80054a6 <__swsetup_r+0x7a>
 8005480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005482:	b141      	cbz	r1, 8005496 <__swsetup_r+0x6a>
 8005484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005488:	4299      	cmp	r1, r3
 800548a:	d002      	beq.n	8005492 <__swsetup_r+0x66>
 800548c:	4630      	mov	r0, r6
 800548e:	f000 fa5b 	bl	8005948 <_free_r>
 8005492:	2300      	movs	r3, #0
 8005494:	6363      	str	r3, [r4, #52]	; 0x34
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	2300      	movs	r3, #0
 80054a0:	6063      	str	r3, [r4, #4]
 80054a2:	6923      	ldr	r3, [r4, #16]
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	f043 0308 	orr.w	r3, r3, #8
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	b94b      	cbnz	r3, 80054c6 <__swsetup_r+0x9a>
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054bc:	d003      	beq.n	80054c6 <__swsetup_r+0x9a>
 80054be:	4621      	mov	r1, r4
 80054c0:	4630      	mov	r0, r6
 80054c2:	f000 fa01 	bl	80058c8 <__smakebuf_r>
 80054c6:	89a0      	ldrh	r0, [r4, #12]
 80054c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054cc:	f010 0301 	ands.w	r3, r0, #1
 80054d0:	d00a      	beq.n	80054e8 <__swsetup_r+0xbc>
 80054d2:	2300      	movs	r3, #0
 80054d4:	60a3      	str	r3, [r4, #8]
 80054d6:	6963      	ldr	r3, [r4, #20]
 80054d8:	425b      	negs	r3, r3
 80054da:	61a3      	str	r3, [r4, #24]
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	b943      	cbnz	r3, 80054f2 <__swsetup_r+0xc6>
 80054e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054e4:	d1ba      	bne.n	800545c <__swsetup_r+0x30>
 80054e6:	bd70      	pop	{r4, r5, r6, pc}
 80054e8:	0781      	lsls	r1, r0, #30
 80054ea:	bf58      	it	pl
 80054ec:	6963      	ldrpl	r3, [r4, #20]
 80054ee:	60a3      	str	r3, [r4, #8]
 80054f0:	e7f4      	b.n	80054dc <__swsetup_r+0xb0>
 80054f2:	2000      	movs	r0, #0
 80054f4:	e7f7      	b.n	80054e6 <__swsetup_r+0xba>
 80054f6:	bf00      	nop
 80054f8:	20000014 	.word	0x20000014
 80054fc:	08005d88 	.word	0x08005d88
 8005500:	08005da8 	.word	0x08005da8
 8005504:	08005d68 	.word	0x08005d68

08005508 <__sflush_r>:
 8005508:	898a      	ldrh	r2, [r1, #12]
 800550a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550e:	4605      	mov	r5, r0
 8005510:	0710      	lsls	r0, r2, #28
 8005512:	460c      	mov	r4, r1
 8005514:	d458      	bmi.n	80055c8 <__sflush_r+0xc0>
 8005516:	684b      	ldr	r3, [r1, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	dc05      	bgt.n	8005528 <__sflush_r+0x20>
 800551c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	dc02      	bgt.n	8005528 <__sflush_r+0x20>
 8005522:	2000      	movs	r0, #0
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800552a:	2e00      	cmp	r6, #0
 800552c:	d0f9      	beq.n	8005522 <__sflush_r+0x1a>
 800552e:	2300      	movs	r3, #0
 8005530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005534:	682f      	ldr	r7, [r5, #0]
 8005536:	602b      	str	r3, [r5, #0]
 8005538:	d032      	beq.n	80055a0 <__sflush_r+0x98>
 800553a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	075a      	lsls	r2, r3, #29
 8005540:	d505      	bpl.n	800554e <__sflush_r+0x46>
 8005542:	6863      	ldr	r3, [r4, #4]
 8005544:	1ac0      	subs	r0, r0, r3
 8005546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005548:	b10b      	cbz	r3, 800554e <__sflush_r+0x46>
 800554a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800554c:	1ac0      	subs	r0, r0, r3
 800554e:	2300      	movs	r3, #0
 8005550:	4602      	mov	r2, r0
 8005552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005554:	6a21      	ldr	r1, [r4, #32]
 8005556:	4628      	mov	r0, r5
 8005558:	47b0      	blx	r6
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	d106      	bne.n	800556e <__sflush_r+0x66>
 8005560:	6829      	ldr	r1, [r5, #0]
 8005562:	291d      	cmp	r1, #29
 8005564:	d82c      	bhi.n	80055c0 <__sflush_r+0xb8>
 8005566:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <__sflush_r+0x108>)
 8005568:	40ca      	lsrs	r2, r1
 800556a:	07d6      	lsls	r6, r2, #31
 800556c:	d528      	bpl.n	80055c0 <__sflush_r+0xb8>
 800556e:	2200      	movs	r2, #0
 8005570:	6062      	str	r2, [r4, #4]
 8005572:	04d9      	lsls	r1, r3, #19
 8005574:	6922      	ldr	r2, [r4, #16]
 8005576:	6022      	str	r2, [r4, #0]
 8005578:	d504      	bpl.n	8005584 <__sflush_r+0x7c>
 800557a:	1c42      	adds	r2, r0, #1
 800557c:	d101      	bne.n	8005582 <__sflush_r+0x7a>
 800557e:	682b      	ldr	r3, [r5, #0]
 8005580:	b903      	cbnz	r3, 8005584 <__sflush_r+0x7c>
 8005582:	6560      	str	r0, [r4, #84]	; 0x54
 8005584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005586:	602f      	str	r7, [r5, #0]
 8005588:	2900      	cmp	r1, #0
 800558a:	d0ca      	beq.n	8005522 <__sflush_r+0x1a>
 800558c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005590:	4299      	cmp	r1, r3
 8005592:	d002      	beq.n	800559a <__sflush_r+0x92>
 8005594:	4628      	mov	r0, r5
 8005596:	f000 f9d7 	bl	8005948 <_free_r>
 800559a:	2000      	movs	r0, #0
 800559c:	6360      	str	r0, [r4, #52]	; 0x34
 800559e:	e7c1      	b.n	8005524 <__sflush_r+0x1c>
 80055a0:	6a21      	ldr	r1, [r4, #32]
 80055a2:	2301      	movs	r3, #1
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b0      	blx	r6
 80055a8:	1c41      	adds	r1, r0, #1
 80055aa:	d1c7      	bne.n	800553c <__sflush_r+0x34>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0c4      	beq.n	800553c <__sflush_r+0x34>
 80055b2:	2b1d      	cmp	r3, #29
 80055b4:	d001      	beq.n	80055ba <__sflush_r+0xb2>
 80055b6:	2b16      	cmp	r3, #22
 80055b8:	d101      	bne.n	80055be <__sflush_r+0xb6>
 80055ba:	602f      	str	r7, [r5, #0]
 80055bc:	e7b1      	b.n	8005522 <__sflush_r+0x1a>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	e7ad      	b.n	8005524 <__sflush_r+0x1c>
 80055c8:	690f      	ldr	r7, [r1, #16]
 80055ca:	2f00      	cmp	r7, #0
 80055cc:	d0a9      	beq.n	8005522 <__sflush_r+0x1a>
 80055ce:	0793      	lsls	r3, r2, #30
 80055d0:	680e      	ldr	r6, [r1, #0]
 80055d2:	bf08      	it	eq
 80055d4:	694b      	ldreq	r3, [r1, #20]
 80055d6:	600f      	str	r7, [r1, #0]
 80055d8:	bf18      	it	ne
 80055da:	2300      	movne	r3, #0
 80055dc:	eba6 0807 	sub.w	r8, r6, r7
 80055e0:	608b      	str	r3, [r1, #8]
 80055e2:	f1b8 0f00 	cmp.w	r8, #0
 80055e6:	dd9c      	ble.n	8005522 <__sflush_r+0x1a>
 80055e8:	6a21      	ldr	r1, [r4, #32]
 80055ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055ec:	4643      	mov	r3, r8
 80055ee:	463a      	mov	r2, r7
 80055f0:	4628      	mov	r0, r5
 80055f2:	47b0      	blx	r6
 80055f4:	2800      	cmp	r0, #0
 80055f6:	dc06      	bgt.n	8005606 <__sflush_r+0xfe>
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	e78e      	b.n	8005524 <__sflush_r+0x1c>
 8005606:	4407      	add	r7, r0
 8005608:	eba8 0800 	sub.w	r8, r8, r0
 800560c:	e7e9      	b.n	80055e2 <__sflush_r+0xda>
 800560e:	bf00      	nop
 8005610:	20400001 	.word	0x20400001

08005614 <_fflush_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	690b      	ldr	r3, [r1, #16]
 8005618:	4605      	mov	r5, r0
 800561a:	460c      	mov	r4, r1
 800561c:	b913      	cbnz	r3, 8005624 <_fflush_r+0x10>
 800561e:	2500      	movs	r5, #0
 8005620:	4628      	mov	r0, r5
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	b118      	cbz	r0, 800562e <_fflush_r+0x1a>
 8005626:	6983      	ldr	r3, [r0, #24]
 8005628:	b90b      	cbnz	r3, 800562e <_fflush_r+0x1a>
 800562a:	f000 f887 	bl	800573c <__sinit>
 800562e:	4b14      	ldr	r3, [pc, #80]	; (8005680 <_fflush_r+0x6c>)
 8005630:	429c      	cmp	r4, r3
 8005632:	d11b      	bne.n	800566c <_fflush_r+0x58>
 8005634:	686c      	ldr	r4, [r5, #4]
 8005636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0ef      	beq.n	800561e <_fflush_r+0xa>
 800563e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005640:	07d0      	lsls	r0, r2, #31
 8005642:	d404      	bmi.n	800564e <_fflush_r+0x3a>
 8005644:	0599      	lsls	r1, r3, #22
 8005646:	d402      	bmi.n	800564e <_fflush_r+0x3a>
 8005648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800564a:	f000 f915 	bl	8005878 <__retarget_lock_acquire_recursive>
 800564e:	4628      	mov	r0, r5
 8005650:	4621      	mov	r1, r4
 8005652:	f7ff ff59 	bl	8005508 <__sflush_r>
 8005656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005658:	07da      	lsls	r2, r3, #31
 800565a:	4605      	mov	r5, r0
 800565c:	d4e0      	bmi.n	8005620 <_fflush_r+0xc>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	059b      	lsls	r3, r3, #22
 8005662:	d4dd      	bmi.n	8005620 <_fflush_r+0xc>
 8005664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005666:	f000 f908 	bl	800587a <__retarget_lock_release_recursive>
 800566a:	e7d9      	b.n	8005620 <_fflush_r+0xc>
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <_fflush_r+0x70>)
 800566e:	429c      	cmp	r4, r3
 8005670:	d101      	bne.n	8005676 <_fflush_r+0x62>
 8005672:	68ac      	ldr	r4, [r5, #8]
 8005674:	e7df      	b.n	8005636 <_fflush_r+0x22>
 8005676:	4b04      	ldr	r3, [pc, #16]	; (8005688 <_fflush_r+0x74>)
 8005678:	429c      	cmp	r4, r3
 800567a:	bf08      	it	eq
 800567c:	68ec      	ldreq	r4, [r5, #12]
 800567e:	e7da      	b.n	8005636 <_fflush_r+0x22>
 8005680:	08005d88 	.word	0x08005d88
 8005684:	08005da8 	.word	0x08005da8
 8005688:	08005d68 	.word	0x08005d68

0800568c <std>:
 800568c:	2300      	movs	r3, #0
 800568e:	b510      	push	{r4, lr}
 8005690:	4604      	mov	r4, r0
 8005692:	e9c0 3300 	strd	r3, r3, [r0]
 8005696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800569a:	6083      	str	r3, [r0, #8]
 800569c:	8181      	strh	r1, [r0, #12]
 800569e:	6643      	str	r3, [r0, #100]	; 0x64
 80056a0:	81c2      	strh	r2, [r0, #14]
 80056a2:	6183      	str	r3, [r0, #24]
 80056a4:	4619      	mov	r1, r3
 80056a6:	2208      	movs	r2, #8
 80056a8:	305c      	adds	r0, #92	; 0x5c
 80056aa:	f7ff fdef 	bl	800528c <memset>
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <std+0x38>)
 80056b0:	6263      	str	r3, [r4, #36]	; 0x24
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <std+0x3c>)
 80056b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <std+0x40>)
 80056b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056ba:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <std+0x44>)
 80056bc:	6224      	str	r4, [r4, #32]
 80056be:	6323      	str	r3, [r4, #48]	; 0x30
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	08005b29 	.word	0x08005b29
 80056c8:	08005b4b 	.word	0x08005b4b
 80056cc:	08005b83 	.word	0x08005b83
 80056d0:	08005ba7 	.word	0x08005ba7

080056d4 <_cleanup_r>:
 80056d4:	4901      	ldr	r1, [pc, #4]	; (80056dc <_cleanup_r+0x8>)
 80056d6:	f000 b8af 	b.w	8005838 <_fwalk_reent>
 80056da:	bf00      	nop
 80056dc:	08005615 	.word	0x08005615

080056e0 <__sfmoreglue>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	2268      	movs	r2, #104	; 0x68
 80056e4:	1e4d      	subs	r5, r1, #1
 80056e6:	4355      	muls	r5, r2
 80056e8:	460e      	mov	r6, r1
 80056ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056ee:	f000 f997 	bl	8005a20 <_malloc_r>
 80056f2:	4604      	mov	r4, r0
 80056f4:	b140      	cbz	r0, 8005708 <__sfmoreglue+0x28>
 80056f6:	2100      	movs	r1, #0
 80056f8:	e9c0 1600 	strd	r1, r6, [r0]
 80056fc:	300c      	adds	r0, #12
 80056fe:	60a0      	str	r0, [r4, #8]
 8005700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005704:	f7ff fdc2 	bl	800528c <memset>
 8005708:	4620      	mov	r0, r4
 800570a:	bd70      	pop	{r4, r5, r6, pc}

0800570c <__sfp_lock_acquire>:
 800570c:	4801      	ldr	r0, [pc, #4]	; (8005714 <__sfp_lock_acquire+0x8>)
 800570e:	f000 b8b3 	b.w	8005878 <__retarget_lock_acquire_recursive>
 8005712:	bf00      	nop
 8005714:	200016b9 	.word	0x200016b9

08005718 <__sfp_lock_release>:
 8005718:	4801      	ldr	r0, [pc, #4]	; (8005720 <__sfp_lock_release+0x8>)
 800571a:	f000 b8ae 	b.w	800587a <__retarget_lock_release_recursive>
 800571e:	bf00      	nop
 8005720:	200016b9 	.word	0x200016b9

08005724 <__sinit_lock_acquire>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__sinit_lock_acquire+0x8>)
 8005726:	f000 b8a7 	b.w	8005878 <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	200016ba 	.word	0x200016ba

08005730 <__sinit_lock_release>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__sinit_lock_release+0x8>)
 8005732:	f000 b8a2 	b.w	800587a <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	200016ba 	.word	0x200016ba

0800573c <__sinit>:
 800573c:	b510      	push	{r4, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	f7ff fff0 	bl	8005724 <__sinit_lock_acquire>
 8005744:	69a3      	ldr	r3, [r4, #24]
 8005746:	b11b      	cbz	r3, 8005750 <__sinit+0x14>
 8005748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574c:	f7ff bff0 	b.w	8005730 <__sinit_lock_release>
 8005750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005754:	6523      	str	r3, [r4, #80]	; 0x50
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <__sinit+0x68>)
 8005758:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <__sinit+0x6c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	62a2      	str	r2, [r4, #40]	; 0x28
 800575e:	42a3      	cmp	r3, r4
 8005760:	bf04      	itt	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	61a3      	streq	r3, [r4, #24]
 8005766:	4620      	mov	r0, r4
 8005768:	f000 f820 	bl	80057ac <__sfp>
 800576c:	6060      	str	r0, [r4, #4]
 800576e:	4620      	mov	r0, r4
 8005770:	f000 f81c 	bl	80057ac <__sfp>
 8005774:	60a0      	str	r0, [r4, #8]
 8005776:	4620      	mov	r0, r4
 8005778:	f000 f818 	bl	80057ac <__sfp>
 800577c:	2200      	movs	r2, #0
 800577e:	60e0      	str	r0, [r4, #12]
 8005780:	2104      	movs	r1, #4
 8005782:	6860      	ldr	r0, [r4, #4]
 8005784:	f7ff ff82 	bl	800568c <std>
 8005788:	68a0      	ldr	r0, [r4, #8]
 800578a:	2201      	movs	r2, #1
 800578c:	2109      	movs	r1, #9
 800578e:	f7ff ff7d 	bl	800568c <std>
 8005792:	68e0      	ldr	r0, [r4, #12]
 8005794:	2202      	movs	r2, #2
 8005796:	2112      	movs	r1, #18
 8005798:	f7ff ff78 	bl	800568c <std>
 800579c:	2301      	movs	r3, #1
 800579e:	61a3      	str	r3, [r4, #24]
 80057a0:	e7d2      	b.n	8005748 <__sinit+0xc>
 80057a2:	bf00      	nop
 80057a4:	08005d64 	.word	0x08005d64
 80057a8:	080056d5 	.word	0x080056d5

080057ac <__sfp>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	4607      	mov	r7, r0
 80057b0:	f7ff ffac 	bl	800570c <__sfp_lock_acquire>
 80057b4:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <__sfp+0x84>)
 80057b6:	681e      	ldr	r6, [r3, #0]
 80057b8:	69b3      	ldr	r3, [r6, #24]
 80057ba:	b913      	cbnz	r3, 80057c2 <__sfp+0x16>
 80057bc:	4630      	mov	r0, r6
 80057be:	f7ff ffbd 	bl	800573c <__sinit>
 80057c2:	3648      	adds	r6, #72	; 0x48
 80057c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	d503      	bpl.n	80057d4 <__sfp+0x28>
 80057cc:	6833      	ldr	r3, [r6, #0]
 80057ce:	b30b      	cbz	r3, 8005814 <__sfp+0x68>
 80057d0:	6836      	ldr	r6, [r6, #0]
 80057d2:	e7f7      	b.n	80057c4 <__sfp+0x18>
 80057d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057d8:	b9d5      	cbnz	r5, 8005810 <__sfp+0x64>
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <__sfp+0x88>)
 80057dc:	60e3      	str	r3, [r4, #12]
 80057de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057e2:	6665      	str	r5, [r4, #100]	; 0x64
 80057e4:	f000 f847 	bl	8005876 <__retarget_lock_init_recursive>
 80057e8:	f7ff ff96 	bl	8005718 <__sfp_lock_release>
 80057ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057f4:	6025      	str	r5, [r4, #0]
 80057f6:	61a5      	str	r5, [r4, #24]
 80057f8:	2208      	movs	r2, #8
 80057fa:	4629      	mov	r1, r5
 80057fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005800:	f7ff fd44 	bl	800528c <memset>
 8005804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800580c:	4620      	mov	r0, r4
 800580e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005810:	3468      	adds	r4, #104	; 0x68
 8005812:	e7d9      	b.n	80057c8 <__sfp+0x1c>
 8005814:	2104      	movs	r1, #4
 8005816:	4638      	mov	r0, r7
 8005818:	f7ff ff62 	bl	80056e0 <__sfmoreglue>
 800581c:	4604      	mov	r4, r0
 800581e:	6030      	str	r0, [r6, #0]
 8005820:	2800      	cmp	r0, #0
 8005822:	d1d5      	bne.n	80057d0 <__sfp+0x24>
 8005824:	f7ff ff78 	bl	8005718 <__sfp_lock_release>
 8005828:	230c      	movs	r3, #12
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	e7ee      	b.n	800580c <__sfp+0x60>
 800582e:	bf00      	nop
 8005830:	08005d64 	.word	0x08005d64
 8005834:	ffff0001 	.word	0xffff0001

08005838 <_fwalk_reent>:
 8005838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800583c:	4606      	mov	r6, r0
 800583e:	4688      	mov	r8, r1
 8005840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005844:	2700      	movs	r7, #0
 8005846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800584a:	f1b9 0901 	subs.w	r9, r9, #1
 800584e:	d505      	bpl.n	800585c <_fwalk_reent+0x24>
 8005850:	6824      	ldr	r4, [r4, #0]
 8005852:	2c00      	cmp	r4, #0
 8005854:	d1f7      	bne.n	8005846 <_fwalk_reent+0xe>
 8005856:	4638      	mov	r0, r7
 8005858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800585c:	89ab      	ldrh	r3, [r5, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d907      	bls.n	8005872 <_fwalk_reent+0x3a>
 8005862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005866:	3301      	adds	r3, #1
 8005868:	d003      	beq.n	8005872 <_fwalk_reent+0x3a>
 800586a:	4629      	mov	r1, r5
 800586c:	4630      	mov	r0, r6
 800586e:	47c0      	blx	r8
 8005870:	4307      	orrs	r7, r0
 8005872:	3568      	adds	r5, #104	; 0x68
 8005874:	e7e9      	b.n	800584a <_fwalk_reent+0x12>

08005876 <__retarget_lock_init_recursive>:
 8005876:	4770      	bx	lr

08005878 <__retarget_lock_acquire_recursive>:
 8005878:	4770      	bx	lr

0800587a <__retarget_lock_release_recursive>:
 800587a:	4770      	bx	lr

0800587c <__swhatbuf_r>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	460e      	mov	r6, r1
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	2900      	cmp	r1, #0
 8005886:	b096      	sub	sp, #88	; 0x58
 8005888:	4614      	mov	r4, r2
 800588a:	461d      	mov	r5, r3
 800588c:	da08      	bge.n	80058a0 <__swhatbuf_r+0x24>
 800588e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	061a      	lsls	r2, r3, #24
 8005898:	d410      	bmi.n	80058bc <__swhatbuf_r+0x40>
 800589a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800589e:	e00e      	b.n	80058be <__swhatbuf_r+0x42>
 80058a0:	466a      	mov	r2, sp
 80058a2:	f000 f9a7 	bl	8005bf4 <_fstat_r>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	dbf1      	blt.n	800588e <__swhatbuf_r+0x12>
 80058aa:	9a01      	ldr	r2, [sp, #4]
 80058ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058b4:	425a      	negs	r2, r3
 80058b6:	415a      	adcs	r2, r3
 80058b8:	602a      	str	r2, [r5, #0]
 80058ba:	e7ee      	b.n	800589a <__swhatbuf_r+0x1e>
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	2000      	movs	r0, #0
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	b016      	add	sp, #88	; 0x58
 80058c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080058c8 <__smakebuf_r>:
 80058c8:	898b      	ldrh	r3, [r1, #12]
 80058ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058cc:	079d      	lsls	r5, r3, #30
 80058ce:	4606      	mov	r6, r0
 80058d0:	460c      	mov	r4, r1
 80058d2:	d507      	bpl.n	80058e4 <__smakebuf_r+0x1c>
 80058d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	2301      	movs	r3, #1
 80058de:	6163      	str	r3, [r4, #20]
 80058e0:	b002      	add	sp, #8
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	ab01      	add	r3, sp, #4
 80058e6:	466a      	mov	r2, sp
 80058e8:	f7ff ffc8 	bl	800587c <__swhatbuf_r>
 80058ec:	9900      	ldr	r1, [sp, #0]
 80058ee:	4605      	mov	r5, r0
 80058f0:	4630      	mov	r0, r6
 80058f2:	f000 f895 	bl	8005a20 <_malloc_r>
 80058f6:	b948      	cbnz	r0, 800590c <__smakebuf_r+0x44>
 80058f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fc:	059a      	lsls	r2, r3, #22
 80058fe:	d4ef      	bmi.n	80058e0 <__smakebuf_r+0x18>
 8005900:	f023 0303 	bic.w	r3, r3, #3
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	e7e3      	b.n	80058d4 <__smakebuf_r+0xc>
 800590c:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <__smakebuf_r+0x7c>)
 800590e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	6020      	str	r0, [r4, #0]
 8005914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	9b00      	ldr	r3, [sp, #0]
 800591c:	6163      	str	r3, [r4, #20]
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	6120      	str	r0, [r4, #16]
 8005922:	b15b      	cbz	r3, 800593c <__smakebuf_r+0x74>
 8005924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005928:	4630      	mov	r0, r6
 800592a:	f000 f975 	bl	8005c18 <_isatty_r>
 800592e:	b128      	cbz	r0, 800593c <__smakebuf_r+0x74>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	89a0      	ldrh	r0, [r4, #12]
 800593e:	4305      	orrs	r5, r0
 8005940:	81a5      	strh	r5, [r4, #12]
 8005942:	e7cd      	b.n	80058e0 <__smakebuf_r+0x18>
 8005944:	080056d5 	.word	0x080056d5

08005948 <_free_r>:
 8005948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800594a:	2900      	cmp	r1, #0
 800594c:	d044      	beq.n	80059d8 <_free_r+0x90>
 800594e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005952:	9001      	str	r0, [sp, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f1a1 0404 	sub.w	r4, r1, #4
 800595a:	bfb8      	it	lt
 800595c:	18e4      	addlt	r4, r4, r3
 800595e:	f000 f97d 	bl	8005c5c <__malloc_lock>
 8005962:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <_free_r+0x94>)
 8005964:	9801      	ldr	r0, [sp, #4]
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	b933      	cbnz	r3, 8005978 <_free_r+0x30>
 800596a:	6063      	str	r3, [r4, #4]
 800596c:	6014      	str	r4, [r2, #0]
 800596e:	b003      	add	sp, #12
 8005970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005974:	f000 b978 	b.w	8005c68 <__malloc_unlock>
 8005978:	42a3      	cmp	r3, r4
 800597a:	d908      	bls.n	800598e <_free_r+0x46>
 800597c:	6825      	ldr	r5, [r4, #0]
 800597e:	1961      	adds	r1, r4, r5
 8005980:	428b      	cmp	r3, r1
 8005982:	bf01      	itttt	eq
 8005984:	6819      	ldreq	r1, [r3, #0]
 8005986:	685b      	ldreq	r3, [r3, #4]
 8005988:	1949      	addeq	r1, r1, r5
 800598a:	6021      	streq	r1, [r4, #0]
 800598c:	e7ed      	b.n	800596a <_free_r+0x22>
 800598e:	461a      	mov	r2, r3
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b10b      	cbz	r3, 8005998 <_free_r+0x50>
 8005994:	42a3      	cmp	r3, r4
 8005996:	d9fa      	bls.n	800598e <_free_r+0x46>
 8005998:	6811      	ldr	r1, [r2, #0]
 800599a:	1855      	adds	r5, r2, r1
 800599c:	42a5      	cmp	r5, r4
 800599e:	d10b      	bne.n	80059b8 <_free_r+0x70>
 80059a0:	6824      	ldr	r4, [r4, #0]
 80059a2:	4421      	add	r1, r4
 80059a4:	1854      	adds	r4, r2, r1
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	6011      	str	r1, [r2, #0]
 80059aa:	d1e0      	bne.n	800596e <_free_r+0x26>
 80059ac:	681c      	ldr	r4, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	6053      	str	r3, [r2, #4]
 80059b2:	4421      	add	r1, r4
 80059b4:	6011      	str	r1, [r2, #0]
 80059b6:	e7da      	b.n	800596e <_free_r+0x26>
 80059b8:	d902      	bls.n	80059c0 <_free_r+0x78>
 80059ba:	230c      	movs	r3, #12
 80059bc:	6003      	str	r3, [r0, #0]
 80059be:	e7d6      	b.n	800596e <_free_r+0x26>
 80059c0:	6825      	ldr	r5, [r4, #0]
 80059c2:	1961      	adds	r1, r4, r5
 80059c4:	428b      	cmp	r3, r1
 80059c6:	bf04      	itt	eq
 80059c8:	6819      	ldreq	r1, [r3, #0]
 80059ca:	685b      	ldreq	r3, [r3, #4]
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	bf04      	itt	eq
 80059d0:	1949      	addeq	r1, r1, r5
 80059d2:	6021      	streq	r1, [r4, #0]
 80059d4:	6054      	str	r4, [r2, #4]
 80059d6:	e7ca      	b.n	800596e <_free_r+0x26>
 80059d8:	b003      	add	sp, #12
 80059da:	bd30      	pop	{r4, r5, pc}
 80059dc:	200016bc 	.word	0x200016bc

080059e0 <sbrk_aligned>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4e0e      	ldr	r6, [pc, #56]	; (8005a1c <sbrk_aligned+0x3c>)
 80059e4:	460c      	mov	r4, r1
 80059e6:	6831      	ldr	r1, [r6, #0]
 80059e8:	4605      	mov	r5, r0
 80059ea:	b911      	cbnz	r1, 80059f2 <sbrk_aligned+0x12>
 80059ec:	f000 f88c 	bl	8005b08 <_sbrk_r>
 80059f0:	6030      	str	r0, [r6, #0]
 80059f2:	4621      	mov	r1, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 f887 	bl	8005b08 <_sbrk_r>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d00a      	beq.n	8005a14 <sbrk_aligned+0x34>
 80059fe:	1cc4      	adds	r4, r0, #3
 8005a00:	f024 0403 	bic.w	r4, r4, #3
 8005a04:	42a0      	cmp	r0, r4
 8005a06:	d007      	beq.n	8005a18 <sbrk_aligned+0x38>
 8005a08:	1a21      	subs	r1, r4, r0
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 f87c 	bl	8005b08 <_sbrk_r>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d101      	bne.n	8005a18 <sbrk_aligned+0x38>
 8005a14:	f04f 34ff 	mov.w	r4, #4294967295
 8005a18:	4620      	mov	r0, r4
 8005a1a:	bd70      	pop	{r4, r5, r6, pc}
 8005a1c:	200016c0 	.word	0x200016c0

08005a20 <_malloc_r>:
 8005a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	1ccd      	adds	r5, r1, #3
 8005a26:	f025 0503 	bic.w	r5, r5, #3
 8005a2a:	3508      	adds	r5, #8
 8005a2c:	2d0c      	cmp	r5, #12
 8005a2e:	bf38      	it	cc
 8005a30:	250c      	movcc	r5, #12
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	4607      	mov	r7, r0
 8005a36:	db01      	blt.n	8005a3c <_malloc_r+0x1c>
 8005a38:	42a9      	cmp	r1, r5
 8005a3a:	d905      	bls.n	8005a48 <_malloc_r+0x28>
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	2600      	movs	r6, #0
 8005a42:	4630      	mov	r0, r6
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a48:	4e2e      	ldr	r6, [pc, #184]	; (8005b04 <_malloc_r+0xe4>)
 8005a4a:	f000 f907 	bl	8005c5c <__malloc_lock>
 8005a4e:	6833      	ldr	r3, [r6, #0]
 8005a50:	461c      	mov	r4, r3
 8005a52:	bb34      	cbnz	r4, 8005aa2 <_malloc_r+0x82>
 8005a54:	4629      	mov	r1, r5
 8005a56:	4638      	mov	r0, r7
 8005a58:	f7ff ffc2 	bl	80059e0 <sbrk_aligned>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	4604      	mov	r4, r0
 8005a60:	d14d      	bne.n	8005afe <_malloc_r+0xde>
 8005a62:	6834      	ldr	r4, [r6, #0]
 8005a64:	4626      	mov	r6, r4
 8005a66:	2e00      	cmp	r6, #0
 8005a68:	d140      	bne.n	8005aec <_malloc_r+0xcc>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4638      	mov	r0, r7
 8005a70:	eb04 0803 	add.w	r8, r4, r3
 8005a74:	f000 f848 	bl	8005b08 <_sbrk_r>
 8005a78:	4580      	cmp	r8, r0
 8005a7a:	d13a      	bne.n	8005af2 <_malloc_r+0xd2>
 8005a7c:	6821      	ldr	r1, [r4, #0]
 8005a7e:	3503      	adds	r5, #3
 8005a80:	1a6d      	subs	r5, r5, r1
 8005a82:	f025 0503 	bic.w	r5, r5, #3
 8005a86:	3508      	adds	r5, #8
 8005a88:	2d0c      	cmp	r5, #12
 8005a8a:	bf38      	it	cc
 8005a8c:	250c      	movcc	r5, #12
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4638      	mov	r0, r7
 8005a92:	f7ff ffa5 	bl	80059e0 <sbrk_aligned>
 8005a96:	3001      	adds	r0, #1
 8005a98:	d02b      	beq.n	8005af2 <_malloc_r+0xd2>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	442b      	add	r3, r5
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	e00e      	b.n	8005ac0 <_malloc_r+0xa0>
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	1b52      	subs	r2, r2, r5
 8005aa6:	d41e      	bmi.n	8005ae6 <_malloc_r+0xc6>
 8005aa8:	2a0b      	cmp	r2, #11
 8005aaa:	d916      	bls.n	8005ada <_malloc_r+0xba>
 8005aac:	1961      	adds	r1, r4, r5
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	6025      	str	r5, [r4, #0]
 8005ab2:	bf18      	it	ne
 8005ab4:	6059      	strne	r1, [r3, #4]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	bf08      	it	eq
 8005aba:	6031      	streq	r1, [r6, #0]
 8005abc:	5162      	str	r2, [r4, r5]
 8005abe:	604b      	str	r3, [r1, #4]
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f104 060b 	add.w	r6, r4, #11
 8005ac6:	f000 f8cf 	bl	8005c68 <__malloc_unlock>
 8005aca:	f026 0607 	bic.w	r6, r6, #7
 8005ace:	1d23      	adds	r3, r4, #4
 8005ad0:	1af2      	subs	r2, r6, r3
 8005ad2:	d0b6      	beq.n	8005a42 <_malloc_r+0x22>
 8005ad4:	1b9b      	subs	r3, r3, r6
 8005ad6:	50a3      	str	r3, [r4, r2]
 8005ad8:	e7b3      	b.n	8005a42 <_malloc_r+0x22>
 8005ada:	6862      	ldr	r2, [r4, #4]
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	bf0c      	ite	eq
 8005ae0:	6032      	streq	r2, [r6, #0]
 8005ae2:	605a      	strne	r2, [r3, #4]
 8005ae4:	e7ec      	b.n	8005ac0 <_malloc_r+0xa0>
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	6864      	ldr	r4, [r4, #4]
 8005aea:	e7b2      	b.n	8005a52 <_malloc_r+0x32>
 8005aec:	4634      	mov	r4, r6
 8005aee:	6876      	ldr	r6, [r6, #4]
 8005af0:	e7b9      	b.n	8005a66 <_malloc_r+0x46>
 8005af2:	230c      	movs	r3, #12
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4638      	mov	r0, r7
 8005af8:	f000 f8b6 	bl	8005c68 <__malloc_unlock>
 8005afc:	e7a1      	b.n	8005a42 <_malloc_r+0x22>
 8005afe:	6025      	str	r5, [r4, #0]
 8005b00:	e7de      	b.n	8005ac0 <_malloc_r+0xa0>
 8005b02:	bf00      	nop
 8005b04:	200016bc 	.word	0x200016bc

08005b08 <_sbrk_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d06      	ldr	r5, [pc, #24]	; (8005b24 <_sbrk_r+0x1c>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	602b      	str	r3, [r5, #0]
 8005b14:	f000 f8c0 	bl	8005c98 <_sbrk>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_sbrk_r+0x1a>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_sbrk_r+0x1a>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	200016c4 	.word	0x200016c4

08005b28 <__sread>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b30:	f000 f8a0 	bl	8005c74 <_read_r>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	bfab      	itete	ge
 8005b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b3c:	181b      	addge	r3, r3, r0
 8005b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b42:	bfac      	ite	ge
 8005b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b46:	81a3      	strhlt	r3, [r4, #12]
 8005b48:	bd10      	pop	{r4, pc}

08005b4a <__swrite>:
 8005b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4e:	461f      	mov	r7, r3
 8005b50:	898b      	ldrh	r3, [r1, #12]
 8005b52:	05db      	lsls	r3, r3, #23
 8005b54:	4605      	mov	r5, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	4616      	mov	r6, r2
 8005b5a:	d505      	bpl.n	8005b68 <__swrite+0x1e>
 8005b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b60:	2302      	movs	r3, #2
 8005b62:	2200      	movs	r2, #0
 8005b64:	f000 f868 	bl	8005c38 <_lseek_r>
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	4632      	mov	r2, r6
 8005b76:	463b      	mov	r3, r7
 8005b78:	4628      	mov	r0, r5
 8005b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7e:	f000 b817 	b.w	8005bb0 <_write_r>

08005b82 <__sseek>:
 8005b82:	b510      	push	{r4, lr}
 8005b84:	460c      	mov	r4, r1
 8005b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8a:	f000 f855 	bl	8005c38 <_lseek_r>
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	bf15      	itete	ne
 8005b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b9e:	81a3      	strheq	r3, [r4, #12]
 8005ba0:	bf18      	it	ne
 8005ba2:	81a3      	strhne	r3, [r4, #12]
 8005ba4:	bd10      	pop	{r4, pc}

08005ba6 <__sclose>:
 8005ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005baa:	f000 b813 	b.w	8005bd4 <_close_r>
	...

08005bb0 <_write_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d07      	ldr	r5, [pc, #28]	; (8005bd0 <_write_r+0x20>)
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	4608      	mov	r0, r1
 8005bb8:	4611      	mov	r1, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	602a      	str	r2, [r5, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f7fa fd2f 	bl	8000622 <_write>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_write_r+0x1e>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_write_r+0x1e>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	200016c4 	.word	0x200016c4

08005bd4 <_close_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d06      	ldr	r5, [pc, #24]	; (8005bf0 <_close_r+0x1c>)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	f7fa fd3b 	bl	800065a <_close>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_close_r+0x1a>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_close_r+0x1a>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	200016c4 	.word	0x200016c4

08005bf4 <_fstat_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4d07      	ldr	r5, [pc, #28]	; (8005c14 <_fstat_r+0x20>)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	4611      	mov	r1, r2
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	f7fa fd36 	bl	8000672 <_fstat>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d102      	bne.n	8005c10 <_fstat_r+0x1c>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	b103      	cbz	r3, 8005c10 <_fstat_r+0x1c>
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	bf00      	nop
 8005c14:	200016c4 	.word	0x200016c4

08005c18 <_isatty_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4d06      	ldr	r5, [pc, #24]	; (8005c34 <_isatty_r+0x1c>)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	4604      	mov	r4, r0
 8005c20:	4608      	mov	r0, r1
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	f7fa fd35 	bl	8000692 <_isatty>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_isatty_r+0x1a>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_isatty_r+0x1a>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	200016c4 	.word	0x200016c4

08005c38 <_lseek_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d07      	ldr	r5, [pc, #28]	; (8005c58 <_lseek_r+0x20>)
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	4608      	mov	r0, r1
 8005c40:	4611      	mov	r1, r2
 8005c42:	2200      	movs	r2, #0
 8005c44:	602a      	str	r2, [r5, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f7fa fd2e 	bl	80006a8 <_lseek>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_lseek_r+0x1e>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_lseek_r+0x1e>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	200016c4 	.word	0x200016c4

08005c5c <__malloc_lock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__malloc_lock+0x8>)
 8005c5e:	f7ff be0b 	b.w	8005878 <__retarget_lock_acquire_recursive>
 8005c62:	bf00      	nop
 8005c64:	200016b8 	.word	0x200016b8

08005c68 <__malloc_unlock>:
 8005c68:	4801      	ldr	r0, [pc, #4]	; (8005c70 <__malloc_unlock+0x8>)
 8005c6a:	f7ff be06 	b.w	800587a <__retarget_lock_release_recursive>
 8005c6e:	bf00      	nop
 8005c70:	200016b8 	.word	0x200016b8

08005c74 <_read_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4d07      	ldr	r5, [pc, #28]	; (8005c94 <_read_r+0x20>)
 8005c78:	4604      	mov	r4, r0
 8005c7a:	4608      	mov	r0, r1
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	2200      	movs	r2, #0
 8005c80:	602a      	str	r2, [r5, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f7fa fcb0 	bl	80005e8 <_read>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d102      	bne.n	8005c92 <_read_r+0x1e>
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	b103      	cbz	r3, 8005c92 <_read_r+0x1e>
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	bd38      	pop	{r3, r4, r5, pc}
 8005c94:	200016c4 	.word	0x200016c4

08005c98 <_sbrk>:
 8005c98:	4a04      	ldr	r2, [pc, #16]	; (8005cac <_sbrk+0x14>)
 8005c9a:	6811      	ldr	r1, [r2, #0]
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	b909      	cbnz	r1, 8005ca4 <_sbrk+0xc>
 8005ca0:	4903      	ldr	r1, [pc, #12]	; (8005cb0 <_sbrk+0x18>)
 8005ca2:	6011      	str	r1, [r2, #0]
 8005ca4:	6810      	ldr	r0, [r2, #0]
 8005ca6:	4403      	add	r3, r0
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4770      	bx	lr
 8005cac:	200016c8 	.word	0x200016c8
 8005cb0:	200016d0 	.word	0x200016d0

08005cb4 <_init>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	bf00      	nop
 8005cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cba:	bc08      	pop	{r3}
 8005cbc:	469e      	mov	lr, r3
 8005cbe:	4770      	bx	lr

08005cc0 <_fini>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr
