
6.5_Deadlock-with-Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb0  08005eb0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005eb0  08005eb0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eb0  08005eb0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001658  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200016d0  200016d0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4e9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002688  00000000  00000000  0002f591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00031c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  00032b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a5a  00000000  00000000  00033928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e74  00000000  00000000  00055382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8d70  00000000  00000000  000661f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ef66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044d8  00000000  00000000  0012efb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d74 	.word	0x08005d74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005d74 	.word	0x08005d74

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 fadb 	bl	8000790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f833 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f873 	bl	80002c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  xMutex = xSemaphoreCreateMutex(); // create mutex with name xMutex
 80001e2:	2001      	movs	r0, #1
 80001e4:	f002 fc4e 	bl	8002a84 <xQueueCreateMutex>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4a12      	ldr	r2, [pc, #72]	; (8000234 <main+0x64>)
 80001ec:	6013      	str	r3, [r2, #0]
  yMutex = xSemaphoreCreateMutex(); //  create mutex with name yMutex
 80001ee:	2001      	movs	r0, #1
 80001f0:	f002 fc48 	bl	8002a84 <xQueueCreateMutex>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a10      	ldr	r2, [pc, #64]	; (8000238 <main+0x68>)
 80001f8:	6013      	str	r3, [r2, #0]

  xTaskCreate(Task1, "Task1",100,NULL,1,NULL); // Create Task1 with priority 1
 80001fa:	2300      	movs	r3, #0
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	2301      	movs	r3, #1
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2264      	movs	r2, #100	; 0x64
 8000206:	490d      	ldr	r1, [pc, #52]	; (800023c <main+0x6c>)
 8000208:	480d      	ldr	r0, [pc, #52]	; (8000240 <main+0x70>)
 800020a:	f003 f96d 	bl	80034e8 <xTaskCreate>

  vTaskStartScheduler();
 800020e:	f003 fae5 	bl	80037dc <vTaskStartScheduler>
  xSemaphoreGive(xMutex); // make available xMutex
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <main+0x64>)
 8000214:	6818      	ldr	r0, [r3, #0]
 8000216:	2300      	movs	r3, #0
 8000218:	2200      	movs	r2, #0
 800021a:	2100      	movs	r1, #0
 800021c:	f002 fc4a 	bl	8002ab4 <xQueueGenericSend>
  xSemaphoreGive(yMutex);  // make available yMutex
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <main+0x68>)
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	2300      	movs	r3, #0
 8000226:	2200      	movs	r2, #0
 8000228:	2100      	movs	r1, #0
 800022a:	f002 fc43 	bl	8002ab4 <xQueueGenericSend>

  vTaskStartScheduler();
 800022e:	f003 fad5 	bl	80037dc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000232:	e7fe      	b.n	8000232 <main+0x62>
 8000234:	20000094 	.word	0x20000094
 8000238:	20000098 	.word	0x20000098
 800023c:	08005d8c 	.word	0x08005d8c
 8000240:	080003b9 	.word	0x080003b9

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f005 f87a 	bl	800534c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fd25 	bl	8000cd4 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000290:	f000 f90a 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fd4e 	bl	8001d50 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ba:	f000 f8f5 	bl	80004a8 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002de:	4b34      	ldr	r3, [pc, #208]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a33      	ldr	r2, [pc, #204]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b31      	ldr	r3, [pc, #196]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002f6:	4b2e      	ldr	r3, [pc, #184]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a2d      	ldr	r2, [pc, #180]	; (80003b0 <MX_GPIO_Init+0xe8>)
 80002fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b2b      	ldr	r3, [pc, #172]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a27      	ldr	r2, [pc, #156]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <MX_GPIO_Init+0xe8>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a21      	ldr	r2, [pc, #132]	; (80003b0 <MX_GPIO_Init+0xe8>)
 800032c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <MX_GPIO_Init+0xe8>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2120      	movs	r1, #32
 8000342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000346:	f000 fcad 	bl	8000ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800034a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800034e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000350:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	4619      	mov	r1, r3
 8000360:	4814      	ldr	r0, [pc, #80]	; (80003b4 <MX_GPIO_Init+0xec>)
 8000362:	f000 fb2d 	bl	80009c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000366:	230c      	movs	r3, #12
 8000368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036a:	2302      	movs	r3, #2
 800036c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000372:	2303      	movs	r3, #3
 8000374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000376:	2307      	movs	r3, #7
 8000378:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	4619      	mov	r1, r3
 8000380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000384:	f000 fb1c 	bl	80009c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000388:	2320      	movs	r3, #32
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038c:	2301      	movs	r3, #1
 800038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	2300      	movs	r3, #0
 8000396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	4619      	mov	r1, r3
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f000 fb0d 	bl	80009c0 <HAL_GPIO_Init>

}
 80003a6:	bf00      	nop
 80003a8:	3728      	adds	r7, #40	; 0x28
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	48000800 	.word	0x48000800

080003b8 <Task1>:

/* USER CODE BEGIN 4 */

void Task1(void *p)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af02      	add	r7, sp, #8
 80003be:	6078      	str	r0, [r7, #4]
  while(1)
  {
   xSemaphoreTake(xMutex,portMAX_DELAY);
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <Task1+0x5c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f04f 31ff 	mov.w	r1, #4294967295
 80003c8:	4618      	mov	r0, r3
 80003ca:	f002 fdfb 	bl	8002fc4 <xQueueSemaphoreTake>
   printf("Inside Task1\n");
 80003ce:	4812      	ldr	r0, [pc, #72]	; (8000418 <Task1+0x60>)
 80003d0:	f005 f832 	bl	8005438 <puts>
   xTaskCreate(Task2, "Task2", 100,NULL,2,NULL);
 80003d4:	2300      	movs	r3, #0
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	2302      	movs	r3, #2
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	2300      	movs	r3, #0
 80003de:	2264      	movs	r2, #100	; 0x64
 80003e0:	490e      	ldr	r1, [pc, #56]	; (800041c <Task1+0x64>)
 80003e2:	480f      	ldr	r0, [pc, #60]	; (8000420 <Task1+0x68>)
 80003e4:	f003 f880 	bl	80034e8 <xTaskCreate>
   printf("Task1 attempting to take yMutex\n");
 80003e8:	480e      	ldr	r0, [pc, #56]	; (8000424 <Task1+0x6c>)
 80003ea:	f005 f825 	bl	8005438 <puts>
   xSemaphoreTake(yMutex,portMAX_DELAY);
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <Task1+0x70>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f04f 31ff 	mov.w	r1, #4294967295
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 fde4 	bl	8002fc4 <xQueueSemaphoreTake>
   xSemaphoreGive(xMutex);
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <Task1+0x5c>)
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	2300      	movs	r3, #0
 8000402:	2200      	movs	r2, #0
 8000404:	2100      	movs	r1, #0
 8000406:	f002 fb55 	bl	8002ab4 <xQueueGenericSend>
   vTaskDelay(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f003 f9b2 	bl	8003774 <vTaskDelay>
   xSemaphoreTake(xMutex,portMAX_DELAY);
 8000410:	e7d6      	b.n	80003c0 <Task1+0x8>
 8000412:	bf00      	nop
 8000414:	20000094 	.word	0x20000094
 8000418:	08005d94 	.word	0x08005d94
 800041c:	08005da4 	.word	0x08005da4
 8000420:	0800042d 	.word	0x0800042d
 8000424:	08005dac 	.word	0x08005dac
 8000428:	20000098 	.word	0x20000098

0800042c <Task2>:
  }
}

void Task2(void *p)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  while(1)
  {
    xSemaphoreTake(yMutex,portMAX_DELAY);
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <Task2+0x48>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f04f 31ff 	mov.w	r1, #4294967295
 800043c:	4618      	mov	r0, r3
 800043e:	f002 fdc1 	bl	8002fc4 <xQueueSemaphoreTake>
    printf("Inside Task2\n");
 8000442:	480d      	ldr	r0, [pc, #52]	; (8000478 <Task2+0x4c>)
 8000444:	f004 fff8 	bl	8005438 <puts>
    printf("Task2 attempting to take xMutex\n");
 8000448:	480c      	ldr	r0, [pc, #48]	; (800047c <Task2+0x50>)
 800044a:	f004 fff5 	bl	8005438 <puts>
    xSemaphoreTake(xMutex,portMAX_DELAY);
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <Task2+0x54>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f04f 31ff 	mov.w	r1, #4294967295
 8000456:	4618      	mov	r0, r3
 8000458:	f002 fdb4 	bl	8002fc4 <xQueueSemaphoreTake>
    xSemaphoreGive(yMutex);
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <Task2+0x48>)
 800045e:	6818      	ldr	r0, [r3, #0]
 8000460:	2300      	movs	r3, #0
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fb25 	bl	8002ab4 <xQueueGenericSend>
    vTaskDelay(1);
 800046a:	2001      	movs	r0, #1
 800046c:	f003 f982 	bl	8003774 <vTaskDelay>
    xSemaphoreTake(yMutex,portMAX_DELAY);
 8000470:	e7e0      	b.n	8000434 <Task2+0x8>
 8000472:	bf00      	nop
 8000474:	20000098 	.word	0x20000098
 8000478:	08005dcc 	.word	0x08005dcc
 800047c:	08005ddc 	.word	0x08005ddc
 8000480:	20000094 	.word	0x20000094

08000484 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d101      	bne.n	800049a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000496:	f000 f991 	bl	80007bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40001000 	.word	0x40001000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <Error_Handler+0x8>
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x44>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <HAL_MspInit+0x44>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x44>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_MspInit+0x44>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_MspInit+0x44>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_MspInit+0x44>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	; 0x30
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority ,0);
 800050c:	2200      	movs	r2, #0
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	2036      	movs	r0, #54	; 0x36
 8000512:	f000 fa2b 	bl	800096c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000516:	2036      	movs	r0, #54	; 0x36
 8000518:	f000 fa44 	bl	80009a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <HAL_InitTick+0xa0>)
 800051e:	69db      	ldr	r3, [r3, #28]
 8000520:	4a1e      	ldr	r2, [pc, #120]	; (800059c <HAL_InitTick+0xa0>)
 8000522:	f043 0310 	orr.w	r3, r3, #16
 8000526:	61d3      	str	r3, [r2, #28]
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_InitTick+0xa0>)
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	f003 0310 	and.w	r3, r3, #16
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000534:	f107 0210 	add.w	r2, r7, #16
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fe1a 	bl	8002178 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000544:	f001 fdf6 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8000548:	4603      	mov	r3, r0
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <HAL_InitTick+0xa4>)
 8000552:	fba2 2303 	umull	r2, r3, r2, r3
 8000556:	0c9b      	lsrs	r3, r3, #18
 8000558:	3b01      	subs	r3, #1
 800055a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <HAL_InitTick+0xa8>)
 800055e:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <HAL_InitTick+0xac>)
 8000560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <HAL_InitTick+0xa8>)
 8000564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000568:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <HAL_InitTick+0xa8>)
 800056c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800056e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_InitTick+0xa8>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <HAL_InitTick+0xa8>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <HAL_InitTick+0xa8>)
 800057e:	f001 fe2d 	bl	80021dc <HAL_TIM_Base_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d104      	bne.n	8000592 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <HAL_InitTick+0xa8>)
 800058a:	f001 fe89 	bl	80022a0 <HAL_TIM_Base_Start_IT>
 800058e:	4603      	mov	r3, r0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3730      	adds	r7, #48	; 0x30
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	431bde83 	.word	0x431bde83
 80005a4:	2000009c 	.word	0x2000009c
 80005a8:	40001000 	.word	0x40001000

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <NMI_Handler+0x4>

080005b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <HardFault_Handler+0x4>

080005b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <MemManage_Handler+0x4>

080005be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <BusFault_Handler+0x4>

080005c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <UsageFault_Handler+0x4>

080005ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <TIM6_DAC1_IRQHandler+0x10>)
 80005de:	f001 febb 	bl	8002358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000009c 	.word	0x2000009c

080005ec <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <ITM_SendChar+0x48>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <ITM_SendChar+0x48>)
 80005fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000600:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <ITM_SendChar+0x4c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <ITM_SendChar+0x4c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800060e:	bf00      	nop
 8000610:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f8      	beq.n	8000610 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800061e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	6013      	str	r3, [r2, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000edfc 	.word	0xe000edfc
 8000638:	e0000e00 	.word	0xe0000e00

0800063c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	e00a      	b.n	8000664 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800064e:	f3af 8000 	nop.w
 8000652:	4601      	mov	r1, r0
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	60ba      	str	r2, [r7, #8]
 800065a:	b2ca      	uxtb	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf0      	blt.n	800064e <_read+0x12>
	}

return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	e009      	b.n	800069c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	60ba      	str	r2, [r7, #8]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffab 	bl	80005ec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dbf1      	blt.n	8000688 <_write+0x12>
	}
	return len;
 80006a4:	687b      	ldr	r3, [r7, #4]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_close>:

int _close(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	return -1;
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006d6:	605a      	str	r2, [r3, #4]
	return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <_isatty>:

int _isatty(int file)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
	return 1;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
	return 0;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SystemInit+0x20>)
 800071e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <SystemInit+0x20>)
 8000724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800073c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000774 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000740:	f7ff ffea 	bl	8000718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	; (800077c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	; (8000788 <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076a:	f004 fdbd 	bl	80052e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800076e:	f7ff fd2f 	bl	80001d0 <main>

08000772 <LoopForever>:

LoopForever:
    b LoopForever
 8000772:	e7fe      	b.n	8000772 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000774:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000780:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 8000784:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000788:	200016d0 	.word	0x200016d0

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_Init+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_Init+0x28>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f8d8 	bl	8000956 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fea8 	bl	80004fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff fe82 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40022000 	.word	0x40022000

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_IncTick+0x20>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_IncTick+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <HAL_IncTick+0x24>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008
 80007e0:	200000e8 	.word	0x200000e8

080007e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <HAL_GetTick+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	200000e8 	.word	0x200000e8

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4907      	ldr	r1, [pc, #28]	; (8000898 <__NVIC_EnableIRQ+0x38>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	; 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ff4c 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800097e:	f7ff ff61 	bl	8000844 <__NVIC_GetPriorityGrouping>
 8000982:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	68b9      	ldr	r1, [r7, #8]
 8000988:	6978      	ldr	r0, [r7, #20]
 800098a:	f7ff ffb1 	bl	80008f0 <NVIC_EncodePriority>
 800098e:	4602      	mov	r2, r0
 8000990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff80 	bl	800089c <__NVIC_SetPriority>
}
 800099c:	bf00      	nop
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff54 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ce:	e14e      	b.n	8000c6e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	2101      	movs	r1, #1
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	fa01 f303 	lsl.w	r3, r1, r3
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f000 8140 	beq.w	8000c68 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d005      	beq.n	8000a00 <HAL_GPIO_Init+0x40>
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d130      	bne.n	8000a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68da      	ldr	r2, [r3, #12]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a36:	2201      	movs	r2, #1
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	091b      	lsrs	r3, r3, #4
 8000a4c:	f003 0201 	and.w	r2, r3, #1
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d017      	beq.n	8000a9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d123      	bne.n	8000af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	08da      	lsrs	r2, r3, #3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3208      	adds	r2, #8
 8000ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	220f      	movs	r2, #15
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	691a      	ldr	r2, [r3, #16]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	08da      	lsrs	r2, r3, #3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3208      	adds	r2, #8
 8000aec:	6939      	ldr	r1, [r7, #16]
 8000aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	2203      	movs	r2, #3
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0203 	and.w	r2, r3, #3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 809a 	beq.w	8000c68 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b34:	4b55      	ldr	r3, [pc, #340]	; (8000c8c <HAL_GPIO_Init+0x2cc>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a54      	ldr	r2, [pc, #336]	; (8000c8c <HAL_GPIO_Init+0x2cc>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b52      	ldr	r3, [pc, #328]	; (8000c8c <HAL_GPIO_Init+0x2cc>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b4c:	4a50      	ldr	r2, [pc, #320]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	3302      	adds	r3, #2
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	220f      	movs	r2, #15
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b76:	d013      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e0>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a46      	ldr	r2, [pc, #280]	; (8000c94 <HAL_GPIO_Init+0x2d4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d00d      	beq.n	8000b9c <HAL_GPIO_Init+0x1dc>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a45      	ldr	r2, [pc, #276]	; (8000c98 <HAL_GPIO_Init+0x2d8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d007      	beq.n	8000b98 <HAL_GPIO_Init+0x1d8>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a44      	ldr	r2, [pc, #272]	; (8000c9c <HAL_GPIO_Init+0x2dc>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d101      	bne.n	8000b94 <HAL_GPIO_Init+0x1d4>
 8000b90:	2303      	movs	r3, #3
 8000b92:	e006      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000b94:	2305      	movs	r3, #5
 8000b96:	e004      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4093      	lsls	r3, r2
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb2:	4937      	ldr	r1, [pc, #220]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be4:	4a2e      	ldr	r2, [pc, #184]	; (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0e:	4a24      	ldr	r2, [pc, #144]	; (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa22 f303 	lsr.w	r3, r2, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f47f aea9 	bne.w	80009d0 <HAL_GPIO_Init+0x10>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb4:	787b      	ldrb	r3, [r7, #1]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc0:	e002      	b.n	8000cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cc2:	887a      	ldrh	r2, [r7, #2]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ce4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f001 b823 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 817d 	beq.w	800100a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d10:	4bbc      	ldr	r3, [pc, #752]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 030c 	and.w	r3, r3, #12
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d00c      	beq.n	8000d36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d1c:	4bb9      	ldr	r3, [pc, #740]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b08      	cmp	r3, #8
 8000d26:	d15c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x10e>
 8000d28:	4bb6      	ldr	r3, [pc, #728]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d34:	d155      	bne.n	8000de2 <HAL_RCC_OscConfig+0x10e>
 8000d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4e:	fab3 f383 	clz	r3, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	095b      	lsrs	r3, r3, #5
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d102      	bne.n	8000d68 <HAL_RCC_OscConfig+0x94>
 8000d62:	4ba8      	ldr	r3, [pc, #672]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	e015      	b.n	8000d94 <HAL_RCC_OscConfig+0xc0>
 8000d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d74:	fa93 f3a3 	rbit	r3, r3
 8000d78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d90:	4b9c      	ldr	r3, [pc, #624]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000da0:	fa92 f2a2 	rbit	r2, r2
 8000da4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000da8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000dac:	fab2 f282 	clz	r2, r2
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	f042 0220 	orr.w	r2, r2, #32
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	f002 021f 	and.w	r2, r2, #31
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 811f 	beq.w	8001008 <HAL_RCC_OscConfig+0x334>
 8000dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f040 8116 	bne.w	8001008 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f000 bfaf 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df2:	d106      	bne.n	8000e02 <HAL_RCC_OscConfig+0x12e>
 8000df4:	4b83      	ldr	r3, [pc, #524]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a82      	ldr	r2, [pc, #520]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e036      	b.n	8000e70 <HAL_RCC_OscConfig+0x19c>
 8000e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x158>
 8000e12:	4b7c      	ldr	r3, [pc, #496]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a7b      	ldr	r2, [pc, #492]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b79      	ldr	r3, [pc, #484]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a78      	ldr	r2, [pc, #480]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e021      	b.n	8000e70 <HAL_RCC_OscConfig+0x19c>
 8000e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x184>
 8000e3e:	4b71      	ldr	r3, [pc, #452]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a70      	ldr	r2, [pc, #448]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b6e      	ldr	r3, [pc, #440]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a6d      	ldr	r2, [pc, #436]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e00b      	b.n	8000e70 <HAL_RCC_OscConfig+0x19c>
 8000e58:	4b6a      	ldr	r3, [pc, #424]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a69      	ldr	r2, [pc, #420]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b67      	ldr	r3, [pc, #412]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a66      	ldr	r2, [pc, #408]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e70:	4b64      	ldr	r3, [pc, #400]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	f023 020f 	bic.w	r2, r3, #15
 8000e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	495f      	ldr	r1, [pc, #380]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d059      	beq.n	8000f4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fca3 	bl	80007e4 <HAL_GetTick>
 8000e9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea2:	e00a      	b.n	8000eba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fc9e 	bl	80007e4 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b64      	cmp	r3, #100	; 0x64
 8000eb2:	d902      	bls.n	8000eba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	f000 bf43 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 8000eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ece:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	fab3 f383 	clz	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	095b      	lsrs	r3, r3, #5
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d102      	bne.n	8000eec <HAL_RCC_OscConfig+0x218>
 8000ee6:	4b47      	ldr	r3, [pc, #284]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	e015      	b.n	8000f18 <HAL_RCC_OscConfig+0x244>
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f04:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f0c:	fa93 f3a3 	rbit	r3, r3
 8000f10:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f1c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f24:	fa92 f2a2 	rbit	r2, r2
 8000f28:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f30:	fab2 f282 	clz	r2, r2
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f002 021f 	and.w	r2, r2, #31
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f202 	lsl.w	r2, r1, r2
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0ab      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x1d0>
 8000f4c:	e05d      	b.n	800100a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fc49 	bl	80007e4 <HAL_GetTick>
 8000f52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f56:	e00a      	b.n	8000f6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fc44 	bl	80007e4 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b64      	cmp	r3, #100	; 0x64
 8000f66:	d902      	bls.n	8000f6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	f000 bee9 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 8000f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f72:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	fab3 f383 	clz	r3, r3
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	095b      	lsrs	r3, r3, #5
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d102      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x2cc>
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	e015      	b.n	8000fcc <HAL_RCC_OscConfig+0x2f8>
 8000fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fac:	fa93 f3a3 	rbit	r3, r3
 8000fb0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fc0:	fa93 f3a3 	rbit	r3, r3
 8000fc4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000fd4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fd8:	fa92 f2a2 	rbit	r2, r2
 8000fdc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fe0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fe4:	fab2 f282 	clz	r2, r2
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	f042 0220 	orr.w	r2, r2, #32
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	f002 021f 	and.w	r2, r2, #31
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1ab      	bne.n	8000f58 <HAL_RCC_OscConfig+0x284>
 8001000:	e003      	b.n	800100a <HAL_RCC_OscConfig+0x336>
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 817d 	beq.w	800131a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001020:	4ba6      	ldr	r3, [pc, #664]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00b      	beq.n	8001044 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800102c:	4ba3      	ldr	r3, [pc, #652]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b08      	cmp	r3, #8
 8001036:	d172      	bne.n	800111e <HAL_RCC_OscConfig+0x44a>
 8001038:	4ba0      	ldr	r3, [pc, #640]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d16c      	bne.n	800111e <HAL_RCC_OscConfig+0x44a>
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001056:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <HAL_RCC_OscConfig+0x3a0>
 800106e:	4b93      	ldr	r3, [pc, #588]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	e013      	b.n	800109c <HAL_RCC_OscConfig+0x3c8>
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800108c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001098:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	2202      	movs	r2, #2
 800109e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010a6:	fa92 f2a2 	rbit	r2, r2
 80010aa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010b2:	fab2 f282 	clz	r2, r2
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	f002 021f 	and.w	r2, r2, #31
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <HAL_RCC_OscConfig+0x410>
 80010ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d002      	beq.n	80010e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	f000 be2e 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	4b75      	ldr	r3, [pc, #468]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	21f8      	movs	r1, #248	; 0xf8
 80010fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001102:	fa91 f1a1 	rbit	r1, r1
 8001106:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800110a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800110e:	fab1 f181 	clz	r1, r1
 8001112:	b2c9      	uxtb	r1, r1
 8001114:	408b      	lsls	r3, r1
 8001116:	4969      	ldr	r1, [pc, #420]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111c:	e0fd      	b.n	800131a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8088 	beq.w	8001240 <HAL_RCC_OscConfig+0x56c>
 8001130:	2301      	movs	r3, #1
 8001132:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001142:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	2301      	movs	r3, #1
 800115a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fb42 	bl	80007e4 <HAL_GetTick>
 8001160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001166:	f7ff fb3d 	bl	80007e4 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d902      	bls.n	800117c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	f000 bde2 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800118e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0x4d8>
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x500>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	2202      	movs	r2, #2
 80011d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011de:	fa92 f2a2 	rbit	r2, r2
 80011e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011ea:	fab2 f282 	clz	r2, r2
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	f042 0220 	orr.w	r2, r2, #32
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	f002 021f 	and.w	r2, r2, #31
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0af      	beq.n	8001166 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	21f8      	movs	r1, #248	; 0xf8
 800121c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001224:	fa91 f1a1 	rbit	r1, r1
 8001228:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800122c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001230:	fab1 f181 	clz	r1, r1
 8001234:	b2c9      	uxtb	r1, r1
 8001236:	408b      	lsls	r3, r1
 8001238:	4920      	ldr	r1, [pc, #128]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
 800123e:	e06c      	b.n	800131a <HAL_RCC_OscConfig+0x646>
 8001240:	2301      	movs	r3, #1
 8001242:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001252:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	fab3 f383 	clz	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001260:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	461a      	mov	r2, r3
 8001268:	2300      	movs	r3, #0
 800126a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff faba 	bl	80007e4 <HAL_GetTick>
 8001270:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001276:	f7ff fab5 	bl	80007e4 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d902      	bls.n	800128c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	f000 bd5a 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800129e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d104      	bne.n	80012c0 <HAL_RCC_OscConfig+0x5ec>
 80012b6:	4b01      	ldr	r3, [pc, #4]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e015      	b.n	80012e8 <HAL_RCC_OscConfig+0x614>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012e4:	4bc8      	ldr	r3, [pc, #800]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2202      	movs	r2, #2
 80012ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012f2:	fa92 f2a2 	rbit	r2, r2
 80012f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	f042 0220 	orr.w	r2, r2, #32
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f002 021f 	and.w	r2, r2, #31
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1ad      	bne.n	8001276 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8110 	beq.w	8001550 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d079      	beq.n	8001434 <HAL_RCC_OscConfig+0x760>
 8001340:	2301      	movs	r3, #1
 8001342:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4bab      	ldr	r3, [pc, #684]	; (800160c <HAL_RCC_OscConfig+0x938>)
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	461a      	mov	r2, r3
 8001366:	2301      	movs	r3, #1
 8001368:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fa3b 	bl	80007e4 <HAL_GetTick>
 800136e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	e00a      	b.n	800138a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fa36 	bl	80007e4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d902      	bls.n	800138a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	f000 bcdb 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800139c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013a4:	2202      	movs	r2, #2
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013c8:	2202      	movs	r2, #2
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	fa93 f2a3 	rbit	r2, r3
 80013da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e4:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 80013e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013f0:	2102      	movs	r1, #2
 80013f2:	6019      	str	r1, [r3, #0]
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f1a3 	rbit	r1, r3
 8001402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001406:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800140a:	6019      	str	r1, [r3, #0]
  return result;
 800140c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001410:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0a0      	beq.n	8001374 <HAL_RCC_OscConfig+0x6a0>
 8001432:	e08d      	b.n	8001550 <HAL_RCC_OscConfig+0x87c>
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f2a3 	rbit	r2, r3
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001456:	601a      	str	r2, [r3, #0]
  return result;
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001460:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_OscConfig+0x938>)
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	461a      	mov	r2, r3
 8001472:	2300      	movs	r3, #0
 8001474:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff f9b5 	bl	80007e4 <HAL_GetTick>
 800147a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff f9b0 	bl	80007e4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d902      	bls.n	8001496 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	f000 bc55 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800149e:	2202      	movs	r2, #2
 80014a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fa93 f2a3 	rbit	r2, r3
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014c2:	2202      	movs	r2, #2
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	fa93 f2a3 	rbit	r2, r3
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014e6:	2202      	movs	r2, #2
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fa93 f2a3 	rbit	r2, r3
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001500:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 8001504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800150e:	2102      	movs	r1, #2
 8001510:	6019      	str	r1, [r3, #0]
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f1a3 	rbit	r1, r3
 8001520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001524:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001528:	6019      	str	r1, [r3, #0]
  return result;
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d197      	bne.n	8001480 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 81a1 	beq.w	80018a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d116      	bne.n	80015a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	61d3      	str	r3, [r2, #28]
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800159e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_RCC_OscConfig+0x93c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d11a      	bne.n	80015e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_RCC_OscConfig+0x93c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <HAL_RCC_OscConfig+0x93c>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff f911 	bl	80007e4 <HAL_GetTick>
 80015c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	e009      	b.n	80015dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c8:	f7ff f90c 	bl	80007e4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	; 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e3b1      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_RCC_OscConfig+0x93c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ef      	beq.n	80015c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10d      	bne.n	8001614 <HAL_RCC_OscConfig+0x940>
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a02      	ldr	r2, [pc, #8]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	e03c      	b.n	8001680 <HAL_RCC_OscConfig+0x9ac>
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	10908120 	.word	0x10908120
 8001610:	40007000 	.word	0x40007000
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x96a>
 8001624:	4bc1      	ldr	r3, [pc, #772]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4ac0      	ldr	r2, [pc, #768]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	4bbe      	ldr	r3, [pc, #760]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4abd      	ldr	r2, [pc, #756]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	e020      	b.n	8001680 <HAL_RCC_OscConfig+0x9ac>
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b05      	cmp	r3, #5
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x994>
 800164e:	4bb7      	ldr	r3, [pc, #732]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4ab6      	ldr	r2, [pc, #728]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	4bb4      	ldr	r3, [pc, #720]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4ab3      	ldr	r2, [pc, #716]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0x9ac>
 8001668:	4bb0      	ldr	r3, [pc, #704]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4aaf      	ldr	r2, [pc, #700]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	4bad      	ldr	r3, [pc, #692]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4aac      	ldr	r2, [pc, #688]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800167a:	f023 0304 	bic.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8081 	beq.w	8001794 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001692:	f7ff f8a7 	bl	80007e4 <HAL_GetTick>
 8001696:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff f8a2 	bl	80007e4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e345      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016bc:	2202      	movs	r2, #2
 80016be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016e0:	2202      	movs	r2, #2
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fa93 f2a3 	rbit	r2, r3
 80016f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016fa:	601a      	str	r2, [r3, #0]
  return result;
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001704:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	095b      	lsrs	r3, r3, #5
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d102      	bne.n	8001720 <HAL_RCC_OscConfig+0xa4c>
 800171a:	4b84      	ldr	r3, [pc, #528]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	e013      	b.n	8001748 <HAL_RCC_OscConfig+0xa74>
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001728:	2202      	movs	r2, #2
 800172a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	fa93 f2a3 	rbit	r2, r3
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	4b79      	ldr	r3, [pc, #484]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800174c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001750:	2102      	movs	r1, #2
 8001752:	6011      	str	r1, [r2, #0]
 8001754:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001758:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	fa92 f1a2 	rbit	r1, r2
 8001762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001766:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800176a:	6011      	str	r1, [r2, #0]
  return result;
 800176c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001770:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	fab2 f282 	clz	r2, r2
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f002 021f 	and.w	r2, r2, #31
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d084      	beq.n	800169c <HAL_RCC_OscConfig+0x9c8>
 8001792:	e07f      	b.n	8001894 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff f826 	bl	80007e4 <HAL_GetTick>
 8001798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	e00b      	b.n	80017b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff f821 	bl	80007e4 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e2c4      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017fc:	601a      	str	r2, [r3, #0]
  return result;
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001806:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d102      	bne.n	8001822 <HAL_RCC_OscConfig+0xb4e>
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	e013      	b.n	800184a <HAL_RCC_OscConfig+0xb76>
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800184e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001852:	2102      	movs	r1, #2
 8001854:	6011      	str	r1, [r2, #0]
 8001856:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800185a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	fa92 f1a2 	rbit	r1, r2
 8001864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001868:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800186c:	6011      	str	r1, [r2, #0]
  return result;
 800186e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001872:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	fab2 f282 	clz	r2, r2
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f002 021f 	and.w	r2, r2, #31
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d184      	bne.n	800179e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001894:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 80018a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8242 	beq.w	8001d3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	f000 8213 	beq.w	8001cee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	f040 8162 	bne.w	8001b9e <HAL_RCC_OscConfig+0xeca>
 80018da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018fe:	601a      	str	r2, [r3, #0]
  return result;
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001908:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001914:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	461a      	mov	r2, r3
 800191c:	2300      	movs	r3, #0
 800191e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7fe ff60 	bl	80007e4 <HAL_GetTick>
 8001924:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	e00c      	b.n	8001944 <HAL_RCC_OscConfig+0xc70>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7fe ff58 	bl	80007e4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1fd      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800194c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001968:	601a      	str	r2, [r3, #0]
  return result;
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001972:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d102      	bne.n	800198e <HAL_RCC_OscConfig+0xcba>
 8001988:	4bb0      	ldr	r3, [pc, #704]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	e027      	b.n	80019de <HAL_RCC_OscConfig+0xd0a>
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f2a3 	rbit	r2, r3
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	4b9c      	ldr	r3, [pc, #624]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ea:	6011      	str	r1, [r2, #0]
 80019ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	fa92 f1a2 	rbit	r1, r2
 80019fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a02:	6011      	str	r1, [r2, #0]
  return result;
 8001a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a08:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	fab2 f282 	clz	r2, r2
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f042 0220 	orr.w	r2, r2, #32
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	f002 021f 	and.w	r2, r2, #31
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f202 	lsl.w	r2, r1, r2
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d182      	bne.n	8001930 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	497f      	ldr	r1, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fa93 f2a3 	rbit	r2, r3
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a76:	601a      	str	r2, [r3, #0]
  return result;
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a80:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	461a      	mov	r2, r3
 8001a94:	2301      	movs	r3, #1
 8001a96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7fe fea4 	bl	80007e4 <HAL_GetTick>
 8001a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7fe fe9f 	bl	80007e4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e144      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ada:	601a      	str	r2, [r3, #0]
  return result;
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ae4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_OscConfig+0xe2c>
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e027      	b.n	8001b50 <HAL_RCC_OscConfig+0xe7c>
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b38:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b54:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b5c:	6011      	str	r1, [r2, #0]
 8001b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b62:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fa92 f1a2 	rbit	r1, r2
 8001b6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b70:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b74:	6011      	str	r1, [r2, #0]
  return result;
 8001b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b7a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	fab2 f282 	clz	r2, r2
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f042 0220 	orr.w	r2, r2, #32
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f002 021f 	and.w	r2, r2, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f202 	lsl.w	r2, r1, r2
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d082      	beq.n	8001aa2 <HAL_RCC_OscConfig+0xdce>
 8001b9c:	e0cf      	b.n	8001d3e <HAL_RCC_OscConfig+0x106a>
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bc2:	601a      	str	r2, [r3, #0]
  return result;
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bcc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	461a      	mov	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7fe fdfe 	bl	80007e4 <HAL_GetTick>
 8001be8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bec:	e009      	b.n	8001c02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bee:	f7fe fdf9 	bl	80007e4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e09e      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c26:	601a      	str	r2, [r3, #0]
  return result;
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d104      	bne.n	8001c50 <HAL_RCC_OscConfig+0xf7c>
 8001c46:	4b01      	ldr	r3, [pc, #4]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e029      	b.n	8001ca0 <HAL_RCC_OscConfig+0xfcc>
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_RCC_OscConfig+0x1078>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ca8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cac:	6011      	str	r1, [r2, #0]
 8001cae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fa92 f1a2 	rbit	r1, r2
 8001cbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cc4:	6011      	str	r1, [r2, #0]
  return result;
 8001cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	f002 021f 	and.w	r2, r2, #31
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d180      	bne.n	8001bee <HAL_RCC_OscConfig+0xf1a>
 8001cec:	e027      	b.n	8001d3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e01e      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x1078>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d10b      	bne.n	8001d3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b09e      	sub	sp, #120	; 0x78
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e162      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b90      	ldr	r3, [pc, #576]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b8d      	ldr	r3, [pc, #564]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	498b      	ldr	r1, [pc, #556]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b89      	ldr	r3, [pc, #548]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e14a      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	497f      	ldr	r1, [pc, #508]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80dc 	beq.w	8001f7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d13c      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xf6>
 8001dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xa6>
 8001df0:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	e00f      	b.n	8001e16 <HAL_RCC_ClockConfig+0xc6>
 8001df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	667b      	str	r3, [r7, #100]	; 0x64
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	663b      	str	r3, [r7, #96]	; 0x60
 8001e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e1e:	fa92 f2a2 	rbit	r2, r2
 8001e22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e26:	fab2 f282 	clz	r2, r2
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f042 0220 	orr.w	r2, r2, #32
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f002 021f 	and.w	r2, r2, #31
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d17b      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0f3      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d13c      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x178>
 8001e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x128>
 8001e72:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_ClockConfig+0x148>
 8001e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
 8001e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea0:	fa92 f2a2 	rbit	r2, r2
 8001ea4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f042 0220 	orr.w	r2, r2, #32
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f002 021f 	and.w	r2, r2, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d13a      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b2      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x1a0>
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	e00d      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1bc>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	61ba      	str	r2, [r7, #24]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	fa92 f2a2 	rbit	r2, r2
 8001f16:	617a      	str	r2, [r7, #20]
  return result;
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e079      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fc4a 	bl	80007e4 <HAL_GetTick>
 8001f50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7fe fc46 	bl	80007e4 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e061      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d214      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4906      	ldr	r1, [pc, #24]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e040      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	491a      	ldr	r1, [pc, #104]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4912      	ldr	r1, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ff2:	f000 f829 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002000:	22f0      	movs	r2, #240	; 0xf0
 8002002:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	60fa      	str	r2, [r7, #12]
  return result;
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	40d3      	lsrs	r3, r2
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x2ec>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	fa21 f303 	lsr.w	r3, r1, r3
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_RCC_ClockConfig+0x2f0>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_RCC_ClockConfig+0x2f4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa68 	bl	80004fc <HAL_InitTick>
  
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3778      	adds	r7, #120	; 0x78
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	08005e14 	.word	0x08005e14
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b08b      	sub	sp, #44	; 0x2c
 800204c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x30>
 8002072:	2b08      	cmp	r3, #8
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x36>
 8002076:	e03c      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <HAL_RCC_GetSysClockFreq+0xc4>)
 800207a:	623b      	str	r3, [r7, #32]
      break;
 800207c:	e03c      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002084:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002088:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	fa92 f2a2 	rbit	r2, r2
 8002090:	607a      	str	r2, [r7, #4]
  return result;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	40d3      	lsrs	r3, r2
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc8>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	220f      	movs	r2, #15
 80020ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	fa92 f2a2 	rbit	r2, r2
 80020b4:	60fa      	str	r2, [r7, #12]
  return result;
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	40d3      	lsrs	r3, r2
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	e004      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	623b      	str	r3, [r7, #32]
      break;
 80020f0:	e002      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f4:	623b      	str	r3, [r7, #32]
      break;
 80020f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	372c      	adds	r7, #44	; 0x2c
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	007a1200 	.word	0x007a1200
 8002110:	08005e2c 	.word	0x08005e2c
 8002114:	08005e3c 	.word	0x08005e3c
 8002118:	003d0900 	.word	0x003d0900

0800211c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_RCC_GetHCLKFreq+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800213a:	f7ff ffef 	bl	800211c <HAL_RCC_GetHCLKFreq>
 800213e:	4601      	mov	r1, r0
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002148:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800214c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	603a      	str	r2, [r7, #0]
  return result;
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	fab2 f282 	clz	r2, r2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	40d3      	lsrs	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	08005e24 	.word	0x08005e24

08002178 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	220f      	movs	r2, #15
 8002186:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_GetClockConfig+0x5c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_RCC_GetClockConfig+0x5c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_RCC_GetClockConfig+0x5c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_GetClockConfig+0x5c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_RCC_GetClockConfig+0x60>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0207 	and.w	r2, r3, #7
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e049      	b.n	8002282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f841 	bl	800228a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f000 f9e4 	bl	80025e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d001      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e040      	b.n	800233a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <HAL_TIM_Base_Start_IT+0xa8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00e      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x58>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d009      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x58>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_TIM_Base_Start_IT+0xac>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x58>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <HAL_TIM_Base_Start_IT+0xb0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d115      	bne.n	8002324 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_TIM_Base_Start_IT+0xb4>)
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b06      	cmp	r3, #6
 8002308:	d015      	beq.n	8002336 <HAL_TIM_Base_Start_IT+0x96>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002310:	d011      	beq.n	8002336 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002322:	e008      	b.n	8002336 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e000      	b.n	8002338 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40012c00 	.word	0x40012c00
 800234c:	40000400 	.word	0x40000400
 8002350:	40014000 	.word	0x40014000
 8002354:	00010007 	.word	0x00010007

08002358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d122      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d11b      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0202 	mvn.w	r2, #2
 8002384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f905 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8f7 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f908 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d122      	bne.n	8002408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d11b      	bne.n	8002408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0204 	mvn.w	r2, #4
 80023d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8db 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8cd 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f8de 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b08      	cmp	r3, #8
 8002414:	d122      	bne.n	800245c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b08      	cmp	r3, #8
 8002422:	d11b      	bne.n	800245c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0208 	mvn.w	r2, #8
 800242c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2204      	movs	r2, #4
 8002432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8b1 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8a3 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8b4 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b10      	cmp	r3, #16
 8002468:	d122      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b10      	cmp	r3, #16
 8002476:	d11b      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0210 	mvn.w	r2, #16
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2208      	movs	r2, #8
 8002486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f887 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f879 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f88a 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10e      	bne.n	80024dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d107      	bne.n	80024dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0201 	mvn.w	r2, #1
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fd ffd4 	bl	8000484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e6:	2b80      	cmp	r3, #128	; 0x80
 80024e8:	d10e      	bne.n	8002508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f4:	2b80      	cmp	r3, #128	; 0x80
 80024f6:	d107      	bne.n	8002508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8f2 	bl	80026ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002516:	d10e      	bne.n	8002536 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	2b80      	cmp	r3, #128	; 0x80
 8002524:	d107      	bne.n	8002536 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800252e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8e5 	bl	8002700 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	d10e      	bne.n	8002562 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b40      	cmp	r3, #64	; 0x40
 8002550:	d107      	bne.n	8002562 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f838 	bl	80025d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b20      	cmp	r3, #32
 800256e:	d10e      	bne.n	800258e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b20      	cmp	r3, #32
 800257c:	d107      	bne.n	800258e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0220 	mvn.w	r2, #32
 8002586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f8a5 	bl	80026d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a32      	ldr	r2, [pc, #200]	; (80026c4 <TIM_Base_SetConfig+0xdc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d007      	beq.n	8002610 <TIM_Base_SetConfig+0x28>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002606:	d003      	beq.n	8002610 <TIM_Base_SetConfig+0x28>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a2f      	ldr	r2, [pc, #188]	; (80026c8 <TIM_Base_SetConfig+0xe0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d108      	bne.n	8002622 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <TIM_Base_SetConfig+0xdc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <TIM_Base_SetConfig+0x6a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d00f      	beq.n	8002652 <TIM_Base_SetConfig+0x6a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <TIM_Base_SetConfig+0xe0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00b      	beq.n	8002652 <TIM_Base_SetConfig+0x6a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a23      	ldr	r2, [pc, #140]	; (80026cc <TIM_Base_SetConfig+0xe4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <TIM_Base_SetConfig+0x6a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <TIM_Base_SetConfig+0xe8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_Base_SetConfig+0x6a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <TIM_Base_SetConfig+0xec>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d108      	bne.n	8002664 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <TIM_Base_SetConfig+0xdc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00b      	beq.n	80026a8 <TIM_Base_SetConfig+0xc0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <TIM_Base_SetConfig+0xe4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d007      	beq.n	80026a8 <TIM_Base_SetConfig+0xc0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <TIM_Base_SetConfig+0xe8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d003      	beq.n	80026a8 <TIM_Base_SetConfig+0xc0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <TIM_Base_SetConfig+0xec>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d103      	bne.n	80026b0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	615a      	str	r2, [r3, #20]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40014000 	.word	0x40014000
 80026d0:	40014400 	.word	0x40014400
 80026d4:	40014800 	.word	0x40014800

080026d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f103 0208 	add.w	r2, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f103 0208 	add.w	r2, r3, #8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f103 0208 	add.w	r2, r3, #8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	601a      	str	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d103      	bne.n	80027d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	e00c      	b.n	80027f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3308      	adds	r3, #8
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e002      	b.n	80027e4 <vListInsert+0x2e>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d2f6      	bcs.n	80027de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6892      	ldr	r2, [r2, #8]
 800283e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6852      	ldr	r2, [r2, #4]
 8002848:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	d103      	bne.n	800285c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	1e5a      	subs	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80028a2:	bf00      	nop
 80028a4:	e7fe      	b.n	80028a4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80028a6:	f002 f9ff 	bl	8004ca8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	68f9      	ldr	r1, [r7, #12]
 80028b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	441a      	add	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	3b01      	subs	r3, #1
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	441a      	add	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	22ff      	movs	r2, #255	; 0xff
 80028ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	22ff      	movs	r2, #255	; 0xff
 80028f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d114      	bne.n	8002926 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01a      	beq.n	800293a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3310      	adds	r3, #16
 8002908:	4618      	mov	r0, r3
 800290a:	f001 f9d7 	bl	8003cbc <xTaskRemoveFromEventList>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d012      	beq.n	800293a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <xQueueGenericReset+0xcc>)
 8002916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	e009      	b.n	800293a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3310      	adds	r3, #16
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fef2 	bl	8002714 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff feed 	bl	8002714 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800293a:	f002 f9e5 	bl	8004d08 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	e000ed04 	.word	0xe000ed04

0800294c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	; 0x30
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	61bb      	str	r3, [r7, #24]
    }
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <xQueueGenericCreate+0x48>
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d101      	bne.n	8002998 <xQueueGenericCreate+0x4c>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <xQueueGenericCreate+0x4e>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <xQueueGenericCreate+0x68>
        __asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	617b      	str	r3, [r7, #20]
    }
 80029b0:	bf00      	nop
 80029b2:	e7fe      	b.n	80029b2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80029ba:	d90a      	bls.n	80029d2 <xQueueGenericCreate+0x86>
        __asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	613b      	str	r3, [r7, #16]
    }
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	3350      	adds	r3, #80	; 0x50
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 fa88 	bl	8004eec <pvPortMalloc>
 80029dc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	3350      	adds	r3, #80	; 0x50
 80029ec:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029ee:	79fa      	ldrb	r2, [r7, #7]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f805 	bl	8002a0a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002a00:	6a3b      	ldr	r3, [r7, #32]
    }
 8002a02:	4618      	mov	r0, r3
 8002a04:	3728      	adds	r7, #40	; 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e002      	b.n	8002a2c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a38:	2101      	movs	r1, #1
 8002a3a:	69b8      	ldr	r0, [r7, #24]
 8002a3c:	f7ff ff1e 	bl	800287c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00e      	beq.n	8002a7c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a70:	2300      	movs	r3, #0
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f81c 	bl	8002ab4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6939      	ldr	r1, [r7, #16]
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f7ff ff55 	bl	800294c <xQueueGenericCreate>
 8002aa2:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff ffd3 	bl	8002a50 <prvInitialiseMutex>

        return xNewQueue;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
    }
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08e      	sub	sp, #56	; 0x38
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <xQueueGenericSend+0x32>
        __asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <xQueueGenericSend+0x40>
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <xQueueGenericSend+0x44>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <xQueueGenericSend+0x46>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <xQueueGenericSend+0x60>
        __asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d103      	bne.n	8002b22 <xQueueGenericSend+0x6e>
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <xQueueGenericSend+0x72>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <xQueueGenericSend+0x74>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <xQueueGenericSend+0x8e>
        __asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	623b      	str	r3, [r7, #32]
    }
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b42:	f001 fa57 	bl	8003ff4 <xTaskGetSchedulerState>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <xQueueGenericSend+0x9e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <xQueueGenericSend+0xa2>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <xQueueGenericSend+0xa4>
 8002b56:	2300      	movs	r3, #0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <xQueueGenericSend+0xbe>
        __asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	61fb      	str	r3, [r7, #28]
    }
 8002b6e:	bf00      	nop
 8002b70:	e7fe      	b.n	8002b70 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b72:	f002 f899 	bl	8004ca8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <xQueueGenericSend+0xd4>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d129      	bne.n	8002bdc <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b8e:	f000 fb3d 	bl	800320c <prvCopyDataToQueue>
 8002b92:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d010      	beq.n	8002bbe <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	3324      	adds	r3, #36	; 0x24
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f88b 	bl	8003cbc <xTaskRemoveFromEventList>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002bac:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <xQueueGenericSend+0x1f8>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	e00a      	b.n	8002bd4 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <xQueueGenericSend+0x1f8>)
 8002bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002bd4:	f002 f898 	bl	8004d08 <vPortExitCritical>
                return pdPASS;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e063      	b.n	8002ca4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002be2:	f002 f891 	bl	8004d08 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e05c      	b.n	8002ca4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 f8c3 	bl	8003d80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bfe:	f002 f883 	bl	8004d08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c02:	f000 fe3d 	bl	8003880 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c06:	f002 f84f 	bl	8004ca8 <vPortEnterCritical>
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d103      	bne.n	8002c20 <xQueueGenericSend+0x16c>
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c26:	b25b      	sxtb	r3, r3
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d103      	bne.n	8002c36 <xQueueGenericSend+0x182>
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c36:	f002 f867 	bl	8004d08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c3a:	1d3a      	adds	r2, r7, #4
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 f8b2 	bl	8003dac <xTaskCheckForTimeOut>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d124      	bne.n	8002c98 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c50:	f000 fbd4 	bl	80033fc <prvIsQueueFull>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d018      	beq.n	8002c8c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	3310      	adds	r3, #16
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 ffda 	bl	8003c1c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c6a:	f000 fb5f 	bl	800332c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002c6e:	f000 fe15 	bl	800389c <xTaskResumeAll>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f47f af7c 	bne.w	8002b72 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <xQueueGenericSend+0x1f8>)
 8002c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	e772      	b.n	8002b72 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c8e:	f000 fb4d 	bl	800332c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c92:	f000 fe03 	bl	800389c <xTaskResumeAll>
 8002c96:	e76c      	b.n	8002b72 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c9a:	f000 fb47 	bl	800332c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c9e:	f000 fdfd 	bl	800389c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002ca2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3738      	adds	r7, #56	; 0x38
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	e000ed04 	.word	0xe000ed04

08002cb0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b090      	sub	sp, #64	; 0x40
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <xQueueGenericSendFromISR+0x3c>
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <xQueueGenericSendFromISR+0x40>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <xQueueGenericSendFromISR+0x42>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002d08:	bf00      	nop
 8002d0a:	e7fe      	b.n	8002d0a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d103      	bne.n	8002d1a <xQueueGenericSendFromISR+0x6a>
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <xQueueGenericSendFromISR+0x6e>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <xQueueGenericSendFromISR+0x70>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	623b      	str	r3, [r7, #32]
    }
 8002d36:	bf00      	nop
 8002d38:	e7fe      	b.n	8002d38 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d3a:	f002 f897 	bl	8004e6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002d3e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	61fa      	str	r2, [r7, #28]
 8002d54:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002d56:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <xQueueGenericSendFromISR+0xbc>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d13e      	bne.n	8002dea <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d82:	f000 fa43 	bl	800320c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002d86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8e:	d112      	bne.n	8002db6 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d025      	beq.n	8002de4 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	3324      	adds	r3, #36	; 0x24
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 ff8d 	bl	8003cbc <xTaskRemoveFromEventList>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01d      	beq.n	8002de4 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01a      	beq.n	8002de4 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e016      	b.n	8002de4 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002db6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002dba:	2b7f      	cmp	r3, #127	; 0x7f
 8002dbc:	d10a      	bne.n	8002dd4 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	617b      	str	r3, [r7, #20]
    }
 8002dd0:	bf00      	nop
 8002dd2:	e7fe      	b.n	8002dd2 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	b25a      	sxtb	r2, r3
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002de4:	2301      	movs	r3, #1
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002de8:	e001      	b.n	8002dee <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002df8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3740      	adds	r7, #64	; 0x40
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10a      	bne.n	8002e34 <xQueueReceive+0x30>
        __asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	623b      	str	r3, [r7, #32]
    }
 8002e30:	bf00      	nop
 8002e32:	e7fe      	b.n	8002e32 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <xQueueReceive+0x3e>
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <xQueueReceive+0x42>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <xQueueReceive+0x44>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <xQueueReceive+0x5e>
        __asm volatile
 8002e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	61fb      	str	r3, [r7, #28]
    }
 8002e5e:	bf00      	nop
 8002e60:	e7fe      	b.n	8002e60 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e62:	f001 f8c7 	bl	8003ff4 <xTaskGetSchedulerState>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d102      	bne.n	8002e72 <xQueueReceive+0x6e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <xQueueReceive+0x72>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <xQueueReceive+0x74>
 8002e76:	2300      	movs	r3, #0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <xQueueReceive+0x8e>
        __asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	61bb      	str	r3, [r7, #24]
    }
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e92:	f001 ff09 	bl	8004ca8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01f      	beq.n	8002ee2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea6:	f000 fa1b 	bl	80032e0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	1e5a      	subs	r2, r3, #1
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00f      	beq.n	8002eda <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	3310      	adds	r3, #16
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fefc 	bl	8003cbc <xTaskRemoveFromEventList>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002eca:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <xQueueReceive+0x1bc>)
 8002ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002eda:	f001 ff15 	bl	8004d08 <vPortExitCritical>
                return pdPASS;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e069      	b.n	8002fb6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d103      	bne.n	8002ef0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ee8:	f001 ff0e 	bl	8004d08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e062      	b.n	8002fb6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ef6:	f107 0310 	add.w	r3, r7, #16
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 ff40 	bl	8003d80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002f04:	f001 ff00 	bl	8004d08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002f08:	f000 fcba 	bl	8003880 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002f0c:	f001 fecc 	bl	8004ca8 <vPortEnterCritical>
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f16:	b25b      	sxtb	r3, r3
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d103      	bne.n	8002f26 <xQueueReceive+0x122>
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d103      	bne.n	8002f3c <xQueueReceive+0x138>
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f3c:	f001 fee4 	bl	8004d08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f40:	1d3a      	adds	r2, r7, #4
 8002f42:	f107 0310 	add.w	r3, r7, #16
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 ff2f 	bl	8003dac <xTaskCheckForTimeOut>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d123      	bne.n	8002f9c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f56:	f000 fa3b 	bl	80033d0 <prvIsQueueEmpty>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d017      	beq.n	8002f90 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fe57 	bl	8003c1c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f70:	f000 f9dc 	bl	800332c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002f74:	f000 fc92 	bl	800389c <xTaskResumeAll>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d189      	bne.n	8002e92 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <xQueueReceive+0x1bc>)
 8002f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	e780      	b.n	8002e92 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f92:	f000 f9cb 	bl	800332c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f96:	f000 fc81 	bl	800389c <xTaskResumeAll>
 8002f9a:	e77a      	b.n	8002e92 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9e:	f000 f9c5 	bl	800332c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002fa2:	f000 fc7b 	bl	800389c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa8:	f000 fa12 	bl	80033d0 <prvIsQueueEmpty>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f43f af6f 	beq.w	8002e92 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002fb4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3730      	adds	r7, #48	; 0x30
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	e000ed04 	.word	0xe000ed04

08002fc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08e      	sub	sp, #56	; 0x38
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	623b      	str	r3, [r7, #32]
    }
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	61fb      	str	r3, [r7, #28]
    }
 8003010:	bf00      	nop
 8003012:	e7fe      	b.n	8003012 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003014:	f000 ffee 	bl	8003ff4 <xTaskGetSchedulerState>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <xQueueSemaphoreTake+0x60>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <xQueueSemaphoreTake+0x64>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <xQueueSemaphoreTake+0x66>
 8003028:	2300      	movs	r3, #0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	61bb      	str	r3, [r7, #24]
    }
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003044:	f001 fe30 	bl	8004ca8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d024      	beq.n	800309e <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	1e5a      	subs	r2, r3, #1
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003064:	f001 f962 	bl	800432c <pvTaskIncrementMutexHeldCount>
 8003068:	4602      	mov	r2, r0
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00f      	beq.n	8003096 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	3310      	adds	r3, #16
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fe1e 	bl	8003cbc <xTaskRemoveFromEventList>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003086:	4b54      	ldr	r3, [pc, #336]	; (80031d8 <xQueueSemaphoreTake+0x214>)
 8003088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003096:	f001 fe37 	bl	8004d08 <vPortExitCritical>
                return pdPASS;
 800309a:	2301      	movs	r3, #1
 800309c:	e097      	b.n	80031ce <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d111      	bne.n	80030c8 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	617b      	str	r3, [r7, #20]
    }
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80030c0:	f001 fe22 	bl	8004d08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e082      	b.n	80031ce <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80030ce:	f107 030c 	add.w	r3, r7, #12
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fe54 	bl	8003d80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80030d8:	2301      	movs	r3, #1
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030dc:	f001 fe14 	bl	8004d08 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80030e0:	f000 fbce 	bl	8003880 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030e4:	f001 fde0 	bl	8004ca8 <vPortEnterCritical>
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d103      	bne.n	80030fe <xQueueSemaphoreTake+0x13a>
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003104:	b25b      	sxtb	r3, r3
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d103      	bne.n	8003114 <xQueueSemaphoreTake+0x150>
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003114:	f001 fdf8 	bl	8004d08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003118:	463a      	mov	r2, r7
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fe43 	bl	8003dac <xTaskCheckForTimeOut>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d132      	bne.n	8003192 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800312c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800312e:	f000 f94f 	bl	80033d0 <prvIsQueueEmpty>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d026      	beq.n	8003186 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003140:	f001 fdb2 	bl	8004ca8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 ff71 	bl	8004030 <xTaskPriorityInherit>
 800314e:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003150:	f001 fdda 	bl	8004d08 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	3324      	adds	r3, #36	; 0x24
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fd5d 	bl	8003c1c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003164:	f000 f8e2 	bl	800332c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003168:	f000 fb98 	bl	800389c <xTaskResumeAll>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	f47f af68 	bne.w	8003044 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003174:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <xQueueSemaphoreTake+0x214>)
 8003176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	e75e      	b.n	8003044 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003188:	f000 f8d0 	bl	800332c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800318c:	f000 fb86 	bl	800389c <xTaskResumeAll>
 8003190:	e758      	b.n	8003044 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003194:	f000 f8ca 	bl	800332c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003198:	f000 fb80 	bl	800389c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800319c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800319e:	f000 f917 	bl	80033d0 <prvIsQueueEmpty>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f43f af4d 	beq.w	8003044 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 80031b0:	f001 fd7a 	bl	8004ca8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031b6:	f000 f811 	bl	80031dc <prvGetDisinheritPriorityAfterTimeout>
 80031ba:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f824 	bl	8004210 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80031c8:	f001 fd9e 	bl	8004d08 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80031cc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3738      	adds	r7, #56	; 0x38
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1c3 0307 	rsb	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e001      	b.n	80031fe <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80031fe:	68fb      	ldr	r3, [r7, #12]
    }
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10d      	bne.n	8003246 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d14d      	bne.n	80032ce <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 ff70 	bl	800411c <xTaskPriorityDisinherit>
 800323c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	e043      	b.n	80032ce <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d119      	bne.n	8003280 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6858      	ldr	r0, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	461a      	mov	r2, r3
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	f002 f86a 	bl	8005330 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	441a      	add	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	d32b      	bcc.n	80032ce <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	e026      	b.n	80032ce <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68d8      	ldr	r0, [r3, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	461a      	mov	r2, r3
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	f002 f850 	bl	8005330 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	425b      	negs	r3, r3
 800329a:	441a      	add	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d207      	bcs.n	80032bc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	425b      	negs	r3, r3
 80032b6:	441a      	add	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d105      	bne.n	80032ce <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80032d6:	697b      	ldr	r3, [r7, #20]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d018      	beq.n	8003324 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	441a      	add	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	d303      	bcc.n	8003314 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68d9      	ldr	r1, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	461a      	mov	r2, r3
 800331e:	6838      	ldr	r0, [r7, #0]
 8003320:	f002 f806 	bl	8005330 <memcpy>
    }
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003334:	f001 fcb8 	bl	8004ca8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800333e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003340:	e011      	b.n	8003366 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d012      	beq.n	8003370 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3324      	adds	r3, #36	; 0x24
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fcb4 	bl	8003cbc <xTaskRemoveFromEventList>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800335a:	f000 fd8d 	bl	8003e78 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	3b01      	subs	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	dce9      	bgt.n	8003342 <prvUnlockQueue+0x16>
 800336e:	e000      	b.n	8003372 <prvUnlockQueue+0x46>
                        break;
 8003370:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800337a:	f001 fcc5 	bl	8004d08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800337e:	f001 fc93 	bl	8004ca8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003388:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800338a:	e011      	b.n	80033b0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d012      	beq.n	80033ba <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3310      	adds	r3, #16
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fc8f 	bl	8003cbc <xTaskRemoveFromEventList>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80033a4:	f000 fd68 	bl	8003e78 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80033a8:	7bbb      	ldrb	r3, [r7, #14]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80033b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	dce9      	bgt.n	800338c <prvUnlockQueue+0x60>
 80033b8:	e000      	b.n	80033bc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80033ba:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	22ff      	movs	r2, #255	; 0xff
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80033c4:	f001 fca0 	bl	8004d08 <vPortExitCritical>
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80033d8:	f001 fc66 	bl	8004ca8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e001      	b.n	80033ee <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80033ee:	f001 fc8b 	bl	8004d08 <vPortExitCritical>

    return xReturn;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003404:	f001 fc50 	bl	8004ca8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	429a      	cmp	r2, r3
 8003412:	d102      	bne.n	800341a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e001      	b.n	800341e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800341e:	f001 fc73 	bl	8004d08 <vPortExitCritical>

    return xReturn;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e014      	b.n	8003466 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <vQueueAddToRegistry+0x50>)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003448:	490c      	ldr	r1, [pc, #48]	; (800347c <vQueueAddToRegistry+0x50>)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <vQueueAddToRegistry+0x50>)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800345e:	e006      	b.n	800346e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b07      	cmp	r3, #7
 800346a:	d9e7      	bls.n	800343c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	200000ec 	.word	0x200000ec

08003480 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003490:	f001 fc0a 	bl	8004ca8 <vPortEnterCritical>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800349a:	b25b      	sxtb	r3, r3
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d103      	bne.n	80034aa <vQueueWaitForMessageRestricted+0x2a>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d103      	bne.n	80034c0 <vQueueWaitForMessageRestricted+0x40>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c0:	f001 fc22 	bl	8004d08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d106      	bne.n	80034da <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fbc5 	bl	8003c64 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80034da:	6978      	ldr	r0, [r7, #20]
 80034dc:	f7ff ff26 	bl	800332c <prvUnlockQueue>
    }
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	; 0x30
 80034ec:	af04      	add	r7, sp, #16
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fcf5 	bl	8004eec <pvPortMalloc>
 8003502:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00e      	beq.n	8003528 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800350a:	2058      	movs	r0, #88	; 0x58
 800350c:	f001 fcee 	bl	8004eec <pvPortMalloc>
 8003510:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
 800351e:	e005      	b.n	800352c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f001 fdc3 	bl	80050ac <vPortFree>
 8003526:	e001      	b.n	800352c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d013      	beq.n	800355a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	2300      	movs	r3, #0
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	9302      	str	r3, [sp, #8]
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f80e 	bl	800356a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800354e:	69f8      	ldr	r0, [r7, #28]
 8003550:	f000 f8a2 	bl	8003698 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003554:	2301      	movs	r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e002      	b.n	8003560 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003560:	69bb      	ldr	r3, [r7, #24]
    }
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b088      	sub	sp, #32
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	461a      	mov	r2, r3
 8003582:	21a5      	movs	r1, #165	; 0xa5
 8003584:	f001 fee2 	bl	800534c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003592:	3b01      	subs	r3, #1
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f023 0307 	bic.w	r3, r3, #7
 80035a0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	617b      	str	r3, [r7, #20]
    }
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01f      	beq.n	8003608 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	e012      	b.n	80035f4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	7819      	ldrb	r1, [r3, #0]
 80035d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	3334      	adds	r3, #52	; 0x34
 80035de:	460a      	mov	r2, r1
 80035e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d006      	beq.n	80035fc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b09      	cmp	r3, #9
 80035f8:	d9e9      	bls.n	80035ce <prvInitialiseNewTask+0x64>
 80035fa:	e000      	b.n	80035fe <prvInitialiseNewTask+0x94>
            {
                break;
 80035fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003606:	e003      	b.n	8003610 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	2b06      	cmp	r3, #6
 8003614:	d901      	bls.n	800361a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003616:	2306      	movs	r3, #6
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003624:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	2200      	movs	r2, #0
 800362a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f88f 	bl	8002754 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	3318      	adds	r3, #24
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff f88a 	bl	8002754 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003644:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	f1c3 0207 	rsb	r2, r3, #7
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003654:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	3350      	adds	r3, #80	; 0x50
 800365a:	2204      	movs	r2, #4
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f001 fe74 	bl	800534c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	3354      	adds	r3, #84	; 0x54
 8003668:	2201      	movs	r2, #1
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fe6d 	bl	800534c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	69b8      	ldr	r0, [r7, #24]
 8003678:	f001 f9e4 	bl	8004a44 <pxPortInitialiseStack>
 800367c:	4602      	mov	r2, r0
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800368e:	bf00      	nop
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80036a0:	f001 fb02 	bl	8004ca8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <prvAddNewTaskToReadyList+0xc0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	4a2b      	ldr	r2, [pc, #172]	; (8003758 <prvAddNewTaskToReadyList+0xc0>)
 80036ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80036b6:	4a29      	ldr	r2, [pc, #164]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036bc:	4b26      	ldr	r3, [pc, #152]	; (8003758 <prvAddNewTaskToReadyList+0xc0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d110      	bne.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80036c4:	f000 fbfc 	bl	8003ec0 <prvInitialiseTaskLists>
 80036c8:	e00d      	b.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80036ca:	4b25      	ldr	r3, [pc, #148]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d802      	bhi.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80036e6:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <prvAddNewTaskToReadyList+0xcc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <prvAddNewTaskToReadyList+0xcc>)
 80036ee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036f0:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <prvAddNewTaskToReadyList+0xcc>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	4b19      	ldr	r3, [pc, #100]	; (8003768 <prvAddNewTaskToReadyList+0xd0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <prvAddNewTaskToReadyList+0xd0>)
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4a15      	ldr	r2, [pc, #84]	; (800376c <prvAddNewTaskToReadyList+0xd4>)
 8003718:	441a      	add	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f7ff f824 	bl	800276e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003726:	f001 faef 	bl	8004d08 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00e      	beq.n	8003750 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	429a      	cmp	r2, r3
 800373e:	d207      	bcs.n	8003750 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <prvAddNewTaskToReadyList+0xd8>)
 8003742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	2000022c 	.word	0x2000022c
 800375c:	2000012c 	.word	0x2000012c
 8003760:	20000238 	.word	0x20000238
 8003764:	20000248 	.word	0x20000248
 8003768:	20000234 	.word	0x20000234
 800376c:	20000130 	.word	0x20000130
 8003770:	e000ed04 	.word	0xe000ed04

08003774 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d017      	beq.n	80037b6 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <vTaskDelay+0x60>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <vTaskDelay+0x30>
        __asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	60bb      	str	r3, [r7, #8]
    }
 80037a0:	bf00      	nop
 80037a2:	e7fe      	b.n	80037a2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80037a4:	f000 f86c 	bl	8003880 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037a8:	2100      	movs	r1, #0
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fdd2 	bl	8004354 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80037b0:	f000 f874 	bl	800389c <xTaskResumeAll>
 80037b4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <vTaskDelay+0x64>)
 80037be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000254 	.word	0x20000254
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <vTaskStartScheduler+0x88>)
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	2300      	movs	r3, #0
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	2287      	movs	r2, #135	; 0x87
 80037ee:	491e      	ldr	r1, [pc, #120]	; (8003868 <vTaskStartScheduler+0x8c>)
 80037f0:	481e      	ldr	r0, [pc, #120]	; (800386c <vTaskStartScheduler+0x90>)
 80037f2:	f7ff fe79 	bl	80034e8 <xTaskCreate>
 80037f6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80037fe:	f000 fe0f 	bl	8004420 <xTimerCreateTimerTask>
 8003802:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d116      	bne.n	8003838 <vTaskStartScheduler+0x5c>
        __asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	60bb      	str	r3, [r7, #8]
    }
 800381c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800381e:	4b14      	ldr	r3, [pc, #80]	; (8003870 <vTaskStartScheduler+0x94>)
 8003820:	f04f 32ff 	mov.w	r2, #4294967295
 8003824:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <vTaskStartScheduler+0x98>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <vTaskStartScheduler+0x9c>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003832:	f001 f997 	bl	8004b64 <xPortStartScheduler>
 8003836:	e00e      	b.n	8003856 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d10a      	bne.n	8003856 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	607b      	str	r3, [r7, #4]
    }
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <vTaskStartScheduler+0xa0>)
 8003858:	681b      	ldr	r3, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000250 	.word	0x20000250
 8003868:	08005dfc 	.word	0x08005dfc
 800386c:	08003e91 	.word	0x08003e91
 8003870:	2000024c 	.word	0x2000024c
 8003874:	20000238 	.word	0x20000238
 8003878:	20000230 	.word	0x20000230
 800387c:	2000000c 	.word	0x2000000c

08003880 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <vTaskSuspendAll+0x18>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	4a03      	ldr	r2, [pc, #12]	; (8003898 <vTaskSuspendAll+0x18>)
 800388c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000254 	.word	0x20000254

0800389c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80038aa:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <xTaskResumeAll+0x114>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	603b      	str	r3, [r7, #0]
    }
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80038c8:	f001 f9ee 	bl	8004ca8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80038cc:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <xTaskResumeAll+0x114>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	4a37      	ldr	r2, [pc, #220]	; (80039b0 <xTaskResumeAll+0x114>)
 80038d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d6:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <xTaskResumeAll+0x114>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d161      	bne.n	80039a2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038de:	4b35      	ldr	r3, [pc, #212]	; (80039b4 <xTaskResumeAll+0x118>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d05d      	beq.n	80039a2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038e6:	e02e      	b.n	8003946 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e8:	4b33      	ldr	r3, [pc, #204]	; (80039b8 <xTaskResumeAll+0x11c>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3318      	adds	r3, #24
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe ff97 	bl	8002828 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe ff92 	bl	8002828 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	2201      	movs	r2, #1
 800390a:	409a      	lsls	r2, r3
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <xTaskResumeAll+0x120>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4313      	orrs	r3, r2
 8003912:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <xTaskResumeAll+0x120>)
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <xTaskResumeAll+0x124>)
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3304      	adds	r3, #4
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7fe ff1e 	bl	800276e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003936:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <xTaskResumeAll+0x128>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <xTaskResumeAll+0x12c>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <xTaskResumeAll+0x11c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1cc      	bne.n	80038e8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003954:	f000 fb32 	bl	8003fbc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003958:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <xTaskResumeAll+0x130>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d010      	beq.n	8003986 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003964:	f000 f846 	bl	80039f4 <xTaskIncrementTick>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <xTaskResumeAll+0x12c>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f1      	bne.n	8003964 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <xTaskResumeAll+0x130>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <xTaskResumeAll+0x12c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800398e:	2301      	movs	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <xTaskResumeAll+0x134>)
 8003994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80039a2:	f001 f9b1 	bl	8004d08 <vPortExitCritical>

    return xAlreadyYielded;
 80039a6:	68bb      	ldr	r3, [r7, #8]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000254 	.word	0x20000254
 80039b4:	2000022c 	.word	0x2000022c
 80039b8:	200001ec 	.word	0x200001ec
 80039bc:	20000234 	.word	0x20000234
 80039c0:	20000130 	.word	0x20000130
 80039c4:	2000012c 	.word	0x2000012c
 80039c8:	20000240 	.word	0x20000240
 80039cc:	2000023c 	.word	0x2000023c
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <xTaskGetTickCount+0x1c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80039e0:	687b      	ldr	r3, [r7, #4]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000230 	.word	0x20000230

080039f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fe:	4b4e      	ldr	r3, [pc, #312]	; (8003b38 <xTaskIncrementTick+0x144>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 808e 	bne.w	8003b24 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <xTaskIncrementTick+0x148>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a10:	4a4a      	ldr	r2, [pc, #296]	; (8003b3c <xTaskIncrementTick+0x148>)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d120      	bne.n	8003a5e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003a1c:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <xTaskIncrementTick+0x48>
        __asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	603b      	str	r3, [r7, #0]
    }
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xTaskIncrementTick+0x46>
 8003a3c:	4b40      	ldr	r3, [pc, #256]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	4b40      	ldr	r3, [pc, #256]	; (8003b44 <xTaskIncrementTick+0x150>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a3e      	ldr	r2, [pc, #248]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4a3e      	ldr	r2, [pc, #248]	; (8003b44 <xTaskIncrementTick+0x150>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b3d      	ldr	r3, [pc, #244]	; (8003b48 <xTaskIncrementTick+0x154>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <xTaskIncrementTick+0x154>)
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	f000 faaf 	bl	8003fbc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d348      	bcc.n	8003afa <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a68:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	601a      	str	r2, [r3, #0]
                    break;
 8003a7a:	e03e      	b.n	8003afa <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7c:	4b30      	ldr	r3, [pc, #192]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d203      	bcs.n	8003a9c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003a94:	4a2d      	ldr	r2, [pc, #180]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a9a:	e02e      	b.n	8003afa <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fec1 	bl	8002828 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe feb8 	bl	8002828 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	2201      	movs	r2, #1
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <xTaskIncrementTick+0x15c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <xTaskIncrementTick+0x15c>)
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <xTaskIncrementTick+0x160>)
 8003ad8:	441a      	add	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f7fe fe44 	bl	800276e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aea:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <xTaskIncrementTick+0x164>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d3b9      	bcc.n	8003a68 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003af8:	e7b6      	b.n	8003a68 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003afa:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <xTaskIncrementTick+0x164>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	4914      	ldr	r1, [pc, #80]	; (8003b54 <xTaskIncrementTick+0x160>)
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d901      	bls.n	8003b16 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <xTaskIncrementTick+0x168>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e004      	b.n	8003b2e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b24:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <xTaskIncrementTick+0x16c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <xTaskIncrementTick+0x16c>)
 8003b2c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003b2e:	697b      	ldr	r3, [r7, #20]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000254 	.word	0x20000254
 8003b3c:	20000230 	.word	0x20000230
 8003b40:	200001e4 	.word	0x200001e4
 8003b44:	200001e8 	.word	0x200001e8
 8003b48:	20000244 	.word	0x20000244
 8003b4c:	2000024c 	.word	0x2000024c
 8003b50:	20000234 	.word	0x20000234
 8003b54:	20000130 	.word	0x20000130
 8003b58:	2000012c 	.word	0x2000012c
 8003b5c:	20000240 	.word	0x20000240
 8003b60:	2000023c 	.word	0x2000023c

08003b64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b6a:	4b27      	ldr	r3, [pc, #156]	; (8003c08 <vTaskSwitchContext+0xa4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003b72:	4b26      	ldr	r3, [pc, #152]	; (8003c0c <vTaskSwitchContext+0xa8>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003b78:	e03f      	b.n	8003bfa <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003b7a:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <vTaskSwitchContext+0xa8>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b80:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <vTaskSwitchContext+0xac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	fab3 f383 	clz	r3, r3
 8003b8c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	f1c3 031f 	rsb	r3, r3, #31
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	491f      	ldr	r1, [pc, #124]	; (8003c14 <vTaskSwitchContext+0xb0>)
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	607b      	str	r3, [r7, #4]
    }
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <vTaskSwitchContext+0x5a>
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <vTaskSwitchContext+0xb0>)
 8003bcc:	4413      	add	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	3308      	adds	r3, #8
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d104      	bne.n	8003bf0 <vTaskSwitchContext+0x8c>
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <vTaskSwitchContext+0xb4>)
 8003bf8:	6013      	str	r3, [r2, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000254 	.word	0x20000254
 8003c0c:	20000240 	.word	0x20000240
 8003c10:	20000234 	.word	0x20000234
 8003c14:	20000130 	.word	0x20000130
 8003c18:	2000012c 	.word	0x2000012c

08003c1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	60fb      	str	r3, [r7, #12]
    }
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c42:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <vTaskPlaceOnEventList+0x44>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3318      	adds	r3, #24
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fe fdb3 	bl	80027b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c50:	2101      	movs	r1, #1
 8003c52:	6838      	ldr	r0, [r7, #0]
 8003c54:	f000 fb7e 	bl	8004354 <prvAddCurrentTaskToDelayedList>
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	2000012c 	.word	0x2000012c

08003c64 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	617b      	str	r3, [r7, #20]
    }
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3318      	adds	r3, #24
 8003c92:	4619      	mov	r1, r3
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7fe fd6a 	bl	800276e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	68b8      	ldr	r0, [r7, #8]
 8003caa:	f000 fb53 	bl	8004354 <prvAddCurrentTaskToDelayedList>
    }
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2000012c 	.word	0x2000012c

08003cbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60fb      	str	r3, [r7, #12]
    }
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	3318      	adds	r3, #24
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fd9b 	bl	8002828 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <xTaskRemoveFromEventList+0xac>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11c      	bne.n	8003d34 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fd92 	bl	8002828 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	2201      	movs	r2, #1
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <xTaskRemoveFromEventList+0xb0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <xTaskRemoveFromEventList+0xb0>)
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <xTaskRemoveFromEventList+0xb4>)
 8003d24:	441a      	add	r2, r3
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fd1e 	bl	800276e <vListInsertEnd>
 8003d32:	e005      	b.n	8003d40 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3318      	adds	r3, #24
 8003d38:	4619      	mov	r1, r3
 8003d3a:	480e      	ldr	r0, [pc, #56]	; (8003d74 <xTaskRemoveFromEventList+0xb8>)
 8003d3c:	f7fe fd17 	bl	800276e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <xTaskRemoveFromEventList+0xbc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d905      	bls.n	8003d5a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <xTaskRemoveFromEventList+0xc0>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e001      	b.n	8003d5e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003d5e:	697b      	ldr	r3, [r7, #20]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000254 	.word	0x20000254
 8003d6c:	20000234 	.word	0x20000234
 8003d70:	20000130 	.word	0x20000130
 8003d74:	200001ec 	.word	0x200001ec
 8003d78:	2000012c 	.word	0x2000012c
 8003d7c:	20000240 	.word	0x20000240

08003d80 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <vTaskInternalSetTimeOutState+0x24>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <vTaskInternalSetTimeOutState+0x28>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	605a      	str	r2, [r3, #4]
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	20000244 	.word	0x20000244
 8003da8:	20000230 	.word	0x20000230

08003dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	613b      	str	r3, [r7, #16]
    }
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60fb      	str	r3, [r7, #12]
    }
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003dee:	f000 ff5b 	bl	8004ca8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003df2:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <xTaskCheckForTimeOut+0xc4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d102      	bne.n	8003e12 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	e026      	b.n	8003e60 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <xTaskCheckForTimeOut+0xc8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d00a      	beq.n	8003e34 <xTaskCheckForTimeOut+0x88>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d305      	bcc.n	8003e34 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e015      	b.n	8003e60 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d20b      	bcs.n	8003e56 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	1ad2      	subs	r2, r2, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ff98 	bl	8003d80 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	e004      	b.n	8003e60 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e60:	f000 ff52 	bl	8004d08 <vPortExitCritical>

    return xReturn;
 8003e64:	69fb      	ldr	r3, [r7, #28]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000230 	.word	0x20000230
 8003e74:	20000244 	.word	0x20000244

08003e78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <vTaskMissedYield+0x14>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	20000240 	.word	0x20000240

08003e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e98:	f000 f852 	bl	8003f40 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <prvIdleTask+0x28>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d9f9      	bls.n	8003e98 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <prvIdleTask+0x2c>)
 8003ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003eb4:	e7f0      	b.n	8003e98 <prvIdleTask+0x8>
 8003eb6:	bf00      	nop
 8003eb8:	20000130 	.word	0x20000130
 8003ebc:	e000ed04 	.word	0xe000ed04

08003ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	e00c      	b.n	8003ee6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <prvInitialiseTaskLists+0x60>)
 8003ed8:	4413      	add	r3, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fc1a 	bl	8002714 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b06      	cmp	r3, #6
 8003eea:	d9ef      	bls.n	8003ecc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003eec:	480d      	ldr	r0, [pc, #52]	; (8003f24 <prvInitialiseTaskLists+0x64>)
 8003eee:	f7fe fc11 	bl	8002714 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ef2:	480d      	ldr	r0, [pc, #52]	; (8003f28 <prvInitialiseTaskLists+0x68>)
 8003ef4:	f7fe fc0e 	bl	8002714 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ef8:	480c      	ldr	r0, [pc, #48]	; (8003f2c <prvInitialiseTaskLists+0x6c>)
 8003efa:	f7fe fc0b 	bl	8002714 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003efe:	480c      	ldr	r0, [pc, #48]	; (8003f30 <prvInitialiseTaskLists+0x70>)
 8003f00:	f7fe fc08 	bl	8002714 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003f04:	480b      	ldr	r0, [pc, #44]	; (8003f34 <prvInitialiseTaskLists+0x74>)
 8003f06:	f7fe fc05 	bl	8002714 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <prvInitialiseTaskLists+0x78>)
 8003f0c:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <prvInitialiseTaskLists+0x64>)
 8003f0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <prvInitialiseTaskLists+0x7c>)
 8003f12:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <prvInitialiseTaskLists+0x68>)
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000130 	.word	0x20000130
 8003f24:	200001bc 	.word	0x200001bc
 8003f28:	200001d0 	.word	0x200001d0
 8003f2c:	200001ec 	.word	0x200001ec
 8003f30:	20000200 	.word	0x20000200
 8003f34:	20000218 	.word	0x20000218
 8003f38:	200001e4 	.word	0x200001e4
 8003f3c:	200001e8 	.word	0x200001e8

08003f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f46:	e019      	b.n	8003f7c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003f48:	f000 feae 	bl	8004ca8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <prvCheckTasksWaitingTermination+0x50>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe fc65 	bl	8002828 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <prvCheckTasksWaitingTermination+0x54>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	4a0b      	ldr	r2, [pc, #44]	; (8003f94 <prvCheckTasksWaitingTermination+0x54>)
 8003f66:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <prvCheckTasksWaitingTermination+0x58>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <prvCheckTasksWaitingTermination+0x58>)
 8003f70:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003f72:	f000 fec9 	bl	8004d08 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f810 	bl	8003f9c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <prvCheckTasksWaitingTermination+0x58>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e1      	bne.n	8003f48 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000200 	.word	0x20000200
 8003f94:	2000022c 	.word	0x2000022c
 8003f98:	20000214 	.word	0x20000214

08003f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 f87f 	bl	80050ac <vPortFree>
                vPortFree( pxTCB );
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f001 f87c 	bl	80050ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <prvResetNextTaskUnblockTime+0x30>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <prvResetNextTaskUnblockTime+0x34>)
 8003fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003fd2:	e005      	b.n	8003fe0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <prvResetNextTaskUnblockTime+0x30>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <prvResetNextTaskUnblockTime+0x34>)
 8003fde:	6013      	str	r3, [r2, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	200001e4 	.word	0x200001e4
 8003ff0:	2000024c 	.word	0x2000024c

08003ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <xTaskGetSchedulerState+0x34>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004002:	2301      	movs	r3, #1
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	e008      	b.n	800401a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <xTaskGetSchedulerState+0x38>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004010:	2302      	movs	r3, #2
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	e001      	b.n	800401a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800401a:	687b      	ldr	r3, [r7, #4]
    }
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20000238 	.word	0x20000238
 800402c:	20000254 	.word	0x20000254

08004030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d05e      	beq.n	8004104 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	4b31      	ldr	r3, [pc, #196]	; (8004110 <xTaskPriorityInherit+0xe0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	429a      	cmp	r2, r3
 8004052:	d24e      	bcs.n	80040f2 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	db06      	blt.n	800406a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800405c:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <xTaskPriorityInherit+0xe0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	f1c3 0207 	rsb	r2, r3, #7
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6959      	ldr	r1, [r3, #20]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a26      	ldr	r2, [pc, #152]	; (8004114 <xTaskPriorityInherit+0xe4>)
 800407c:	4413      	add	r3, r2
 800407e:	4299      	cmp	r1, r3
 8004080:	d12f      	bne.n	80040e2 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	3304      	adds	r3, #4
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fbce 	bl	8002828 <uxListRemove>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	2201      	movs	r2, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43da      	mvns	r2, r3
 800409e:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <xTaskPriorityInherit+0xe8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4013      	ands	r3, r2
 80040a4:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <xTaskPriorityInherit+0xe8>)
 80040a6:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <xTaskPriorityInherit+0xe0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	2201      	movs	r2, #1
 80040b8:	409a      	lsls	r2, r3
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <xTaskPriorityInherit+0xe8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	4a15      	ldr	r2, [pc, #84]	; (8004118 <xTaskPriorityInherit+0xe8>)
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4a10      	ldr	r2, [pc, #64]	; (8004114 <xTaskPriorityInherit+0xe4>)
 80040d2:	441a      	add	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f7fe fb47 	bl	800276e <vListInsertEnd>
 80040e0:	e004      	b.n	80040ec <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <xTaskPriorityInherit+0xe0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e008      	b.n	8004104 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <xTaskPriorityInherit+0xe0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d201      	bcs.n	8004104 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004104:	68fb      	ldr	r3, [r7, #12]
    }
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	2000012c 	.word	0x2000012c
 8004114:	20000130 	.word	0x20000130
 8004118:	20000234 	.word	0x20000234

0800411c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d063      	beq.n	80041fa <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004132:	4b34      	ldr	r3, [pc, #208]	; (8004204 <xTaskPriorityDisinherit+0xe8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	429a      	cmp	r2, r3
 800413a:	d00a      	beq.n	8004152 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
    }
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	60bb      	str	r3, [r7, #8]
    }
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004182:	429a      	cmp	r2, r3
 8004184:	d039      	beq.n	80041fa <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d135      	bne.n	80041fa <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	3304      	adds	r3, #4
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fb48 	bl	8002828 <uxListRemove>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	2201      	movs	r2, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43da      	mvns	r2, r3
 80041aa:	4b17      	ldr	r3, [pc, #92]	; (8004208 <xTaskPriorityDisinherit+0xec>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4013      	ands	r3, r2
 80041b0:	4a15      	ldr	r2, [pc, #84]	; (8004208 <xTaskPriorityDisinherit+0xec>)
 80041b2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	f1c3 0207 	rsb	r2, r3, #7
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	2201      	movs	r2, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <xTaskPriorityDisinherit+0xec>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <xTaskPriorityDisinherit+0xec>)
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4a09      	ldr	r2, [pc, #36]	; (800420c <xTaskPriorityDisinherit+0xf0>)
 80041e8:	441a      	add	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7fe fabc 	bl	800276e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80041f6:	2301      	movs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80041fa:	697b      	ldr	r3, [r7, #20]
    }
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	2000012c 	.word	0x2000012c
 8004208:	20000234 	.word	0x20000234
 800420c:	20000130 	.word	0x20000130

08004210 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800421e:	2301      	movs	r3, #1
 8004220:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d077      	beq.n	8004318 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
    }
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d902      	bls.n	8004256 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e002      	b.n	800425c <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	429a      	cmp	r2, r3
 8004264:	d058      	beq.n	8004318 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	d153      	bne.n	8004318 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004270:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	429a      	cmp	r2, r3
 8004278:	d10a      	bne.n	8004290 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	60bb      	str	r3, [r7, #8]
    }
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	db04      	blt.n	80042ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f1c3 0207 	rsb	r2, r3, #7
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	6959      	ldr	r1, [r3, #20]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4a19      	ldr	r2, [pc, #100]	; (8004324 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80042be:	4413      	add	r3, r2
 80042c0:	4299      	cmp	r1, r3
 80042c2:	d129      	bne.n	8004318 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	3304      	adds	r3, #4
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe faad 	bl	8002828 <uxListRemove>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	2201      	movs	r2, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4013      	ands	r3, r2
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042e8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	2201      	movs	r2, #1
 80042f0:	409a      	lsls	r2, r3
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	4a0b      	ldr	r2, [pc, #44]	; (8004328 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4a06      	ldr	r2, [pc, #24]	; (8004324 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800430a:	441a      	add	r2, r3
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f7fe fa2b 	bl	800276e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004318:	bf00      	nop
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	2000012c 	.word	0x2000012c
 8004324:	20000130 	.word	0x20000130
 8004328:	20000234 	.word	0x20000234

0800432c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <pvTaskIncrementMutexHeldCount+0x24>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <pvTaskIncrementMutexHeldCount+0x24>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800433e:	3201      	adds	r2, #1
 8004340:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004342:	4b03      	ldr	r3, [pc, #12]	; (8004350 <pvTaskIncrementMutexHeldCount+0x24>)
 8004344:	681b      	ldr	r3, [r3, #0]
    }
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	2000012c 	.word	0x2000012c

08004354 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800435e:	4b29      	ldr	r3, [pc, #164]	; (8004404 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004364:	4b28      	ldr	r3, [pc, #160]	; (8004408 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3304      	adds	r3, #4
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fa5c 	bl	8002828 <uxListRemove>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	2201      	movs	r2, #1
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43da      	mvns	r2, r3
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4013      	ands	r3, r2
 800438a:	4a20      	ldr	r2, [pc, #128]	; (800440c <prvAddCurrentTaskToDelayedList+0xb8>)
 800438c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d10a      	bne.n	80043ac <prvAddCurrentTaskToDelayedList+0x58>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	481a      	ldr	r0, [pc, #104]	; (8004410 <prvAddCurrentTaskToDelayedList+0xbc>)
 80043a6:	f7fe f9e2 	bl	800276e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80043aa:	e026      	b.n	80043fa <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d209      	bcs.n	80043d8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c4:	4b13      	ldr	r3, [pc, #76]	; (8004414 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f7fe f9f0 	bl	80027b6 <vListInsert>
}
 80043d6:	e010      	b.n	80043fa <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f7fe f9e6 	bl	80027b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <prvAddCurrentTaskToDelayedList+0xc8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d202      	bcs.n	80043fa <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80043f4:	4a09      	ldr	r2, [pc, #36]	; (800441c <prvAddCurrentTaskToDelayedList+0xc8>)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6013      	str	r3, [r2, #0]
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000230 	.word	0x20000230
 8004408:	2000012c 	.word	0x2000012c
 800440c:	20000234 	.word	0x20000234
 8004410:	20000218 	.word	0x20000218
 8004414:	200001e8 	.word	0x200001e8
 8004418:	200001e4 	.word	0x200001e4
 800441c:	2000024c 	.word	0x2000024c

08004420 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004426:	2300      	movs	r3, #0
 8004428:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800442a:	f000 fad5 	bl	80049d8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <xTimerCreateTimerTask+0x54>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <xTimerCreateTimerTask+0x58>)
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	2302      	movs	r3, #2
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2300      	movs	r3, #0
 8004440:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8004444:	490d      	ldr	r1, [pc, #52]	; (800447c <xTimerCreateTimerTask+0x5c>)
 8004446:	480e      	ldr	r0, [pc, #56]	; (8004480 <xTimerCreateTimerTask+0x60>)
 8004448:	f7ff f84e 	bl	80034e8 <xTaskCreate>
 800444c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	603b      	str	r3, [r7, #0]
    }
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800446a:	687b      	ldr	r3, [r7, #4]
    }
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000288 	.word	0x20000288
 8004478:	2000028c 	.word	0x2000028c
 800447c:	08005e04 	.word	0x08005e04
 8004480:	080045b9 	.word	0x080045b9

08004484 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xTimerGenericCommand+0x2e>
        __asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	623b      	str	r3, [r7, #32]
    }
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80044b2:	4b1a      	ldr	r3, [pc, #104]	; (800451c <xTimerGenericCommand+0x98>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02a      	beq.n	8004510 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	dc18      	bgt.n	80044fe <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044cc:	f7ff fd92 	bl	8003ff4 <xTaskGetSchedulerState>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d109      	bne.n	80044ea <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <xTimerGenericCommand+0x98>)
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	f107 0114 	add.w	r1, r7, #20
 80044de:	2300      	movs	r3, #0
 80044e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e2:	f7fe fae7 	bl	8002ab4 <xQueueGenericSend>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24
 80044e8:	e012      	b.n	8004510 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <xTimerGenericCommand+0x98>)
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	f107 0114 	add.w	r1, r7, #20
 80044f2:	2300      	movs	r3, #0
 80044f4:	2200      	movs	r2, #0
 80044f6:	f7fe fadd 	bl	8002ab4 <xQueueGenericSend>
 80044fa:	6278      	str	r0, [r7, #36]	; 0x24
 80044fc:	e008      	b.n	8004510 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <xTimerGenericCommand+0x98>)
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	f107 0114 	add.w	r1, r7, #20
 8004506:	2300      	movs	r3, #0
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	f7fe fbd1 	bl	8002cb0 <xQueueGenericSendFromISR>
 800450e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004512:	4618      	mov	r0, r3
 8004514:	3728      	adds	r7, #40	; 0x28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000288 	.word	0x20000288

08004520 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <prvProcessExpiredTimer+0x94>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	3304      	adds	r3, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe f975 	bl	8002828 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d022      	beq.n	8004592 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	18d1      	adds	r1, r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	6978      	ldr	r0, [r7, #20]
 800455a:	f000 f8d1 	bl	8004700 <prvInsertTimerInActiveList>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01f      	beq.n	80045a4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004564:	2300      	movs	r3, #0
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2300      	movs	r3, #0
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	2100      	movs	r1, #0
 800456e:	6978      	ldr	r0, [r7, #20]
 8004570:	f7ff ff88 	bl	8004484 <xTimerGenericCommand>
 8004574:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d113      	bne.n	80045a4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	60fb      	str	r3, [r7, #12]
    }
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	b2da      	uxtb	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	6978      	ldr	r0, [r7, #20]
 80045aa:	4798      	blx	r3
    }
 80045ac:	bf00      	nop
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000280 	.word	0x20000280

080045b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045c0:	f107 0308 	add.w	r3, r7, #8
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f857 	bl	8004678 <prvGetNextExpireTime>
 80045ca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4619      	mov	r1, r3
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f803 	bl	80045dc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80045d6:	f000 f8d5 	bl	8004784 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045da:	e7f1      	b.n	80045c0 <prvTimerTask+0x8>

080045dc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80045e6:	f7ff f94b 	bl	8003880 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ea:	f107 0308 	add.w	r3, r7, #8
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f866 	bl	80046c0 <prvSampleTimeNow>
 80045f4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d130      	bne.n	800465e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <prvProcessTimerOrBlockTask+0x3c>
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	429a      	cmp	r2, r3
 8004608:	d806      	bhi.n	8004618 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800460a:	f7ff f947 	bl	800389c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800460e:	68f9      	ldr	r1, [r7, #12]
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff ff85 	bl	8004520 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004616:	e024      	b.n	8004662 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <prvProcessTimerOrBlockTask+0x90>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <prvProcessTimerOrBlockTask+0x50>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <prvProcessTimerOrBlockTask+0x52>
 800462c:	2300      	movs	r3, #0
 800462e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <prvProcessTimerOrBlockTask+0x94>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	4619      	mov	r1, r3
 800463e:	f7fe ff1f 	bl	8003480 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004642:	f7ff f92b 	bl	800389c <xTaskResumeAll>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <prvProcessTimerOrBlockTask+0x98>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
    }
 800465c:	e001      	b.n	8004662 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800465e:	f7ff f91d 	bl	800389c <xTaskResumeAll>
    }
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000284 	.word	0x20000284
 8004670:	20000288 	.word	0x20000288
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <prvGetNextExpireTime+0x44>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <prvGetNextExpireTime+0x16>
 800468a:	2201      	movs	r2, #1
 800468c:	e000      	b.n	8004690 <prvGetNextExpireTime+0x18>
 800468e:	2200      	movs	r2, #0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <prvGetNextExpireTime+0x44>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e001      	b.n	80046ac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80046ac:	68fb      	ldr	r3, [r7, #12]
    }
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000280 	.word	0x20000280

080046c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80046c8:	f7ff f984 	bl	80039d4 <xTaskGetTickCount>
 80046cc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80046ce:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <prvSampleTimeNow+0x3c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d205      	bcs.n	80046e4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80046d8:	f000 f91a 	bl	8004910 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e002      	b.n	80046ea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80046ea:	4a04      	ldr	r2, [pc, #16]	; (80046fc <prvSampleTimeNow+0x3c>)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80046f0:	68fb      	ldr	r3, [r7, #12]
    }
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000290 	.word	0x20000290

08004700 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	429a      	cmp	r2, r3
 8004724:	d812      	bhi.n	800474c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	1ad2      	subs	r2, r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e01b      	b.n	8004772 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <prvInsertTimerInActiveList+0x7c>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f7fe f836 	bl	80027b6 <vListInsert>
 800474a:	e012      	b.n	8004772 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d206      	bcs.n	8004762 <prvInsertTimerInActiveList+0x62>
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d302      	bcc.n	8004762 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e007      	b.n	8004772 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004762:	4b07      	ldr	r3, [pc, #28]	; (8004780 <prvInsertTimerInActiveList+0x80>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7fe f822 	bl	80027b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004772:	697b      	ldr	r3, [r7, #20]
    }
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20000284 	.word	0x20000284
 8004780:	20000280 	.word	0x20000280

08004784 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004784:	b580      	push	{r7, lr}
 8004786:	b08c      	sub	sp, #48	; 0x30
 8004788:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800478a:	e0ae      	b.n	80048ea <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f2c0 80aa 	blt.w	80048e8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	3304      	adds	r3, #4
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe f83f 	bl	8002828 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff ff87 	bl	80046c0 <prvSampleTimeNow>
 80047b2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b09      	cmp	r3, #9
 80047b8:	f200 8097 	bhi.w	80048ea <prvProcessReceivedCommands+0x166>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <prvProcessReceivedCommands+0x40>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047ed 	.word	0x080047ed
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	080047ed 	.word	0x080047ed
 80047d0:	08004861 	.word	0x08004861
 80047d4:	08004875 	.word	0x08004875
 80047d8:	080048bf 	.word	0x080048bf
 80047dc:	080047ed 	.word	0x080047ed
 80047e0:	080047ed 	.word	0x080047ed
 80047e4:	08004861 	.word	0x08004861
 80047e8:	08004875 	.word	0x08004875
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	18d1      	adds	r1, r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800480c:	f7ff ff78 	bl	8004700 <prvInsertTimerInActiveList>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d069      	beq.n	80048ea <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800481c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d05e      	beq.n	80048ea <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	441a      	add	r2, r3
 8004834:	2300      	movs	r3, #0
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	2300      	movs	r3, #0
 800483a:	2100      	movs	r1, #0
 800483c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800483e:	f7ff fe21 	bl	8004484 <xTimerGenericCommand>
 8004842:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d14f      	bne.n	80048ea <prvProcessReceivedCommands+0x166>
        __asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	61bb      	str	r3, [r7, #24]
    }
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	b2da      	uxtb	r2, r3
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004872:	e03a      	b.n	80048ea <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	b2da      	uxtb	r2, r3
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	617b      	str	r3, [r7, #20]
    }
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	18d1      	adds	r1, r2, r3
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b8:	f7ff ff22 	bl	8004700 <prvInsertTimerInActiveList>
                        break;
 80048bc:	e015      	b.n	80048ea <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d103      	bne.n	80048d4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80048cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048ce:	f000 fbed 	bl	80050ac <vPortFree>
 80048d2:	e00a      	b.n	80048ea <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80048e6:	e000      	b.n	80048ea <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80048e8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ea:	4b08      	ldr	r3, [pc, #32]	; (800490c <prvProcessReceivedCommands+0x188>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f107 0108 	add.w	r1, r7, #8
 80048f2:	2200      	movs	r2, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe fa85 	bl	8002e04 <xQueueReceive>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f47f af45 	bne.w	800478c <prvProcessReceivedCommands+0x8>
        }
    }
 8004902:	bf00      	nop
 8004904:	bf00      	nop
 8004906:	3728      	adds	r7, #40	; 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000288 	.word	0x20000288

08004910 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004916:	e048      	b.n	80049aa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004918:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <prvSwitchTimerLists+0xc0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004922:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <prvSwitchTimerLists+0xc0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3304      	adds	r3, #4
 8004930:	4618      	mov	r0, r3
 8004932:	f7fd ff79 	bl	8002828 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02e      	beq.n	80049aa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	429a      	cmp	r2, r3
 800495c:	d90e      	bls.n	800497c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800496a:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <prvSwitchTimerLists+0xc0>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7fd ff1e 	bl	80027b6 <vListInsert>
 800497a:	e016      	b.n	80049aa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800497c:	2300      	movs	r3, #0
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2300      	movs	r3, #0
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	2100      	movs	r1, #0
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fd7c 	bl	8004484 <xTimerGenericCommand>
 800498c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	603b      	str	r3, [r7, #0]
    }
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <prvSwitchTimerLists+0xc0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1b1      	bne.n	8004918 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80049b4:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <prvSwitchTimerLists+0xc0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <prvSwitchTimerLists+0xc4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a04      	ldr	r2, [pc, #16]	; (80049d0 <prvSwitchTimerLists+0xc0>)
 80049c0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80049c2:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <prvSwitchTimerLists+0xc4>)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	6013      	str	r3, [r2, #0]
    }
 80049c8:	bf00      	nop
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000280 	.word	0x20000280
 80049d4:	20000284 	.word	0x20000284

080049d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80049dc:	f000 f964 	bl	8004ca8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80049e0:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <prvCheckForValidListAndQueue+0x54>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d11d      	bne.n	8004a24 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80049e8:	4811      	ldr	r0, [pc, #68]	; (8004a30 <prvCheckForValidListAndQueue+0x58>)
 80049ea:	f7fd fe93 	bl	8002714 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80049ee:	4811      	ldr	r0, [pc, #68]	; (8004a34 <prvCheckForValidListAndQueue+0x5c>)
 80049f0:	f7fd fe90 	bl	8002714 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <prvCheckForValidListAndQueue+0x60>)
 80049f6:	4a0e      	ldr	r2, [pc, #56]	; (8004a30 <prvCheckForValidListAndQueue+0x58>)
 80049f8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80049fa:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <prvCheckForValidListAndQueue+0x64>)
 80049fc:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <prvCheckForValidListAndQueue+0x5c>)
 80049fe:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004a00:	2200      	movs	r2, #0
 8004a02:	210c      	movs	r1, #12
 8004a04:	200a      	movs	r0, #10
 8004a06:	f7fd ffa1 	bl	800294c <xQueueGenericCreate>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4a07      	ldr	r2, [pc, #28]	; (8004a2c <prvCheckForValidListAndQueue+0x54>)
 8004a0e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <prvCheckForValidListAndQueue+0x54>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <prvCheckForValidListAndQueue+0x54>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4908      	ldr	r1, [pc, #32]	; (8004a40 <prvCheckForValidListAndQueue+0x68>)
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fd04 	bl	800342c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004a24:	f000 f970 	bl	8004d08 <vPortExitCritical>
    }
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000288 	.word	0x20000288
 8004a30:	20000258 	.word	0x20000258
 8004a34:	2000026c 	.word	0x2000026c
 8004a38:	20000280 	.word	0x20000280
 8004a3c:	20000284 	.word	0x20000284
 8004a40:	08005e0c 	.word	0x08005e0c

08004a44 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3b04      	subs	r3, #4
 8004a54:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3b04      	subs	r3, #4
 8004a62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f023 0201 	bic.w	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3b04      	subs	r3, #4
 8004a72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004a74:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <pxPortInitialiseStack+0x64>)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3b14      	subs	r3, #20
 8004a7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3b04      	subs	r3, #4
 8004a8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f06f 0202 	mvn.w	r2, #2
 8004a92:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3b20      	subs	r3, #32
 8004a98:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	08004aad 	.word	0x08004aad

08004aac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004ab6:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <prvTaskExitError+0x54>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d00a      	beq.n	8004ad6 <prvTaskExitError+0x2a>
        __asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	60fb      	str	r3, [r7, #12]
    }
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <prvTaskExitError+0x28>
        __asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60bb      	str	r3, [r7, #8]
    }
 8004ae8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004aea:	bf00      	nop
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0fc      	beq.n	8004aec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000010 	.word	0x20000010
	...

08004b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <pxCurrentTCBConst2>)
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	6808      	ldr	r0, [r1, #0]
 8004b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	f380 8809 	msr	PSP, r0
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8811 	msr	BASEPRI, r0
 8004b2a:	4770      	bx	lr
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst2>:
 8004b30:	2000012c 	.word	0x2000012c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004b38:	4808      	ldr	r0, [pc, #32]	; (8004b5c <prvPortStartFirstTask+0x24>)
 8004b3a:	6800      	ldr	r0, [r0, #0]
 8004b3c:	6800      	ldr	r0, [r0, #0]
 8004b3e:	f380 8808 	msr	MSP, r0
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f380 8814 	msr	CONTROL, r0
 8004b4a:	b662      	cpsie	i
 8004b4c:	b661      	cpsie	f
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	df00      	svc	0
 8004b58:	bf00      	nop
 8004b5a:	0000      	.short	0x0000
 8004b5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop

08004b64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b6a:	4b46      	ldr	r3, [pc, #280]	; (8004c84 <xPortStartScheduler+0x120>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a46      	ldr	r2, [pc, #280]	; (8004c88 <xPortStartScheduler+0x124>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10a      	bne.n	8004b8a <xPortStartScheduler+0x26>
        __asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	613b      	str	r3, [r7, #16]
    }
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b8a:	4b3e      	ldr	r3, [pc, #248]	; (8004c84 <xPortStartScheduler+0x120>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3f      	ldr	r2, [pc, #252]	; (8004c8c <xPortStartScheduler+0x128>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d10a      	bne.n	8004baa <xPortStartScheduler+0x46>
        __asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60fb      	str	r3, [r7, #12]
    }
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004baa:	4b39      	ldr	r3, [pc, #228]	; (8004c90 <xPortStartScheduler+0x12c>)
 8004bac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	22ff      	movs	r2, #255	; 0xff
 8004bba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <xPortStartScheduler+0x130>)
 8004bd0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bd2:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <xPortStartScheduler+0x134>)
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bd8:	e009      	b.n	8004bee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004bda:	4b2f      	ldr	r3, [pc, #188]	; (8004c98 <xPortStartScheduler+0x134>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	4a2d      	ldr	r2, [pc, #180]	; (8004c98 <xPortStartScheduler+0x134>)
 8004be2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b80      	cmp	r3, #128	; 0x80
 8004bf8:	d0ef      	beq.n	8004bda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bfa:	4b27      	ldr	r3, [pc, #156]	; (8004c98 <xPortStartScheduler+0x134>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f1c3 0307 	rsb	r3, r3, #7
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d00a      	beq.n	8004c1c <xPortStartScheduler+0xb8>
        __asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	60bb      	str	r3, [r7, #8]
    }
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c1c:	4b1e      	ldr	r3, [pc, #120]	; (8004c98 <xPortStartScheduler+0x134>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <xPortStartScheduler+0x134>)
 8004c24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <xPortStartScheduler+0x134>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c2e:	4a1a      	ldr	r2, [pc, #104]	; (8004c98 <xPortStartScheduler+0x134>)
 8004c30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004c3a:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <xPortStartScheduler+0x138>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <xPortStartScheduler+0x138>)
 8004c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <xPortStartScheduler+0x138>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <xPortStartScheduler+0x138>)
 8004c4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004c52:	f000 f8db 	bl	8004e0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <xPortStartScheduler+0x13c>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004c5c:	f000 f8fa 	bl	8004e54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c60:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <xPortStartScheduler+0x140>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a0f      	ldr	r2, [pc, #60]	; (8004ca4 <xPortStartScheduler+0x140>)
 8004c66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004c6c:	f7ff ff64 	bl	8004b38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004c70:	f7fe ff78 	bl	8003b64 <vTaskSwitchContext>
    prvTaskExitError();
 8004c74:	f7ff ff1a 	bl	8004aac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	e000ed00 	.word	0xe000ed00
 8004c88:	410fc271 	.word	0x410fc271
 8004c8c:	410fc270 	.word	0x410fc270
 8004c90:	e000e400 	.word	0xe000e400
 8004c94:	20000294 	.word	0x20000294
 8004c98:	20000298 	.word	0x20000298
 8004c9c:	e000ed20 	.word	0xe000ed20
 8004ca0:	20000010 	.word	0x20000010
 8004ca4:	e000ef34 	.word	0xe000ef34

08004ca8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
        __asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
    }
 8004cc0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <vPortEnterCritical+0x58>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	4a0d      	ldr	r2, [pc, #52]	; (8004d00 <vPortEnterCritical+0x58>)
 8004cca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <vPortEnterCritical+0x58>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d10f      	bne.n	8004cf4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <vPortEnterCritical+0x5c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	603b      	str	r3, [r7, #0]
    }
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <vPortEnterCritical+0x4a>
    }
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	20000010 	.word	0x20000010
 8004d04:	e000ed04 	.word	0xe000ed04

08004d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <vPortExitCritical+0x50>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <vPortExitCritical+0x24>
        __asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	607b      	str	r3, [r7, #4]
    }
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <vPortExitCritical+0x50>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <vPortExitCritical+0x50>)
 8004d34:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <vPortExitCritical+0x50>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <vPortExitCritical+0x42>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f383 8811 	msr	BASEPRI, r3
    }
 8004d48:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000010 	.word	0x20000010
 8004d5c:	00000000 	.word	0x00000000

08004d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004d60:	f3ef 8009 	mrs	r0, PSP
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <pxCurrentTCBConst>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f01e 0f10 	tst.w	lr, #16
 8004d70:	bf08      	it	eq
 8004d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	6010      	str	r0, [r2, #0]
 8004d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d84:	f380 8811 	msr	BASEPRI, r0
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f7fe fee8 	bl	8003b64 <vTaskSwitchContext>
 8004d94:	f04f 0000 	mov.w	r0, #0
 8004d98:	f380 8811 	msr	BASEPRI, r0
 8004d9c:	bc09      	pop	{r0, r3}
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6808      	ldr	r0, [r1, #0]
 8004da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da6:	f01e 0f10 	tst.w	lr, #16
 8004daa:	bf08      	it	eq
 8004dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004db0:	f380 8809 	msr	PSP, r0
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	f3af 8000 	nop.w

08004dc0 <pxCurrentTCBConst>:
 8004dc0:	2000012c 	.word	0x2000012c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop

08004dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
        __asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	607b      	str	r3, [r7, #4]
    }
 8004de0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004de2:	f7fe fe07 	bl	80039f4 <xTaskIncrementTick>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <SysTick_Handler+0x40>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	2300      	movs	r3, #0
 8004df6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f383 8811 	msr	BASEPRI, r3
    }
 8004dfe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <vPortSetupTimerInterrupt+0x34>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <vPortSetupTimerInterrupt+0x38>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <vPortSetupTimerInterrupt+0x3c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <vPortSetupTimerInterrupt+0x40>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	099b      	lsrs	r3, r3, #6
 8004e28:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <vPortSetupTimerInterrupt+0x44>)
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e2e:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <vPortSetupTimerInterrupt+0x34>)
 8004e30:	2207      	movs	r2, #7
 8004e32:	601a      	str	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000e010 	.word	0xe000e010
 8004e44:	e000e018 	.word	0xe000e018
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	10624dd3 	.word	0x10624dd3
 8004e50:	e000e014 	.word	0xe000e014

08004e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e64 <vPortEnableVFP+0x10>
 8004e58:	6801      	ldr	r1, [r0, #0]
 8004e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e5e:	6001      	str	r1, [r0, #0]
 8004e60:	4770      	bx	lr
 8004e62:	0000      	.short	0x0000
 8004e64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop

08004e6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004e72:	f3ef 8305 	mrs	r3, IPSR
 8004e76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b0f      	cmp	r3, #15
 8004e7c:	d914      	bls.n	8004ea8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e7e:	4a17      	ldr	r2, [pc, #92]	; (8004edc <vPortValidateInterruptPriority+0x70>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e88:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <vPortValidateInterruptPriority+0x74>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	7afa      	ldrb	r2, [r7, #11]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d20a      	bcs.n	8004ea8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	607b      	str	r3, [r7, #4]
    }
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <vPortValidateInterruptPriority+0x78>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <vPortValidateInterruptPriority+0x7c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d90a      	bls.n	8004ece <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	603b      	str	r3, [r7, #0]
    }
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <vPortValidateInterruptPriority+0x60>
    }
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000e3f0 	.word	0xe000e3f0
 8004ee0:	20000294 	.word	0x20000294
 8004ee4:	e000ed0c 	.word	0xe000ed0c
 8004ee8:	20000298 	.word	0x20000298

08004eec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004ef8:	f7fe fcc2 	bl	8003880 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004efc:	4b65      	ldr	r3, [pc, #404]	; (8005094 <pvPortMalloc+0x1a8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004f04:	f000 f934 	bl	8005170 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f08:	4b63      	ldr	r3, [pc, #396]	; (8005098 <pvPortMalloc+0x1ac>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 80a7 	bne.w	8005064 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d02d      	beq.n	8004f78 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d227      	bcs.n	8004f78 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004f28:	2208      	movs	r2, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d021      	beq.n	8004f7e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f023 0307 	bic.w	r3, r3, #7
 8004f40:	3308      	adds	r3, #8
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d214      	bcs.n	8004f72 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f023 0307 	bic.w	r3, r3, #7
 8004f4e:	3308      	adds	r3, #8
 8004f50:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <pvPortMalloc+0x92>
        __asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	617b      	str	r3, [r7, #20]
    }
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f76:	e002      	b.n	8004f7e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	e000      	b.n	8004f80 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f7e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d06e      	beq.n	8005064 <pvPortMalloc+0x178>
 8004f86:	4b45      	ldr	r3, [pc, #276]	; (800509c <pvPortMalloc+0x1b0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d869      	bhi.n	8005064 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004f90:	4b43      	ldr	r3, [pc, #268]	; (80050a0 <pvPortMalloc+0x1b4>)
 8004f92:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004f94:	4b42      	ldr	r3, [pc, #264]	; (80050a0 <pvPortMalloc+0x1b4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f9a:	e004      	b.n	8004fa6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d903      	bls.n	8004fb8 <pvPortMalloc+0xcc>
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f1      	bne.n	8004f9c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004fb8:	4b36      	ldr	r3, [pc, #216]	; (8005094 <pvPortMalloc+0x1a8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d050      	beq.n	8005064 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2208      	movs	r2, #8
 8004fc8:	4413      	add	r3, r2
 8004fca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	1ad2      	subs	r2, r2, r3
 8004fdc:	2308      	movs	r3, #8
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d91f      	bls.n	8005024 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <pvPortMalloc+0x120>
        __asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	613b      	str	r3, [r7, #16]
    }
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800501e:	69b8      	ldr	r0, [r7, #24]
 8005020:	f000 f908 	bl	8005234 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005024:	4b1d      	ldr	r3, [pc, #116]	; (800509c <pvPortMalloc+0x1b0>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	4a1b      	ldr	r2, [pc, #108]	; (800509c <pvPortMalloc+0x1b0>)
 8005030:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <pvPortMalloc+0x1b0>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <pvPortMalloc+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d203      	bcs.n	8005046 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800503e:	4b17      	ldr	r3, [pc, #92]	; (800509c <pvPortMalloc+0x1b0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <pvPortMalloc+0x1b8>)
 8005044:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <pvPortMalloc+0x1ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	431a      	orrs	r2, r3
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800505a:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <pvPortMalloc+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3301      	adds	r3, #1
 8005060:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <pvPortMalloc+0x1bc>)
 8005062:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005064:	f7fe fc1a 	bl	800389c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <pvPortMalloc+0x19c>
        __asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	60fb      	str	r3, [r7, #12]
    }
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <pvPortMalloc+0x19a>
    return pvReturn;
 8005088:	69fb      	ldr	r3, [r7, #28]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3728      	adds	r7, #40	; 0x28
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	200016a4 	.word	0x200016a4
 8005098:	200016b8 	.word	0x200016b8
 800509c:	200016a8 	.word	0x200016a8
 80050a0:	2000169c 	.word	0x2000169c
 80050a4:	200016ac 	.word	0x200016ac
 80050a8:	200016b0 	.word	0x200016b0

080050ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d04d      	beq.n	800515a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80050be:	2308      	movs	r3, #8
 80050c0:	425b      	negs	r3, r3
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4413      	add	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4b24      	ldr	r3, [pc, #144]	; (8005164 <vPortFree+0xb8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <vPortFree+0x44>
        __asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	60fb      	str	r3, [r7, #12]
    }
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <vPortFree+0x62>
        __asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60bb      	str	r3, [r7, #8]
    }
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	4b14      	ldr	r3, [pc, #80]	; (8005164 <vPortFree+0xb8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01e      	beq.n	800515a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d11a      	bne.n	800515a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <vPortFree+0xb8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	43db      	mvns	r3, r3
 800512e:	401a      	ands	r2, r3
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005134:	f7fe fba4 	bl	8003880 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <vPortFree+0xbc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4413      	add	r3, r2
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <vPortFree+0xbc>)
 8005144:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005146:	6938      	ldr	r0, [r7, #16]
 8005148:	f000 f874 	bl	8005234 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800514c:	4b07      	ldr	r3, [pc, #28]	; (800516c <vPortFree+0xc0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	4a06      	ldr	r2, [pc, #24]	; (800516c <vPortFree+0xc0>)
 8005154:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005156:	f7fe fba1 	bl	800389c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800515a:	bf00      	nop
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	200016b8 	.word	0x200016b8
 8005168:	200016a8 	.word	0x200016a8
 800516c:	200016b4 	.word	0x200016b4

08005170 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005176:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800517a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800517c:	4b27      	ldr	r3, [pc, #156]	; (800521c <prvHeapInit+0xac>)
 800517e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3307      	adds	r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0307 	bic.w	r3, r3, #7
 8005196:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	4a1f      	ldr	r2, [pc, #124]	; (800521c <prvHeapInit+0xac>)
 80051a0:	4413      	add	r3, r2
 80051a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <prvHeapInit+0xb0>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <prvHeapInit+0xb0>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	4413      	add	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80051bc:	2208      	movs	r2, #8
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a15      	ldr	r2, [pc, #84]	; (8005224 <prvHeapInit+0xb4>)
 80051d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <prvHeapInit+0xb4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <prvHeapInit+0xb4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <prvHeapInit+0xb4>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <prvHeapInit+0xb8>)
 80051fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4a09      	ldr	r2, [pc, #36]	; (800522c <prvHeapInit+0xbc>)
 8005206:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <prvHeapInit+0xc0>)
 800520a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800520e:	601a      	str	r2, [r3, #0]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	2000029c 	.word	0x2000029c
 8005220:	2000169c 	.word	0x2000169c
 8005224:	200016a4 	.word	0x200016a4
 8005228:	200016ac 	.word	0x200016ac
 800522c:	200016a8 	.word	0x200016a8
 8005230:	200016b8 	.word	0x200016b8

08005234 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800523c:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <prvInsertBlockIntoFreeList+0xac>)
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e002      	b.n	8005248 <prvInsertBlockIntoFreeList+0x14>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	429a      	cmp	r2, r3
 8005250:	d8f7      	bhi.n	8005242 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4413      	add	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	d108      	bne.n	8005276 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	441a      	add	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	441a      	add	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d118      	bne.n	80052bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d00d      	beq.n	80052b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	441a      	add	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e008      	b.n	80052c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <prvInsertBlockIntoFreeList+0xb0>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e003      	b.n	80052c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d002      	beq.n	80052d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	2000169c 	.word	0x2000169c
 80052e4:	200016a4 	.word	0x200016a4

080052e8 <__libc_init_array>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	4d0d      	ldr	r5, [pc, #52]	; (8005320 <__libc_init_array+0x38>)
 80052ec:	4c0d      	ldr	r4, [pc, #52]	; (8005324 <__libc_init_array+0x3c>)
 80052ee:	1b64      	subs	r4, r4, r5
 80052f0:	10a4      	asrs	r4, r4, #2
 80052f2:	2600      	movs	r6, #0
 80052f4:	42a6      	cmp	r6, r4
 80052f6:	d109      	bne.n	800530c <__libc_init_array+0x24>
 80052f8:	4d0b      	ldr	r5, [pc, #44]	; (8005328 <__libc_init_array+0x40>)
 80052fa:	4c0c      	ldr	r4, [pc, #48]	; (800532c <__libc_init_array+0x44>)
 80052fc:	f000 fd3a 	bl	8005d74 <_init>
 8005300:	1b64      	subs	r4, r4, r5
 8005302:	10a4      	asrs	r4, r4, #2
 8005304:	2600      	movs	r6, #0
 8005306:	42a6      	cmp	r6, r4
 8005308:	d105      	bne.n	8005316 <__libc_init_array+0x2e>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005310:	4798      	blx	r3
 8005312:	3601      	adds	r6, #1
 8005314:	e7ee      	b.n	80052f4 <__libc_init_array+0xc>
 8005316:	f855 3b04 	ldr.w	r3, [r5], #4
 800531a:	4798      	blx	r3
 800531c:	3601      	adds	r6, #1
 800531e:	e7f2      	b.n	8005306 <__libc_init_array+0x1e>
 8005320:	08005eb0 	.word	0x08005eb0
 8005324:	08005eb0 	.word	0x08005eb0
 8005328:	08005eb0 	.word	0x08005eb0
 800532c:	08005eb4 	.word	0x08005eb4

08005330 <memcpy>:
 8005330:	440a      	add	r2, r1
 8005332:	4291      	cmp	r1, r2
 8005334:	f100 33ff 	add.w	r3, r0, #4294967295
 8005338:	d100      	bne.n	800533c <memcpy+0xc>
 800533a:	4770      	bx	lr
 800533c:	b510      	push	{r4, lr}
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005346:	4291      	cmp	r1, r2
 8005348:	d1f9      	bne.n	800533e <memcpy+0xe>
 800534a:	bd10      	pop	{r4, pc}

0800534c <memset>:
 800534c:	4402      	add	r2, r0
 800534e:	4603      	mov	r3, r0
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	f803 1b01 	strb.w	r1, [r3], #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <_puts_r>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	460e      	mov	r6, r1
 8005360:	4605      	mov	r5, r0
 8005362:	b118      	cbz	r0, 800536c <_puts_r+0x10>
 8005364:	6983      	ldr	r3, [r0, #24]
 8005366:	b90b      	cbnz	r3, 800536c <_puts_r+0x10>
 8005368:	f000 fa48 	bl	80057fc <__sinit>
 800536c:	69ab      	ldr	r3, [r5, #24]
 800536e:	68ac      	ldr	r4, [r5, #8]
 8005370:	b913      	cbnz	r3, 8005378 <_puts_r+0x1c>
 8005372:	4628      	mov	r0, r5
 8005374:	f000 fa42 	bl	80057fc <__sinit>
 8005378:	4b2c      	ldr	r3, [pc, #176]	; (800542c <_puts_r+0xd0>)
 800537a:	429c      	cmp	r4, r3
 800537c:	d120      	bne.n	80053c0 <_puts_r+0x64>
 800537e:	686c      	ldr	r4, [r5, #4]
 8005380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005382:	07db      	lsls	r3, r3, #31
 8005384:	d405      	bmi.n	8005392 <_puts_r+0x36>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	0598      	lsls	r0, r3, #22
 800538a:	d402      	bmi.n	8005392 <_puts_r+0x36>
 800538c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800538e:	f000 fad3 	bl	8005938 <__retarget_lock_acquire_recursive>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	0719      	lsls	r1, r3, #28
 8005396:	d51d      	bpl.n	80053d4 <_puts_r+0x78>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	b1db      	cbz	r3, 80053d4 <_puts_r+0x78>
 800539c:	3e01      	subs	r6, #1
 800539e:	68a3      	ldr	r3, [r4, #8]
 80053a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053a4:	3b01      	subs	r3, #1
 80053a6:	60a3      	str	r3, [r4, #8]
 80053a8:	bb39      	cbnz	r1, 80053fa <_puts_r+0x9e>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da38      	bge.n	8005420 <_puts_r+0xc4>
 80053ae:	4622      	mov	r2, r4
 80053b0:	210a      	movs	r1, #10
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 f848 	bl	8005448 <__swbuf_r>
 80053b8:	3001      	adds	r0, #1
 80053ba:	d011      	beq.n	80053e0 <_puts_r+0x84>
 80053bc:	250a      	movs	r5, #10
 80053be:	e011      	b.n	80053e4 <_puts_r+0x88>
 80053c0:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <_puts_r+0xd4>)
 80053c2:	429c      	cmp	r4, r3
 80053c4:	d101      	bne.n	80053ca <_puts_r+0x6e>
 80053c6:	68ac      	ldr	r4, [r5, #8]
 80053c8:	e7da      	b.n	8005380 <_puts_r+0x24>
 80053ca:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <_puts_r+0xd8>)
 80053cc:	429c      	cmp	r4, r3
 80053ce:	bf08      	it	eq
 80053d0:	68ec      	ldreq	r4, [r5, #12]
 80053d2:	e7d5      	b.n	8005380 <_puts_r+0x24>
 80053d4:	4621      	mov	r1, r4
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 f888 	bl	80054ec <__swsetup_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d0dd      	beq.n	800539c <_puts_r+0x40>
 80053e0:	f04f 35ff 	mov.w	r5, #4294967295
 80053e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053e6:	07da      	lsls	r2, r3, #31
 80053e8:	d405      	bmi.n	80053f6 <_puts_r+0x9a>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	059b      	lsls	r3, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_puts_r+0x9a>
 80053f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053f2:	f000 faa2 	bl	800593a <__retarget_lock_release_recursive>
 80053f6:	4628      	mov	r0, r5
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da04      	bge.n	8005408 <_puts_r+0xac>
 80053fe:	69a2      	ldr	r2, [r4, #24]
 8005400:	429a      	cmp	r2, r3
 8005402:	dc06      	bgt.n	8005412 <_puts_r+0xb6>
 8005404:	290a      	cmp	r1, #10
 8005406:	d004      	beq.n	8005412 <_puts_r+0xb6>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	6022      	str	r2, [r4, #0]
 800540e:	7019      	strb	r1, [r3, #0]
 8005410:	e7c5      	b.n	800539e <_puts_r+0x42>
 8005412:	4622      	mov	r2, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f000 f817 	bl	8005448 <__swbuf_r>
 800541a:	3001      	adds	r0, #1
 800541c:	d1bf      	bne.n	800539e <_puts_r+0x42>
 800541e:	e7df      	b.n	80053e0 <_puts_r+0x84>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	250a      	movs	r5, #10
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	6022      	str	r2, [r4, #0]
 8005428:	701d      	strb	r5, [r3, #0]
 800542a:	e7db      	b.n	80053e4 <_puts_r+0x88>
 800542c:	08005e70 	.word	0x08005e70
 8005430:	08005e90 	.word	0x08005e90
 8005434:	08005e50 	.word	0x08005e50

08005438 <puts>:
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <puts+0xc>)
 800543a:	4601      	mov	r1, r0
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	f7ff bf8d 	b.w	800535c <_puts_r>
 8005442:	bf00      	nop
 8005444:	20000014 	.word	0x20000014

08005448 <__swbuf_r>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	460e      	mov	r6, r1
 800544c:	4614      	mov	r4, r2
 800544e:	4605      	mov	r5, r0
 8005450:	b118      	cbz	r0, 800545a <__swbuf_r+0x12>
 8005452:	6983      	ldr	r3, [r0, #24]
 8005454:	b90b      	cbnz	r3, 800545a <__swbuf_r+0x12>
 8005456:	f000 f9d1 	bl	80057fc <__sinit>
 800545a:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <__swbuf_r+0x98>)
 800545c:	429c      	cmp	r4, r3
 800545e:	d12b      	bne.n	80054b8 <__swbuf_r+0x70>
 8005460:	686c      	ldr	r4, [r5, #4]
 8005462:	69a3      	ldr	r3, [r4, #24]
 8005464:	60a3      	str	r3, [r4, #8]
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	071a      	lsls	r2, r3, #28
 800546a:	d52f      	bpl.n	80054cc <__swbuf_r+0x84>
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	b36b      	cbz	r3, 80054cc <__swbuf_r+0x84>
 8005470:	6923      	ldr	r3, [r4, #16]
 8005472:	6820      	ldr	r0, [r4, #0]
 8005474:	1ac0      	subs	r0, r0, r3
 8005476:	6963      	ldr	r3, [r4, #20]
 8005478:	b2f6      	uxtb	r6, r6
 800547a:	4283      	cmp	r3, r0
 800547c:	4637      	mov	r7, r6
 800547e:	dc04      	bgt.n	800548a <__swbuf_r+0x42>
 8005480:	4621      	mov	r1, r4
 8005482:	4628      	mov	r0, r5
 8005484:	f000 f926 	bl	80056d4 <_fflush_r>
 8005488:	bb30      	cbnz	r0, 80054d8 <__swbuf_r+0x90>
 800548a:	68a3      	ldr	r3, [r4, #8]
 800548c:	3b01      	subs	r3, #1
 800548e:	60a3      	str	r3, [r4, #8]
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	6022      	str	r2, [r4, #0]
 8005496:	701e      	strb	r6, [r3, #0]
 8005498:	6963      	ldr	r3, [r4, #20]
 800549a:	3001      	adds	r0, #1
 800549c:	4283      	cmp	r3, r0
 800549e:	d004      	beq.n	80054aa <__swbuf_r+0x62>
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	07db      	lsls	r3, r3, #31
 80054a4:	d506      	bpl.n	80054b4 <__swbuf_r+0x6c>
 80054a6:	2e0a      	cmp	r6, #10
 80054a8:	d104      	bne.n	80054b4 <__swbuf_r+0x6c>
 80054aa:	4621      	mov	r1, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	f000 f911 	bl	80056d4 <_fflush_r>
 80054b2:	b988      	cbnz	r0, 80054d8 <__swbuf_r+0x90>
 80054b4:	4638      	mov	r0, r7
 80054b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <__swbuf_r+0x9c>)
 80054ba:	429c      	cmp	r4, r3
 80054bc:	d101      	bne.n	80054c2 <__swbuf_r+0x7a>
 80054be:	68ac      	ldr	r4, [r5, #8]
 80054c0:	e7cf      	b.n	8005462 <__swbuf_r+0x1a>
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <__swbuf_r+0xa0>)
 80054c4:	429c      	cmp	r4, r3
 80054c6:	bf08      	it	eq
 80054c8:	68ec      	ldreq	r4, [r5, #12]
 80054ca:	e7ca      	b.n	8005462 <__swbuf_r+0x1a>
 80054cc:	4621      	mov	r1, r4
 80054ce:	4628      	mov	r0, r5
 80054d0:	f000 f80c 	bl	80054ec <__swsetup_r>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d0cb      	beq.n	8005470 <__swbuf_r+0x28>
 80054d8:	f04f 37ff 	mov.w	r7, #4294967295
 80054dc:	e7ea      	b.n	80054b4 <__swbuf_r+0x6c>
 80054de:	bf00      	nop
 80054e0:	08005e70 	.word	0x08005e70
 80054e4:	08005e90 	.word	0x08005e90
 80054e8:	08005e50 	.word	0x08005e50

080054ec <__swsetup_r>:
 80054ec:	4b32      	ldr	r3, [pc, #200]	; (80055b8 <__swsetup_r+0xcc>)
 80054ee:	b570      	push	{r4, r5, r6, lr}
 80054f0:	681d      	ldr	r5, [r3, #0]
 80054f2:	4606      	mov	r6, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	b125      	cbz	r5, 8005502 <__swsetup_r+0x16>
 80054f8:	69ab      	ldr	r3, [r5, #24]
 80054fa:	b913      	cbnz	r3, 8005502 <__swsetup_r+0x16>
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 f97d 	bl	80057fc <__sinit>
 8005502:	4b2e      	ldr	r3, [pc, #184]	; (80055bc <__swsetup_r+0xd0>)
 8005504:	429c      	cmp	r4, r3
 8005506:	d10f      	bne.n	8005528 <__swsetup_r+0x3c>
 8005508:	686c      	ldr	r4, [r5, #4]
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005510:	0719      	lsls	r1, r3, #28
 8005512:	d42c      	bmi.n	800556e <__swsetup_r+0x82>
 8005514:	06dd      	lsls	r5, r3, #27
 8005516:	d411      	bmi.n	800553c <__swsetup_r+0x50>
 8005518:	2309      	movs	r3, #9
 800551a:	6033      	str	r3, [r6, #0]
 800551c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	e03e      	b.n	80055a6 <__swsetup_r+0xba>
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <__swsetup_r+0xd4>)
 800552a:	429c      	cmp	r4, r3
 800552c:	d101      	bne.n	8005532 <__swsetup_r+0x46>
 800552e:	68ac      	ldr	r4, [r5, #8]
 8005530:	e7eb      	b.n	800550a <__swsetup_r+0x1e>
 8005532:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <__swsetup_r+0xd8>)
 8005534:	429c      	cmp	r4, r3
 8005536:	bf08      	it	eq
 8005538:	68ec      	ldreq	r4, [r5, #12]
 800553a:	e7e6      	b.n	800550a <__swsetup_r+0x1e>
 800553c:	0758      	lsls	r0, r3, #29
 800553e:	d512      	bpl.n	8005566 <__swsetup_r+0x7a>
 8005540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005542:	b141      	cbz	r1, 8005556 <__swsetup_r+0x6a>
 8005544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005548:	4299      	cmp	r1, r3
 800554a:	d002      	beq.n	8005552 <__swsetup_r+0x66>
 800554c:	4630      	mov	r0, r6
 800554e:	f000 fa5b 	bl	8005a08 <_free_r>
 8005552:	2300      	movs	r3, #0
 8005554:	6363      	str	r3, [r4, #52]	; 0x34
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	2300      	movs	r3, #0
 8005560:	6063      	str	r3, [r4, #4]
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f043 0308 	orr.w	r3, r3, #8
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	b94b      	cbnz	r3, 8005586 <__swsetup_r+0x9a>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557c:	d003      	beq.n	8005586 <__swsetup_r+0x9a>
 800557e:	4621      	mov	r1, r4
 8005580:	4630      	mov	r0, r6
 8005582:	f000 fa01 	bl	8005988 <__smakebuf_r>
 8005586:	89a0      	ldrh	r0, [r4, #12]
 8005588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800558c:	f010 0301 	ands.w	r3, r0, #1
 8005590:	d00a      	beq.n	80055a8 <__swsetup_r+0xbc>
 8005592:	2300      	movs	r3, #0
 8005594:	60a3      	str	r3, [r4, #8]
 8005596:	6963      	ldr	r3, [r4, #20]
 8005598:	425b      	negs	r3, r3
 800559a:	61a3      	str	r3, [r4, #24]
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	b943      	cbnz	r3, 80055b2 <__swsetup_r+0xc6>
 80055a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055a4:	d1ba      	bne.n	800551c <__swsetup_r+0x30>
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
 80055a8:	0781      	lsls	r1, r0, #30
 80055aa:	bf58      	it	pl
 80055ac:	6963      	ldrpl	r3, [r4, #20]
 80055ae:	60a3      	str	r3, [r4, #8]
 80055b0:	e7f4      	b.n	800559c <__swsetup_r+0xb0>
 80055b2:	2000      	movs	r0, #0
 80055b4:	e7f7      	b.n	80055a6 <__swsetup_r+0xba>
 80055b6:	bf00      	nop
 80055b8:	20000014 	.word	0x20000014
 80055bc:	08005e70 	.word	0x08005e70
 80055c0:	08005e90 	.word	0x08005e90
 80055c4:	08005e50 	.word	0x08005e50

080055c8 <__sflush_r>:
 80055c8:	898a      	ldrh	r2, [r1, #12]
 80055ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ce:	4605      	mov	r5, r0
 80055d0:	0710      	lsls	r0, r2, #28
 80055d2:	460c      	mov	r4, r1
 80055d4:	d458      	bmi.n	8005688 <__sflush_r+0xc0>
 80055d6:	684b      	ldr	r3, [r1, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dc05      	bgt.n	80055e8 <__sflush_r+0x20>
 80055dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dc02      	bgt.n	80055e8 <__sflush_r+0x20>
 80055e2:	2000      	movs	r0, #0
 80055e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ea:	2e00      	cmp	r6, #0
 80055ec:	d0f9      	beq.n	80055e2 <__sflush_r+0x1a>
 80055ee:	2300      	movs	r3, #0
 80055f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055f4:	682f      	ldr	r7, [r5, #0]
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	d032      	beq.n	8005660 <__sflush_r+0x98>
 80055fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	075a      	lsls	r2, r3, #29
 8005600:	d505      	bpl.n	800560e <__sflush_r+0x46>
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	1ac0      	subs	r0, r0, r3
 8005606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005608:	b10b      	cbz	r3, 800560e <__sflush_r+0x46>
 800560a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800560c:	1ac0      	subs	r0, r0, r3
 800560e:	2300      	movs	r3, #0
 8005610:	4602      	mov	r2, r0
 8005612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005614:	6a21      	ldr	r1, [r4, #32]
 8005616:	4628      	mov	r0, r5
 8005618:	47b0      	blx	r6
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	d106      	bne.n	800562e <__sflush_r+0x66>
 8005620:	6829      	ldr	r1, [r5, #0]
 8005622:	291d      	cmp	r1, #29
 8005624:	d82c      	bhi.n	8005680 <__sflush_r+0xb8>
 8005626:	4a2a      	ldr	r2, [pc, #168]	; (80056d0 <__sflush_r+0x108>)
 8005628:	40ca      	lsrs	r2, r1
 800562a:	07d6      	lsls	r6, r2, #31
 800562c:	d528      	bpl.n	8005680 <__sflush_r+0xb8>
 800562e:	2200      	movs	r2, #0
 8005630:	6062      	str	r2, [r4, #4]
 8005632:	04d9      	lsls	r1, r3, #19
 8005634:	6922      	ldr	r2, [r4, #16]
 8005636:	6022      	str	r2, [r4, #0]
 8005638:	d504      	bpl.n	8005644 <__sflush_r+0x7c>
 800563a:	1c42      	adds	r2, r0, #1
 800563c:	d101      	bne.n	8005642 <__sflush_r+0x7a>
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	b903      	cbnz	r3, 8005644 <__sflush_r+0x7c>
 8005642:	6560      	str	r0, [r4, #84]	; 0x54
 8005644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005646:	602f      	str	r7, [r5, #0]
 8005648:	2900      	cmp	r1, #0
 800564a:	d0ca      	beq.n	80055e2 <__sflush_r+0x1a>
 800564c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005650:	4299      	cmp	r1, r3
 8005652:	d002      	beq.n	800565a <__sflush_r+0x92>
 8005654:	4628      	mov	r0, r5
 8005656:	f000 f9d7 	bl	8005a08 <_free_r>
 800565a:	2000      	movs	r0, #0
 800565c:	6360      	str	r0, [r4, #52]	; 0x34
 800565e:	e7c1      	b.n	80055e4 <__sflush_r+0x1c>
 8005660:	6a21      	ldr	r1, [r4, #32]
 8005662:	2301      	movs	r3, #1
 8005664:	4628      	mov	r0, r5
 8005666:	47b0      	blx	r6
 8005668:	1c41      	adds	r1, r0, #1
 800566a:	d1c7      	bne.n	80055fc <__sflush_r+0x34>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0c4      	beq.n	80055fc <__sflush_r+0x34>
 8005672:	2b1d      	cmp	r3, #29
 8005674:	d001      	beq.n	800567a <__sflush_r+0xb2>
 8005676:	2b16      	cmp	r3, #22
 8005678:	d101      	bne.n	800567e <__sflush_r+0xb6>
 800567a:	602f      	str	r7, [r5, #0]
 800567c:	e7b1      	b.n	80055e2 <__sflush_r+0x1a>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	e7ad      	b.n	80055e4 <__sflush_r+0x1c>
 8005688:	690f      	ldr	r7, [r1, #16]
 800568a:	2f00      	cmp	r7, #0
 800568c:	d0a9      	beq.n	80055e2 <__sflush_r+0x1a>
 800568e:	0793      	lsls	r3, r2, #30
 8005690:	680e      	ldr	r6, [r1, #0]
 8005692:	bf08      	it	eq
 8005694:	694b      	ldreq	r3, [r1, #20]
 8005696:	600f      	str	r7, [r1, #0]
 8005698:	bf18      	it	ne
 800569a:	2300      	movne	r3, #0
 800569c:	eba6 0807 	sub.w	r8, r6, r7
 80056a0:	608b      	str	r3, [r1, #8]
 80056a2:	f1b8 0f00 	cmp.w	r8, #0
 80056a6:	dd9c      	ble.n	80055e2 <__sflush_r+0x1a>
 80056a8:	6a21      	ldr	r1, [r4, #32]
 80056aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056ac:	4643      	mov	r3, r8
 80056ae:	463a      	mov	r2, r7
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b0      	blx	r6
 80056b4:	2800      	cmp	r0, #0
 80056b6:	dc06      	bgt.n	80056c6 <__sflush_r+0xfe>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056be:	81a3      	strh	r3, [r4, #12]
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	e78e      	b.n	80055e4 <__sflush_r+0x1c>
 80056c6:	4407      	add	r7, r0
 80056c8:	eba8 0800 	sub.w	r8, r8, r0
 80056cc:	e7e9      	b.n	80056a2 <__sflush_r+0xda>
 80056ce:	bf00      	nop
 80056d0:	20400001 	.word	0x20400001

080056d4 <_fflush_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	690b      	ldr	r3, [r1, #16]
 80056d8:	4605      	mov	r5, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	b913      	cbnz	r3, 80056e4 <_fflush_r+0x10>
 80056de:	2500      	movs	r5, #0
 80056e0:	4628      	mov	r0, r5
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	b118      	cbz	r0, 80056ee <_fflush_r+0x1a>
 80056e6:	6983      	ldr	r3, [r0, #24]
 80056e8:	b90b      	cbnz	r3, 80056ee <_fflush_r+0x1a>
 80056ea:	f000 f887 	bl	80057fc <__sinit>
 80056ee:	4b14      	ldr	r3, [pc, #80]	; (8005740 <_fflush_r+0x6c>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	d11b      	bne.n	800572c <_fflush_r+0x58>
 80056f4:	686c      	ldr	r4, [r5, #4]
 80056f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0ef      	beq.n	80056de <_fflush_r+0xa>
 80056fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005700:	07d0      	lsls	r0, r2, #31
 8005702:	d404      	bmi.n	800570e <_fflush_r+0x3a>
 8005704:	0599      	lsls	r1, r3, #22
 8005706:	d402      	bmi.n	800570e <_fflush_r+0x3a>
 8005708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800570a:	f000 f915 	bl	8005938 <__retarget_lock_acquire_recursive>
 800570e:	4628      	mov	r0, r5
 8005710:	4621      	mov	r1, r4
 8005712:	f7ff ff59 	bl	80055c8 <__sflush_r>
 8005716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005718:	07da      	lsls	r2, r3, #31
 800571a:	4605      	mov	r5, r0
 800571c:	d4e0      	bmi.n	80056e0 <_fflush_r+0xc>
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	059b      	lsls	r3, r3, #22
 8005722:	d4dd      	bmi.n	80056e0 <_fflush_r+0xc>
 8005724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005726:	f000 f908 	bl	800593a <__retarget_lock_release_recursive>
 800572a:	e7d9      	b.n	80056e0 <_fflush_r+0xc>
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <_fflush_r+0x70>)
 800572e:	429c      	cmp	r4, r3
 8005730:	d101      	bne.n	8005736 <_fflush_r+0x62>
 8005732:	68ac      	ldr	r4, [r5, #8]
 8005734:	e7df      	b.n	80056f6 <_fflush_r+0x22>
 8005736:	4b04      	ldr	r3, [pc, #16]	; (8005748 <_fflush_r+0x74>)
 8005738:	429c      	cmp	r4, r3
 800573a:	bf08      	it	eq
 800573c:	68ec      	ldreq	r4, [r5, #12]
 800573e:	e7da      	b.n	80056f6 <_fflush_r+0x22>
 8005740:	08005e70 	.word	0x08005e70
 8005744:	08005e90 	.word	0x08005e90
 8005748:	08005e50 	.word	0x08005e50

0800574c <std>:
 800574c:	2300      	movs	r3, #0
 800574e:	b510      	push	{r4, lr}
 8005750:	4604      	mov	r4, r0
 8005752:	e9c0 3300 	strd	r3, r3, [r0]
 8005756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800575a:	6083      	str	r3, [r0, #8]
 800575c:	8181      	strh	r1, [r0, #12]
 800575e:	6643      	str	r3, [r0, #100]	; 0x64
 8005760:	81c2      	strh	r2, [r0, #14]
 8005762:	6183      	str	r3, [r0, #24]
 8005764:	4619      	mov	r1, r3
 8005766:	2208      	movs	r2, #8
 8005768:	305c      	adds	r0, #92	; 0x5c
 800576a:	f7ff fdef 	bl	800534c <memset>
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <std+0x38>)
 8005770:	6263      	str	r3, [r4, #36]	; 0x24
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <std+0x3c>)
 8005774:	62a3      	str	r3, [r4, #40]	; 0x28
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <std+0x40>)
 8005778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <std+0x44>)
 800577c:	6224      	str	r4, [r4, #32]
 800577e:	6323      	str	r3, [r4, #48]	; 0x30
 8005780:	bd10      	pop	{r4, pc}
 8005782:	bf00      	nop
 8005784:	08005be9 	.word	0x08005be9
 8005788:	08005c0b 	.word	0x08005c0b
 800578c:	08005c43 	.word	0x08005c43
 8005790:	08005c67 	.word	0x08005c67

08005794 <_cleanup_r>:
 8005794:	4901      	ldr	r1, [pc, #4]	; (800579c <_cleanup_r+0x8>)
 8005796:	f000 b8af 	b.w	80058f8 <_fwalk_reent>
 800579a:	bf00      	nop
 800579c:	080056d5 	.word	0x080056d5

080057a0 <__sfmoreglue>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	2268      	movs	r2, #104	; 0x68
 80057a4:	1e4d      	subs	r5, r1, #1
 80057a6:	4355      	muls	r5, r2
 80057a8:	460e      	mov	r6, r1
 80057aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057ae:	f000 f997 	bl	8005ae0 <_malloc_r>
 80057b2:	4604      	mov	r4, r0
 80057b4:	b140      	cbz	r0, 80057c8 <__sfmoreglue+0x28>
 80057b6:	2100      	movs	r1, #0
 80057b8:	e9c0 1600 	strd	r1, r6, [r0]
 80057bc:	300c      	adds	r0, #12
 80057be:	60a0      	str	r0, [r4, #8]
 80057c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057c4:	f7ff fdc2 	bl	800534c <memset>
 80057c8:	4620      	mov	r0, r4
 80057ca:	bd70      	pop	{r4, r5, r6, pc}

080057cc <__sfp_lock_acquire>:
 80057cc:	4801      	ldr	r0, [pc, #4]	; (80057d4 <__sfp_lock_acquire+0x8>)
 80057ce:	f000 b8b3 	b.w	8005938 <__retarget_lock_acquire_recursive>
 80057d2:	bf00      	nop
 80057d4:	200016bd 	.word	0x200016bd

080057d8 <__sfp_lock_release>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__sfp_lock_release+0x8>)
 80057da:	f000 b8ae 	b.w	800593a <__retarget_lock_release_recursive>
 80057de:	bf00      	nop
 80057e0:	200016bd 	.word	0x200016bd

080057e4 <__sinit_lock_acquire>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__sinit_lock_acquire+0x8>)
 80057e6:	f000 b8a7 	b.w	8005938 <__retarget_lock_acquire_recursive>
 80057ea:	bf00      	nop
 80057ec:	200016be 	.word	0x200016be

080057f0 <__sinit_lock_release>:
 80057f0:	4801      	ldr	r0, [pc, #4]	; (80057f8 <__sinit_lock_release+0x8>)
 80057f2:	f000 b8a2 	b.w	800593a <__retarget_lock_release_recursive>
 80057f6:	bf00      	nop
 80057f8:	200016be 	.word	0x200016be

080057fc <__sinit>:
 80057fc:	b510      	push	{r4, lr}
 80057fe:	4604      	mov	r4, r0
 8005800:	f7ff fff0 	bl	80057e4 <__sinit_lock_acquire>
 8005804:	69a3      	ldr	r3, [r4, #24]
 8005806:	b11b      	cbz	r3, 8005810 <__sinit+0x14>
 8005808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800580c:	f7ff bff0 	b.w	80057f0 <__sinit_lock_release>
 8005810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005814:	6523      	str	r3, [r4, #80]	; 0x50
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <__sinit+0x68>)
 8005818:	4a13      	ldr	r2, [pc, #76]	; (8005868 <__sinit+0x6c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	62a2      	str	r2, [r4, #40]	; 0x28
 800581e:	42a3      	cmp	r3, r4
 8005820:	bf04      	itt	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	61a3      	streq	r3, [r4, #24]
 8005826:	4620      	mov	r0, r4
 8005828:	f000 f820 	bl	800586c <__sfp>
 800582c:	6060      	str	r0, [r4, #4]
 800582e:	4620      	mov	r0, r4
 8005830:	f000 f81c 	bl	800586c <__sfp>
 8005834:	60a0      	str	r0, [r4, #8]
 8005836:	4620      	mov	r0, r4
 8005838:	f000 f818 	bl	800586c <__sfp>
 800583c:	2200      	movs	r2, #0
 800583e:	60e0      	str	r0, [r4, #12]
 8005840:	2104      	movs	r1, #4
 8005842:	6860      	ldr	r0, [r4, #4]
 8005844:	f7ff ff82 	bl	800574c <std>
 8005848:	68a0      	ldr	r0, [r4, #8]
 800584a:	2201      	movs	r2, #1
 800584c:	2109      	movs	r1, #9
 800584e:	f7ff ff7d 	bl	800574c <std>
 8005852:	68e0      	ldr	r0, [r4, #12]
 8005854:	2202      	movs	r2, #2
 8005856:	2112      	movs	r1, #18
 8005858:	f7ff ff78 	bl	800574c <std>
 800585c:	2301      	movs	r3, #1
 800585e:	61a3      	str	r3, [r4, #24]
 8005860:	e7d2      	b.n	8005808 <__sinit+0xc>
 8005862:	bf00      	nop
 8005864:	08005e4c 	.word	0x08005e4c
 8005868:	08005795 	.word	0x08005795

0800586c <__sfp>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	4607      	mov	r7, r0
 8005870:	f7ff ffac 	bl	80057cc <__sfp_lock_acquire>
 8005874:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <__sfp+0x84>)
 8005876:	681e      	ldr	r6, [r3, #0]
 8005878:	69b3      	ldr	r3, [r6, #24]
 800587a:	b913      	cbnz	r3, 8005882 <__sfp+0x16>
 800587c:	4630      	mov	r0, r6
 800587e:	f7ff ffbd 	bl	80057fc <__sinit>
 8005882:	3648      	adds	r6, #72	; 0x48
 8005884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005888:	3b01      	subs	r3, #1
 800588a:	d503      	bpl.n	8005894 <__sfp+0x28>
 800588c:	6833      	ldr	r3, [r6, #0]
 800588e:	b30b      	cbz	r3, 80058d4 <__sfp+0x68>
 8005890:	6836      	ldr	r6, [r6, #0]
 8005892:	e7f7      	b.n	8005884 <__sfp+0x18>
 8005894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005898:	b9d5      	cbnz	r5, 80058d0 <__sfp+0x64>
 800589a:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <__sfp+0x88>)
 800589c:	60e3      	str	r3, [r4, #12]
 800589e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058a2:	6665      	str	r5, [r4, #100]	; 0x64
 80058a4:	f000 f847 	bl	8005936 <__retarget_lock_init_recursive>
 80058a8:	f7ff ff96 	bl	80057d8 <__sfp_lock_release>
 80058ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058b4:	6025      	str	r5, [r4, #0]
 80058b6:	61a5      	str	r5, [r4, #24]
 80058b8:	2208      	movs	r2, #8
 80058ba:	4629      	mov	r1, r5
 80058bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058c0:	f7ff fd44 	bl	800534c <memset>
 80058c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058cc:	4620      	mov	r0, r4
 80058ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d0:	3468      	adds	r4, #104	; 0x68
 80058d2:	e7d9      	b.n	8005888 <__sfp+0x1c>
 80058d4:	2104      	movs	r1, #4
 80058d6:	4638      	mov	r0, r7
 80058d8:	f7ff ff62 	bl	80057a0 <__sfmoreglue>
 80058dc:	4604      	mov	r4, r0
 80058de:	6030      	str	r0, [r6, #0]
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d1d5      	bne.n	8005890 <__sfp+0x24>
 80058e4:	f7ff ff78 	bl	80057d8 <__sfp_lock_release>
 80058e8:	230c      	movs	r3, #12
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	e7ee      	b.n	80058cc <__sfp+0x60>
 80058ee:	bf00      	nop
 80058f0:	08005e4c 	.word	0x08005e4c
 80058f4:	ffff0001 	.word	0xffff0001

080058f8 <_fwalk_reent>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	4606      	mov	r6, r0
 80058fe:	4688      	mov	r8, r1
 8005900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005904:	2700      	movs	r7, #0
 8005906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800590a:	f1b9 0901 	subs.w	r9, r9, #1
 800590e:	d505      	bpl.n	800591c <_fwalk_reent+0x24>
 8005910:	6824      	ldr	r4, [r4, #0]
 8005912:	2c00      	cmp	r4, #0
 8005914:	d1f7      	bne.n	8005906 <_fwalk_reent+0xe>
 8005916:	4638      	mov	r0, r7
 8005918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591c:	89ab      	ldrh	r3, [r5, #12]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d907      	bls.n	8005932 <_fwalk_reent+0x3a>
 8005922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005926:	3301      	adds	r3, #1
 8005928:	d003      	beq.n	8005932 <_fwalk_reent+0x3a>
 800592a:	4629      	mov	r1, r5
 800592c:	4630      	mov	r0, r6
 800592e:	47c0      	blx	r8
 8005930:	4307      	orrs	r7, r0
 8005932:	3568      	adds	r5, #104	; 0x68
 8005934:	e7e9      	b.n	800590a <_fwalk_reent+0x12>

08005936 <__retarget_lock_init_recursive>:
 8005936:	4770      	bx	lr

08005938 <__retarget_lock_acquire_recursive>:
 8005938:	4770      	bx	lr

0800593a <__retarget_lock_release_recursive>:
 800593a:	4770      	bx	lr

0800593c <__swhatbuf_r>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	460e      	mov	r6, r1
 8005940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005944:	2900      	cmp	r1, #0
 8005946:	b096      	sub	sp, #88	; 0x58
 8005948:	4614      	mov	r4, r2
 800594a:	461d      	mov	r5, r3
 800594c:	da08      	bge.n	8005960 <__swhatbuf_r+0x24>
 800594e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	602a      	str	r2, [r5, #0]
 8005956:	061a      	lsls	r2, r3, #24
 8005958:	d410      	bmi.n	800597c <__swhatbuf_r+0x40>
 800595a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800595e:	e00e      	b.n	800597e <__swhatbuf_r+0x42>
 8005960:	466a      	mov	r2, sp
 8005962:	f000 f9a7 	bl	8005cb4 <_fstat_r>
 8005966:	2800      	cmp	r0, #0
 8005968:	dbf1      	blt.n	800594e <__swhatbuf_r+0x12>
 800596a:	9a01      	ldr	r2, [sp, #4]
 800596c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005970:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005974:	425a      	negs	r2, r3
 8005976:	415a      	adcs	r2, r3
 8005978:	602a      	str	r2, [r5, #0]
 800597a:	e7ee      	b.n	800595a <__swhatbuf_r+0x1e>
 800597c:	2340      	movs	r3, #64	; 0x40
 800597e:	2000      	movs	r0, #0
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	b016      	add	sp, #88	; 0x58
 8005984:	bd70      	pop	{r4, r5, r6, pc}
	...

08005988 <__smakebuf_r>:
 8005988:	898b      	ldrh	r3, [r1, #12]
 800598a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800598c:	079d      	lsls	r5, r3, #30
 800598e:	4606      	mov	r6, r0
 8005990:	460c      	mov	r4, r1
 8005992:	d507      	bpl.n	80059a4 <__smakebuf_r+0x1c>
 8005994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	6123      	str	r3, [r4, #16]
 800599c:	2301      	movs	r3, #1
 800599e:	6163      	str	r3, [r4, #20]
 80059a0:	b002      	add	sp, #8
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	ab01      	add	r3, sp, #4
 80059a6:	466a      	mov	r2, sp
 80059a8:	f7ff ffc8 	bl	800593c <__swhatbuf_r>
 80059ac:	9900      	ldr	r1, [sp, #0]
 80059ae:	4605      	mov	r5, r0
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f895 	bl	8005ae0 <_malloc_r>
 80059b6:	b948      	cbnz	r0, 80059cc <__smakebuf_r+0x44>
 80059b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059bc:	059a      	lsls	r2, r3, #22
 80059be:	d4ef      	bmi.n	80059a0 <__smakebuf_r+0x18>
 80059c0:	f023 0303 	bic.w	r3, r3, #3
 80059c4:	f043 0302 	orr.w	r3, r3, #2
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	e7e3      	b.n	8005994 <__smakebuf_r+0xc>
 80059cc:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <__smakebuf_r+0x7c>)
 80059ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	6020      	str	r0, [r4, #0]
 80059d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	9b00      	ldr	r3, [sp, #0]
 80059dc:	6163      	str	r3, [r4, #20]
 80059de:	9b01      	ldr	r3, [sp, #4]
 80059e0:	6120      	str	r0, [r4, #16]
 80059e2:	b15b      	cbz	r3, 80059fc <__smakebuf_r+0x74>
 80059e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059e8:	4630      	mov	r0, r6
 80059ea:	f000 f975 	bl	8005cd8 <_isatty_r>
 80059ee:	b128      	cbz	r0, 80059fc <__smakebuf_r+0x74>
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	f023 0303 	bic.w	r3, r3, #3
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	81a3      	strh	r3, [r4, #12]
 80059fc:	89a0      	ldrh	r0, [r4, #12]
 80059fe:	4305      	orrs	r5, r0
 8005a00:	81a5      	strh	r5, [r4, #12]
 8005a02:	e7cd      	b.n	80059a0 <__smakebuf_r+0x18>
 8005a04:	08005795 	.word	0x08005795

08005a08 <_free_r>:
 8005a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	d044      	beq.n	8005a98 <_free_r+0x90>
 8005a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a12:	9001      	str	r0, [sp, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f1a1 0404 	sub.w	r4, r1, #4
 8005a1a:	bfb8      	it	lt
 8005a1c:	18e4      	addlt	r4, r4, r3
 8005a1e:	f000 f97d 	bl	8005d1c <__malloc_lock>
 8005a22:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <_free_r+0x94>)
 8005a24:	9801      	ldr	r0, [sp, #4]
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	b933      	cbnz	r3, 8005a38 <_free_r+0x30>
 8005a2a:	6063      	str	r3, [r4, #4]
 8005a2c:	6014      	str	r4, [r2, #0]
 8005a2e:	b003      	add	sp, #12
 8005a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a34:	f000 b978 	b.w	8005d28 <__malloc_unlock>
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d908      	bls.n	8005a4e <_free_r+0x46>
 8005a3c:	6825      	ldr	r5, [r4, #0]
 8005a3e:	1961      	adds	r1, r4, r5
 8005a40:	428b      	cmp	r3, r1
 8005a42:	bf01      	itttt	eq
 8005a44:	6819      	ldreq	r1, [r3, #0]
 8005a46:	685b      	ldreq	r3, [r3, #4]
 8005a48:	1949      	addeq	r1, r1, r5
 8005a4a:	6021      	streq	r1, [r4, #0]
 8005a4c:	e7ed      	b.n	8005a2a <_free_r+0x22>
 8005a4e:	461a      	mov	r2, r3
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	b10b      	cbz	r3, 8005a58 <_free_r+0x50>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d9fa      	bls.n	8005a4e <_free_r+0x46>
 8005a58:	6811      	ldr	r1, [r2, #0]
 8005a5a:	1855      	adds	r5, r2, r1
 8005a5c:	42a5      	cmp	r5, r4
 8005a5e:	d10b      	bne.n	8005a78 <_free_r+0x70>
 8005a60:	6824      	ldr	r4, [r4, #0]
 8005a62:	4421      	add	r1, r4
 8005a64:	1854      	adds	r4, r2, r1
 8005a66:	42a3      	cmp	r3, r4
 8005a68:	6011      	str	r1, [r2, #0]
 8005a6a:	d1e0      	bne.n	8005a2e <_free_r+0x26>
 8005a6c:	681c      	ldr	r4, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	6053      	str	r3, [r2, #4]
 8005a72:	4421      	add	r1, r4
 8005a74:	6011      	str	r1, [r2, #0]
 8005a76:	e7da      	b.n	8005a2e <_free_r+0x26>
 8005a78:	d902      	bls.n	8005a80 <_free_r+0x78>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	6003      	str	r3, [r0, #0]
 8005a7e:	e7d6      	b.n	8005a2e <_free_r+0x26>
 8005a80:	6825      	ldr	r5, [r4, #0]
 8005a82:	1961      	adds	r1, r4, r5
 8005a84:	428b      	cmp	r3, r1
 8005a86:	bf04      	itt	eq
 8005a88:	6819      	ldreq	r1, [r3, #0]
 8005a8a:	685b      	ldreq	r3, [r3, #4]
 8005a8c:	6063      	str	r3, [r4, #4]
 8005a8e:	bf04      	itt	eq
 8005a90:	1949      	addeq	r1, r1, r5
 8005a92:	6021      	streq	r1, [r4, #0]
 8005a94:	6054      	str	r4, [r2, #4]
 8005a96:	e7ca      	b.n	8005a2e <_free_r+0x26>
 8005a98:	b003      	add	sp, #12
 8005a9a:	bd30      	pop	{r4, r5, pc}
 8005a9c:	200016c0 	.word	0x200016c0

08005aa0 <sbrk_aligned>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4e0e      	ldr	r6, [pc, #56]	; (8005adc <sbrk_aligned+0x3c>)
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	6831      	ldr	r1, [r6, #0]
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	b911      	cbnz	r1, 8005ab2 <sbrk_aligned+0x12>
 8005aac:	f000 f88c 	bl	8005bc8 <_sbrk_r>
 8005ab0:	6030      	str	r0, [r6, #0]
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 f887 	bl	8005bc8 <_sbrk_r>
 8005aba:	1c43      	adds	r3, r0, #1
 8005abc:	d00a      	beq.n	8005ad4 <sbrk_aligned+0x34>
 8005abe:	1cc4      	adds	r4, r0, #3
 8005ac0:	f024 0403 	bic.w	r4, r4, #3
 8005ac4:	42a0      	cmp	r0, r4
 8005ac6:	d007      	beq.n	8005ad8 <sbrk_aligned+0x38>
 8005ac8:	1a21      	subs	r1, r4, r0
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 f87c 	bl	8005bc8 <_sbrk_r>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d101      	bne.n	8005ad8 <sbrk_aligned+0x38>
 8005ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ad8:	4620      	mov	r0, r4
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	200016c4 	.word	0x200016c4

08005ae0 <_malloc_r>:
 8005ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae4:	1ccd      	adds	r5, r1, #3
 8005ae6:	f025 0503 	bic.w	r5, r5, #3
 8005aea:	3508      	adds	r5, #8
 8005aec:	2d0c      	cmp	r5, #12
 8005aee:	bf38      	it	cc
 8005af0:	250c      	movcc	r5, #12
 8005af2:	2d00      	cmp	r5, #0
 8005af4:	4607      	mov	r7, r0
 8005af6:	db01      	blt.n	8005afc <_malloc_r+0x1c>
 8005af8:	42a9      	cmp	r1, r5
 8005afa:	d905      	bls.n	8005b08 <_malloc_r+0x28>
 8005afc:	230c      	movs	r3, #12
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	2600      	movs	r6, #0
 8005b02:	4630      	mov	r0, r6
 8005b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b08:	4e2e      	ldr	r6, [pc, #184]	; (8005bc4 <_malloc_r+0xe4>)
 8005b0a:	f000 f907 	bl	8005d1c <__malloc_lock>
 8005b0e:	6833      	ldr	r3, [r6, #0]
 8005b10:	461c      	mov	r4, r3
 8005b12:	bb34      	cbnz	r4, 8005b62 <_malloc_r+0x82>
 8005b14:	4629      	mov	r1, r5
 8005b16:	4638      	mov	r0, r7
 8005b18:	f7ff ffc2 	bl	8005aa0 <sbrk_aligned>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	4604      	mov	r4, r0
 8005b20:	d14d      	bne.n	8005bbe <_malloc_r+0xde>
 8005b22:	6834      	ldr	r4, [r6, #0]
 8005b24:	4626      	mov	r6, r4
 8005b26:	2e00      	cmp	r6, #0
 8005b28:	d140      	bne.n	8005bac <_malloc_r+0xcc>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4638      	mov	r0, r7
 8005b30:	eb04 0803 	add.w	r8, r4, r3
 8005b34:	f000 f848 	bl	8005bc8 <_sbrk_r>
 8005b38:	4580      	cmp	r8, r0
 8005b3a:	d13a      	bne.n	8005bb2 <_malloc_r+0xd2>
 8005b3c:	6821      	ldr	r1, [r4, #0]
 8005b3e:	3503      	adds	r5, #3
 8005b40:	1a6d      	subs	r5, r5, r1
 8005b42:	f025 0503 	bic.w	r5, r5, #3
 8005b46:	3508      	adds	r5, #8
 8005b48:	2d0c      	cmp	r5, #12
 8005b4a:	bf38      	it	cc
 8005b4c:	250c      	movcc	r5, #12
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4638      	mov	r0, r7
 8005b52:	f7ff ffa5 	bl	8005aa0 <sbrk_aligned>
 8005b56:	3001      	adds	r0, #1
 8005b58:	d02b      	beq.n	8005bb2 <_malloc_r+0xd2>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	442b      	add	r3, r5
 8005b5e:	6023      	str	r3, [r4, #0]
 8005b60:	e00e      	b.n	8005b80 <_malloc_r+0xa0>
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	1b52      	subs	r2, r2, r5
 8005b66:	d41e      	bmi.n	8005ba6 <_malloc_r+0xc6>
 8005b68:	2a0b      	cmp	r2, #11
 8005b6a:	d916      	bls.n	8005b9a <_malloc_r+0xba>
 8005b6c:	1961      	adds	r1, r4, r5
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	6025      	str	r5, [r4, #0]
 8005b72:	bf18      	it	ne
 8005b74:	6059      	strne	r1, [r3, #4]
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	bf08      	it	eq
 8005b7a:	6031      	streq	r1, [r6, #0]
 8005b7c:	5162      	str	r2, [r4, r5]
 8005b7e:	604b      	str	r3, [r1, #4]
 8005b80:	4638      	mov	r0, r7
 8005b82:	f104 060b 	add.w	r6, r4, #11
 8005b86:	f000 f8cf 	bl	8005d28 <__malloc_unlock>
 8005b8a:	f026 0607 	bic.w	r6, r6, #7
 8005b8e:	1d23      	adds	r3, r4, #4
 8005b90:	1af2      	subs	r2, r6, r3
 8005b92:	d0b6      	beq.n	8005b02 <_malloc_r+0x22>
 8005b94:	1b9b      	subs	r3, r3, r6
 8005b96:	50a3      	str	r3, [r4, r2]
 8005b98:	e7b3      	b.n	8005b02 <_malloc_r+0x22>
 8005b9a:	6862      	ldr	r2, [r4, #4]
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	bf0c      	ite	eq
 8005ba0:	6032      	streq	r2, [r6, #0]
 8005ba2:	605a      	strne	r2, [r3, #4]
 8005ba4:	e7ec      	b.n	8005b80 <_malloc_r+0xa0>
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	6864      	ldr	r4, [r4, #4]
 8005baa:	e7b2      	b.n	8005b12 <_malloc_r+0x32>
 8005bac:	4634      	mov	r4, r6
 8005bae:	6876      	ldr	r6, [r6, #4]
 8005bb0:	e7b9      	b.n	8005b26 <_malloc_r+0x46>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	f000 f8b6 	bl	8005d28 <__malloc_unlock>
 8005bbc:	e7a1      	b.n	8005b02 <_malloc_r+0x22>
 8005bbe:	6025      	str	r5, [r4, #0]
 8005bc0:	e7de      	b.n	8005b80 <_malloc_r+0xa0>
 8005bc2:	bf00      	nop
 8005bc4:	200016c0 	.word	0x200016c0

08005bc8 <_sbrk_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4d06      	ldr	r5, [pc, #24]	; (8005be4 <_sbrk_r+0x1c>)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4604      	mov	r4, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	f000 f8c0 	bl	8005d58 <_sbrk>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_sbrk_r+0x1a>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_sbrk_r+0x1a>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	200016c8 	.word	0x200016c8

08005be8 <__sread>:
 8005be8:	b510      	push	{r4, lr}
 8005bea:	460c      	mov	r4, r1
 8005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf0:	f000 f8a0 	bl	8005d34 <_read_r>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	bfab      	itete	ge
 8005bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8005bfc:	181b      	addge	r3, r3, r0
 8005bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c02:	bfac      	ite	ge
 8005c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c06:	81a3      	strhlt	r3, [r4, #12]
 8005c08:	bd10      	pop	{r4, pc}

08005c0a <__swrite>:
 8005c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0e:	461f      	mov	r7, r3
 8005c10:	898b      	ldrh	r3, [r1, #12]
 8005c12:	05db      	lsls	r3, r3, #23
 8005c14:	4605      	mov	r5, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	4616      	mov	r6, r2
 8005c1a:	d505      	bpl.n	8005c28 <__swrite+0x1e>
 8005c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c20:	2302      	movs	r3, #2
 8005c22:	2200      	movs	r2, #0
 8005c24:	f000 f868 	bl	8005cf8 <_lseek_r>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c32:	81a3      	strh	r3, [r4, #12]
 8005c34:	4632      	mov	r2, r6
 8005c36:	463b      	mov	r3, r7
 8005c38:	4628      	mov	r0, r5
 8005c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3e:	f000 b817 	b.w	8005c70 <_write_r>

08005c42 <__sseek>:
 8005c42:	b510      	push	{r4, lr}
 8005c44:	460c      	mov	r4, r1
 8005c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4a:	f000 f855 	bl	8005cf8 <_lseek_r>
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	bf15      	itete	ne
 8005c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c5e:	81a3      	strheq	r3, [r4, #12]
 8005c60:	bf18      	it	ne
 8005c62:	81a3      	strhne	r3, [r4, #12]
 8005c64:	bd10      	pop	{r4, pc}

08005c66 <__sclose>:
 8005c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6a:	f000 b813 	b.w	8005c94 <_close_r>
	...

08005c70 <_write_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4d07      	ldr	r5, [pc, #28]	; (8005c90 <_write_r+0x20>)
 8005c74:	4604      	mov	r4, r0
 8005c76:	4608      	mov	r0, r1
 8005c78:	4611      	mov	r1, r2
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	602a      	str	r2, [r5, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f7fa fcf9 	bl	8000676 <_write>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_write_r+0x1e>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_write_r+0x1e>
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	200016c8 	.word	0x200016c8

08005c94 <_close_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d06      	ldr	r5, [pc, #24]	; (8005cb0 <_close_r+0x1c>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	f7fa fd05 	bl	80006ae <_close>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_close_r+0x1a>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_close_r+0x1a>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	200016c8 	.word	0x200016c8

08005cb4 <_fstat_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d07      	ldr	r5, [pc, #28]	; (8005cd4 <_fstat_r+0x20>)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	602b      	str	r3, [r5, #0]
 8005cc2:	f7fa fd00 	bl	80006c6 <_fstat>
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	d102      	bne.n	8005cd0 <_fstat_r+0x1c>
 8005cca:	682b      	ldr	r3, [r5, #0]
 8005ccc:	b103      	cbz	r3, 8005cd0 <_fstat_r+0x1c>
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200016c8 	.word	0x200016c8

08005cd8 <_isatty_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d06      	ldr	r5, [pc, #24]	; (8005cf4 <_isatty_r+0x1c>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	f7fa fcff 	bl	80006e6 <_isatty>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_isatty_r+0x1a>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_isatty_r+0x1a>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	200016c8 	.word	0x200016c8

08005cf8 <_lseek_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4d07      	ldr	r5, [pc, #28]	; (8005d18 <_lseek_r+0x20>)
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	4608      	mov	r0, r1
 8005d00:	4611      	mov	r1, r2
 8005d02:	2200      	movs	r2, #0
 8005d04:	602a      	str	r2, [r5, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f7fa fcf8 	bl	80006fc <_lseek>
 8005d0c:	1c43      	adds	r3, r0, #1
 8005d0e:	d102      	bne.n	8005d16 <_lseek_r+0x1e>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	b103      	cbz	r3, 8005d16 <_lseek_r+0x1e>
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	200016c8 	.word	0x200016c8

08005d1c <__malloc_lock>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__malloc_lock+0x8>)
 8005d1e:	f7ff be0b 	b.w	8005938 <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	200016bc 	.word	0x200016bc

08005d28 <__malloc_unlock>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__malloc_unlock+0x8>)
 8005d2a:	f7ff be06 	b.w	800593a <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	200016bc 	.word	0x200016bc

08005d34 <_read_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4d07      	ldr	r5, [pc, #28]	; (8005d54 <_read_r+0x20>)
 8005d38:	4604      	mov	r4, r0
 8005d3a:	4608      	mov	r0, r1
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	2200      	movs	r2, #0
 8005d40:	602a      	str	r2, [r5, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f7fa fc7a 	bl	800063c <_read>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_read_r+0x1e>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_read_r+0x1e>
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	200016c8 	.word	0x200016c8

08005d58 <_sbrk>:
 8005d58:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <_sbrk+0x14>)
 8005d5a:	6811      	ldr	r1, [r2, #0]
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	b909      	cbnz	r1, 8005d64 <_sbrk+0xc>
 8005d60:	4903      	ldr	r1, [pc, #12]	; (8005d70 <_sbrk+0x18>)
 8005d62:	6011      	str	r1, [r2, #0]
 8005d64:	6810      	ldr	r0, [r2, #0]
 8005d66:	4403      	add	r3, r0
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4770      	bx	lr
 8005d6c:	200016cc 	.word	0x200016cc
 8005d70:	200016d0 	.word	0x200016d0

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
